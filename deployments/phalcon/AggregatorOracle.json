{
  "address": "0x504F2e3De65F12074a0a43399f307FeFfB186aCd",
  "abi": [
    {
      "inputs": [],
      "name": "EXCEED_DEVIATION",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "EXCEED_SOURCE_LEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INPUT_ARRAY_MISMATCH",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NO_PRIMARY_SOURCE",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NO_VALID_SOURCE",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deviation",
          "type": "uint256"
        }
      ],
      "name": "OUT_OF_DEVIATION_CAP",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPriceDeviation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IBaseOracle[]",
          "name": "oracles",
          "type": "address[]"
        }
      ],
      "name": "SetPrimarySources",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxPriceDeviations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "primarySourceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "primarySources",
      "outputs": [
        {
          "internalType": "contract IBaseOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxPriceDeviationList",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IBaseOracle[][]",
          "name": "allSources",
          "type": "address[][]"
        }
      ],
      "name": "setMultiPrimarySources",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxPriceDeviation",
          "type": "uint256"
        },
        {
          "internalType": "contract IBaseOracle[]",
          "name": "sources",
          "type": "address[]"
        }
      ],
      "name": "setPrimarySources",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ca287eebb39f712890fb0a7a0cd1543339693ff337e14b615ab17c7677231b2",
  "receipt": {
    "to": null,
    "from": "0x83B801Bc28340d63b560b70036ccaf48E5995ae9",
    "contractAddress": "0x504F2e3De65F12074a0a43399f307FeFfB186aCd",
    "transactionIndex": 0,
    "gasUsed": "931298",
    "logsBloom": "0x
    "blockHash": "0x420a087e0b09c30ea8d1fe734aa3abea99407bf53bb4c8fcdc4ee59e6a802ef5",
    "transactionHash": "0x8ca287eebb39f712890fb0a7a0cd1543339693ff337e14b615ab17c7677231b2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17942239,
        "transactionHash": "0x8ca287eebb39f712890fb0a7a0cd1543339693ff337e14b615ab17c7677231b2",
        "address": "0x504F2e3De65F12074a0a43399f307FeFfB186aCd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000083b801bc28340d63b560b70036ccaf48e5995ae9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x420a087e0b09c30ea8d1fe734aa3abea99407bf53bb4c8fcdc4ee59e6a802ef5"
      }
    ],
    "blockNumber": 17942239,
    "cumulativeGasUsed": "931298",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "40a5e959dbaee40ef6eeed84d8383760",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EXCEED_DEVIATION\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"EXCEED_SOURCE_LEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INPUT_ARRAY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NO_PRIMARY_SOURCE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NO_VALID_SOURCE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deviation\",\"type\":\"uint256\"}],\"name\":\"OUT_OF_DEVIATION_CAP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPriceDeviation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBaseOracle[]\",\"name\":\"oracles\",\"type\":\"address[]\"}],\"name\":\"SetPrimarySources\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxPriceDeviations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"primarySourceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"primarySources\",\"outputs\":[{\"internalType\":\"contract IBaseOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxPriceDeviationList\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IBaseOracle[][]\",\"name\":\"allSources\",\"type\":\"address[][]\"}],\"name\":\"setMultiPrimarySources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviation\",\"type\":\"uint256\"},{\"internalType\":\"contract IBaseOracle[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setPrimarySources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BlueberryProtocol\",\"events\":{\"SetPrimarySources(address,uint256,address[])\":{\"params\":{\"maxPriceDeviation\":\"Maximum allowed price deviation.\",\"oracles\":\"List of oracle sources set for the token.\",\"token\":\"Address of the token whose oracle sources were updated.\"}}},\"kind\":\"dev\",\"methods\":{\"getPrice(address)\":{\"params\":{\"token\":\"Address of the token to fetch the price for.\"},\"returns\":{\"_0\":\"The aggregated USD price of the token, scaled by 10**18.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMultiPrimarySources(address[],uint256[],address[][])\":{\"params\":{\"allSources\":\"list of oracle sources, one list for each token.\",\"maxPriceDeviationList\":\"List of maximum allowed price deviations (in 1e18).\",\"tokens\":\"List of token addresses.\"}},\"setPrimarySources(address,uint256,address[])\":{\"details\":\"Only owner can set primary sources\",\"params\":{\"maxPriceDeviation\":\"Maximum price deviation (in 1e18) of price feeds\",\"sources\":\"Oracle sources for the token\",\"token\":\"Token address to set oracle sources\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AggregatorOracle\",\"version\":1},\"userdoc\":{\"errors\":{\"EXCEED_DEVIATION()\":[{\"notice\":\"Thrown when the deviation value exceeds the threshold.\"}],\"EXCEED_SOURCE_LEN(uint256)\":[{\"notice\":\"Thrown when the number of sources exceeds the allowed length.\"}],\"INPUT_ARRAY_MISMATCH()\":[{\"notice\":\"Thrown when the lengths of input arrays do not match.\"}],\"NO_PRIMARY_SOURCE(address)\":[{\"notice\":\"Thrown when no primary source is available for the token.\"}],\"NO_VALID_SOURCE(address)\":[{\"notice\":\"Thrown when no valid price source is available for the token.\"}],\"OUT_OF_DEVIATION_CAP(uint256)\":[{\"notice\":\"Thrown when the price deviation exceeds allowed limits.\"}],\"ZERO_ADDRESS()\":[{\"notice\":\"Thrown when the address provided is the zero address.\"}]},\"events\":{\"SetPrimarySources(address,uint256,address[])\":{\"notice\":\"Emitted when primary oracle sources are set or updated for a token.\"}},\"kind\":\"user\",\"methods\":{\"getPrice(address)\":{\"notice\":\"Fetch the aggregated USD price of a token. If there are multiple valid sources, the function aggregates and ensures the data is within acceptable deviation limits.\"},\"primarySourceCount(address)\":{\"notice\":\"Mapping of primary oracle sources associated with each token.\"},\"primarySources(address,uint256)\":{\"notice\":\"Mapping from token to (mapping from index to oracle source)\"},\"setMultiPrimarySources(address[],uint256[],address[][])\":{\"notice\":\"Set or update the primary oracle sources for multiple tokens at once. Can only be called by the contract owner.\"},\"setPrimarySources(address,uint256,address[])\":{\"notice\":\"Set primary oracle sources for the given token\"}},\"notice\":\"This contract aggregates price feeds from multiple oracle sources,          ensuring a more reliable and resilient price data.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/AggregatorOracle.sol\":\"AggregatorOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\n/// @title IBaseOracle\\n/// @notice Interface for a basic oracle that provides price data for assets.\\ninterface IBaseOracle {\\n    /// @notice Returns the USD value of a given ERC-20 token, normalized to 1e18 decimals.\\n    /// @dev The value returned is multiplied by 10**18 to maintain precision.\\n    /// @param token Address of the ERC-20 token for which the price is requested.\\n    /// @return The USD price of the given token, multiplied by 10**18.\\n    function getPrice(address token) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f1ac0fc8a41365c1c8fdc16f5851e84e49b937b41a86b4f18c8cf266d35daf8\",\"license\":\"MIT\"},\"contracts/oracle/AggregatorOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./BaseOracleExt.sol\\\";\\nimport \\\"../utils/BlueBerryErrors.sol\\\" as Errors;\\nimport \\\"../interfaces/IBaseOracle.sol\\\";\\n\\n/// @title AggregatorOracle\\n/// @author BlueberryProtocol\\n/// @notice This contract aggregates price feeds from multiple oracle sources, \\n///         ensuring a more reliable and resilient price data.\\ncontract AggregatorOracle is IBaseOracle, Ownable, BaseOracleExt {\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      PUBLIC STORAGE \\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Mapping of primary oracle sources associated with each token.\\n    mapping(address => uint256) public primarySourceCount;\\n    /// @notice Mapping from token to (mapping from index to oracle source)\\n    mapping(address => mapping(uint256 => IBaseOracle)) public primarySources;\\n    //// @notice Maximum allowed price deviation between oracle sources, expressed in base 10000.\\n    mapping(address => uint256) public maxPriceDeviations;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      EVENTS \\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when primary oracle sources are set or updated for a token.\\n    /// @param token Address of the token whose oracle sources were updated.\\n    /// @param maxPriceDeviation Maximum allowed price deviation.\\n    /// @param oracles List of oracle sources set for the token.\\n    event SetPrimarySources(\\n        address indexed token,\\n        uint256 maxPriceDeviation,\\n        IBaseOracle[] oracles\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Set primary oracle sources for given token\\n    /// @dev Emit SetPrimarySources event when primary oracles set successfully\\n    /// @param token Token to set oracle sources\\n    /// @param maxPriceDeviation Maximum price deviation (in 1e18) of price feeds\\n    /// @param sources Oracle sources for the token\\n    function _setPrimarySources(\\n        address token,\\n        uint256 maxPriceDeviation,\\n        IBaseOracle[] memory sources\\n    ) internal {\\n        // Validate inputs\\n        if (token == address(0)) revert Errors.ZERO_ADDRESS();\\n        if (maxPriceDeviation > Constants.MAX_PRICE_DEVIATION)\\n            revert Errors.OUT_OF_DEVIATION_CAP(maxPriceDeviation);\\n        if (sources.length > 3) revert Errors.EXCEED_SOURCE_LEN(sources.length);\\n\\n        primarySourceCount[token] = sources.length;\\n        maxPriceDeviations[token] = maxPriceDeviation;\\n        for (uint256 idx = 0; idx < sources.length; idx++) {\\n            if (address(sources[idx]) == address(0))\\n                revert Errors.ZERO_ADDRESS();\\n            primarySources[token][idx] = sources[idx];\\n        }\\n        emit SetPrimarySources(token, maxPriceDeviation, sources);\\n    }\\n\\n    /// @notice Set primary oracle sources for the given token\\n    /// @dev Only owner can set primary sources\\n    /// @param token Token address to set oracle sources\\n    /// @param maxPriceDeviation Maximum price deviation (in 1e18) of price feeds\\n    /// @param sources Oracle sources for the token\\n    function setPrimarySources(\\n        address token,\\n        uint256 maxPriceDeviation,\\n        IBaseOracle[] memory sources\\n    ) external onlyOwner {\\n        _setPrimarySources(token, maxPriceDeviation, sources);\\n    }\\n\\n    /// @notice Set or update the primary oracle sources for multiple tokens at once.\\n    /// Can only be called by the contract owner.\\n    /// @param tokens List of token addresses.\\n    /// @param maxPriceDeviationList List of maximum allowed price deviations (in 1e18).\\n    /// @param allSources list of oracle sources, one list for each token.\\n    function setMultiPrimarySources(\\n        address[] memory tokens,\\n        uint256[] memory maxPriceDeviationList,\\n        IBaseOracle[][] memory allSources\\n    ) external onlyOwner {\\n        // Validate inputs\\n        if (\\n            tokens.length != allSources.length ||\\n            tokens.length != maxPriceDeviationList.length\\n        ) revert Errors.INPUT_ARRAY_MISMATCH();\\n\\n        for (uint256 idx = 0; idx < tokens.length; idx++) {\\n            _setPrimarySources(\\n                tokens[idx],\\n                maxPriceDeviationList[idx],\\n                allSources[idx]\\n            );\\n        }\\n    }\\n\\n    /// @notice Fetch the aggregated USD price of a token.\\n    /// If there are multiple valid sources, the function aggregates and ensures the data is within acceptable deviation limits.\\n    /// @param token Address of the token to fetch the price for.\\n    /// @return The aggregated USD price of the token, scaled by 10**18.\\n    function getPrice(address token) external override returns (uint256) {\\n        uint256 candidateSourceCount = primarySourceCount[token];\\n        if (candidateSourceCount == 0) revert Errors.NO_PRIMARY_SOURCE(token);\\n        uint256[] memory prices = new uint256[](candidateSourceCount);\\n\\n        /// Get valid oracle sources\\n        uint256 validSourceCount = 0;\\n        for (uint256 idx = 0; idx < candidateSourceCount; idx++) {\\n            try primarySources[token][idx].getPrice(token) returns (\\n                uint256 px\\n            ) {\\n                if (px != 0) prices[validSourceCount++] = px;\\n            } catch {}\\n        }\\n        if (validSourceCount == 0) revert Errors.NO_VALID_SOURCE(token);\\n        /// Sort prices in ascending order\\n        for (uint256 i = 0; i < validSourceCount - 1; i++) {\\n            for (uint256 j = 0; j < validSourceCount - i - 1; j++) {\\n                if (prices[j] > prices[j + 1]) {\\n                    (prices[j], prices[j + 1]) = (prices[j + 1], prices[j]);\\n                }\\n            }\\n        }\\n        uint256 maxPriceDeviation = maxPriceDeviations[token];\\n\\n        /// Algo:\\n        /// - 1 valid source --> return price\\n        /// - 2 valid sources\\n        ///     --> if the prices within deviation threshold, return average\\n        ///     --> else revert\\n        /// - 3 valid sources --> check deviation threshold of each pair\\n        ///     --> if all within threshold, return median\\n        ///     --> if one pair within threshold, return average of the pair\\n        ///     --> if none, revert\\n        /// - revert Errors.otherwise\\n        if (validSourceCount == 1) {\\n            return prices[0]; // if 1 valid source, return\\n        } else if (validSourceCount == 2) {\\n            if (!_isValidPrices(prices[0], prices[1], maxPriceDeviation))\\n                revert Errors.EXCEED_DEVIATION();\\n            return (prices[0] + prices[1]) / 2; /// if 2 valid sources, return average\\n        } else {\\n            bool midMinOk = _isValidPrices(\\n                prices[0],\\n                prices[1],\\n                maxPriceDeviation\\n            );\\n            bool maxMidOk = _isValidPrices(\\n                prices[1],\\n                prices[2],\\n                maxPriceDeviation\\n            );\\n            if (midMinOk && maxMidOk) {\\n                return prices[1]; /// if 3 valid sources, and each pair is within thresh, return median\\n            } else if (midMinOk) {\\n                return (prices[0] + prices[1]) / 2; /// return average of pair within thresh\\n            } else if (maxMidOk) {\\n                return (prices[1] + prices[2]) / 2; /// return average of pair within thresh\\n            } else {\\n                revert Errors.EXCEED_DEVIATION();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41ff566aa8c1ee07150c93223a8891127230fe21c140d4fe90b8c3cfefde2a72\",\"license\":\"MIT\"},\"contracts/oracle/BaseOracleExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"../utils/BlueBerryConst.sol\\\" as Constants;\\n\\nabstract contract BaseOracleExt {\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Internal function to validate deviations of 2 given prices\\n    /// @param price0 First price to validate, base 1e18\\n    /// @param price1 Second price to validate, base 1e18\\n    /// @param maxPriceDeviation Max price deviation of 2 prices, base 10000\\n    function _isValidPrices(\\n        uint256 price0,\\n        uint256 price1,\\n        uint256 maxPriceDeviation\\n    ) internal pure returns (bool) {\\n        uint256 maxPrice = price0 > price1 ? price0 : price1;\\n        uint256 minPrice = price0 > price1 ? price1 : price0;\\n        return\\n            (((maxPrice - minPrice) * Constants.DENOMINATOR) / maxPrice) <=\\n            maxPriceDeviation;\\n    }\\n}\\n\",\"keccak256\":\"0x867fd48b05da13653cb1e28f3a05bb444eeff80333a34c3b191f4a32344b0fac\",\"license\":\"MIT\"},\"contracts/utils/BlueBerryConst.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\n/// title BlueberryConst\\n/// @notice containing all general constants used in Blueberry protocol\\npragma solidity 0.8.16;\\n\\n/// @dev Common denominator for percentage-based calculations.\\nuint256 constant DENOMINATOR = 10000;\\n\\n/// @dev Minimum threshold for liquidity operations, represented as a fraction of the DENOMINATOR.\\nuint256 constant MIN_LIQ_THRESHOLD = 8000; // represent 80%\\n\\n/// @dev Precision factor to maintain price accuracy.\\nuint256 constant PRICE_PRECISION = 1e18;\\n\\n/// @dev Maximum allowed price deviation, represented as a fraction of the DENOMINATOR.\\nuint256 constant MAX_PRICE_DEVIATION = 1000; // represent 10%\\n\\n/// @dev Minimum time interval for specific time-dependent operations.\\nuint32 constant MIN_TIME_GAP = 1 hours;\\n\\n/// @dev Maximum time interval for specific time-dependent operations.\\nuint32 constant MAX_TIME_GAP = 2 days;\\n\\n/// @dev Maximum allowed fee rate, represented as a fraction of the DENOMINATOR.\\nuint256 constant MAX_FEE_RATE = 2000; // represent 20%\\n\\n/// @dev Maximum allowed time for vault withdrawal fee calculations.\\nuint256 constant MAX_WITHDRAW_VAULT_FEE_WINDOW = 60 days;\\n\\n/// @dev Maximum delay permitted for swap operations.\\nuint32 constant MAX_DELAY_ON_SWAP = 2 hours;\\n\\n/// @dev Allowed grace period time for sequencer operations.\\nuint32 constant SEQUENCER_GRACE_PERIOD_TIME = 3600;\\n\\n/// @dev Precision factor for Chainlink price feed values.\\nuint256 constant CHAINLINK_PRICE_FEED_PRECISION = 1e8;\\n\\n/// @dev Warm-up period before a liquidation repayment can be initiated.\\nuint256 constant LIQUIDATION_REPAY_WARM_UP_PERIOD = 4 hours;\\n\",\"keccak256\":\"0xc72e559e5caa385508ef3158993ec99e13e89b4c4b0b40156b34c0fb710e5952\",\"license\":\"MIT\"},\"contracts/utils/BlueBerryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\n/// title BlueberryErrors\\n/// @notice containing all errors used in Blueberry protocol\\npragma solidity 0.8.16;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                COMMON ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an action involves zero amount of tokens.\\nerror ZERO_AMOUNT();\\n\\n/// @notice Thrown when the address provided is the zero address.\\nerror ZERO_ADDRESS();\\n\\n/// @notice Thrown when the lengths of input arrays do not match.\\nerror INPUT_ARRAY_MISMATCH();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                ORACLE ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the delay time exceeds allowed limits.\\nerror TOO_LONG_DELAY(uint256 delayTime);\\n\\n/// @notice Thrown when there's no maximum delay set for a token.\\nerror NO_MAX_DELAY(address token);\\n\\n/// @notice Thrown when the price information for a token is outdated.\\nerror PRICE_OUTDATED(address token);\\n\\n/// @notice Thrown when there's no symbol mapping for the token.\\nerror NO_SYM_MAPPING(address token);\\n\\n/// @notice Thrown when the price obtained is negative.\\nerror PRICE_NEGATIVE(address token);\\n\\n/// @notice Thrown when the sequencer is offline\\nerror SEQUENCER_DOWN(address sequencer);\\n\\n/// @notice Thrown when the grace period for a sequencer is not over yet.\\nerror SEQUENCER_GRACE_PERIOD_NOT_OVER(address sequencer);\\n\\n/// @notice Thrown when the price deviation exceeds allowed limits.\\nerror OUT_OF_DEVIATION_CAP(uint256 deviation);\\n\\n/// @notice Thrown when the number of sources exceeds the allowed length.\\nerror EXCEED_SOURCE_LEN(uint256 length);\\n\\n/// @notice Thrown when no primary source is available for the token.\\nerror NO_PRIMARY_SOURCE(address token);\\n\\n/// @notice Thrown when no valid price source is available for the token.\\nerror NO_VALID_SOURCE(address token);\\n\\n/// @notice Thrown when the deviation value exceeds the threshold.\\nerror EXCEED_DEVIATION();\\n\\n/// @notice Thrown when the mean price is below the acceptable threshold.\\nerror TOO_LOW_MEAN(uint256 mean);\\n\\n/// @notice Thrown when no mean price is set for the token.\\nerror NO_MEAN(address token);\\n\\n/// @notice Thrown when no stable pool exists for the token.\\nerror NO_STABLEPOOL(address token);\\n\\n/// @notice Thrown when the price fetch process fails for a token.\\nerror PRICE_FAILED(address token);\\n\\n/// @notice Thrown when the liquidation threshold is set too high.\\nerror LIQ_THRESHOLD_TOO_HIGH(uint256 threshold);\\n\\n/// @notice Thrown when the liquidation threshold is set too low.\\nerror LIQ_THRESHOLD_TOO_LOW(uint256 threshold);\\n\\n/// @notice Thrown when the oracle doesn't support a specific token.\\nerror ORACLE_NOT_SUPPORT(address token);\\n\\n/// @notice Thrown when the oracle doesn't support a specific LP pair token.\\nerror ORACLE_NOT_SUPPORT_LP(address lp);\\n\\n/// @notice Thrown when the oracle doesn't support a specific wToken.\\nerror ORACLE_NOT_SUPPORT_WTOKEN(address wToken);\\n\\n/// @notice Thrown when there is no route to fetch data for the oracle\\nerror NO_ORACLE_ROUTE(address token);\\n\\n/// @notice Thrown when a value is out of an acceptable range.\\nerror VALUE_OUT_OF_RANGE();\\n\\n/// @notice Thrown when specified limits are incorrect.\\nerror INCORRECT_LIMITS();\\n\\n/// @notice Thrown when Curve LP is already registered.\\nerror CRV_LP_ALREADY_REGISTERED(address lp);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            GENERAL SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the caller isn't recognized as a bank.\\nerror NOT_BANK(address caller);\\n\\n/// @notice Thrown when refunding ETH encounters an issue.\\nerror REFUND_ETH_FAILED(uint256 balance);\\n\\n/// @notice Thrown when a transaction isn't initiated by WETH.\\nerror NOT_FROM_WETH(address from);\\n\\n/// @notice Thrown when the liquidity pool isn't whitelisted\\nerror LP_NOT_WHITELISTED(address lp);\\n\\n/// @notice Thrown when the collateral doesn't exist for a strategy.\\nerror COLLATERAL_NOT_EXIST(uint256 strategyId, address colToken);\\n\\n/// @notice Thrown when the strategy ID doesn't correspond to an existing strategy.\\nerror STRATEGY_NOT_EXIST(address spell, uint256 strategyId);\\n\\n/// @notice Thrown when the position size exceeds maximum limits.\\nerror EXCEED_MAX_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is below minimum requirements.\\nerror EXCEED_MIN_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the loan-to-value ratio exceeds allowed maximum.\\nerror EXCEED_MAX_LTV();\\n\\n/// @notice Thrown when the strategy ID provided is incorrect.\\nerror INCORRECT_STRATEGY_ID(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is invalid.\\nerror INVALID_POS_SIZE();\\n\\n/// @notice Thrown when an incorrect liquidity pool token is provided.\\nerror INCORRECT_LP(address lpToken);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror INCORRECT_PID(uint256 pid);\\n\\n/// @notice Thrown when an incorrect collateral token is provided.\\nerror INCORRECT_COLTOKEN(address colToken);\\n\\n/// @notice Thrown when an incorrect underlying token is provided.\\nerror INCORRECT_UNDERLYING(address uToken);\\nerror INCORRECT_DEBT(address debtToken);\\nerror NOT_FROM_UNIV3(address sender);\\nerror SWAP_FAILED(address swapToken);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CURVE SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when no gauge is present.\\nerror NO_GAUGE();\\n\\n/// @notice Thrown when a gauge already exists for the provided pid and gid.\\nerror EXISTING_GAUGE(uint256 pid, uint256 gid);\\n\\n/// @notice Thrown when no Curve pool is found for the given pid.\\nerror NO_CURVE_POOL(uint256 pid);\\n\\n/// @notice Thrown when no LP has been registered.\\nerror NO_LP_REGISTERED(address lp);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                VAULT ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when borrowing from the vault fails.\\nerror BORROW_FAILED(uint256 amount);\\n\\n/// @notice Thrown when repaying to the vault fails.\\nerror REPAY_FAILED(uint256 amount);\\n\\n/// @notice Thrown when lending to the vault fails.\\nerror LEND_FAILED(uint256 amount);\\n\\n/// @notice Thrown when redeeming from the vault fails.\\nerror REDEEM_FAILED(uint256 amount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                WRAPPER ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an invalid token ID is provided.\\nerror INVALID_TOKEN_ID(uint256 tokenId);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror BAD_PID(uint256 pid);\\n\\n/// @notice Thrown when a mismatch in reward per share is detected.\\nerror BAD_REWARD_PER_SHARE(uint256 rewardPerShare);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                BANK ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a function is called without a required execution flag.\\nerror NOT_UNDER_EXECUTION();\\n\\n/// @notice Thrown when a transaction isn't initiated \\n/// by an externally owned account (EOA).\\nerror NOT_EOA(address from);\\n\\n/// @notice Thrown when a transaction isn't initiated by the expected spell.\\nerror NOT_FROM_SPELL(address from);\\n\\n/// @notice Thrown when the sender is not the owner of a given position ID.\\nerror NOT_FROM_OWNER(uint256 positionId, address sender);\\n\\n\\n/// @notice Thrown when a spell address isn't whitelisted.\\nerror SPELL_NOT_WHITELISTED(address spell);\\n\\n/// @notice Thrown when a token isn't whitelisted.\\nerror TOKEN_NOT_WHITELISTED(address token);\\n\\n/// @notice Thrown when a bank isn't listed for a given token.\\nerror BANK_NOT_LISTED(address token);\\n\\n/// @notice Thrown when a bank is already listed for a given token.\\nerror BANK_ALREADY_LISTED();\\n\\n/// @notice Thrown when the bank limit is reached.\\nerror BANK_LIMIT();\\n\\n/// @notice Thrown when the BTOKEN is already added.\\nerror BTOKEN_ALREADY_ADDED();\\n\\n/// @notice Thrown when the lending action isn't allowed.\\nerror LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when the borrowing action isn't allowed.\\nerror BORROW_NOT_ALLOWED();\\n\\n/// @notice Thrown when the repaying action isn't allowed.\\nerror REPAY_NOT_ALLOWED();\\n\\n/// @notice Thrown when the redeeming action isn't allowed.\\nerror WITHDRAW_LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when certain actions are locked.\\nerror LOCKED();\\n\\n/// @notice Thrown when an action isn't executed.\\nerror NOT_IN_EXEC();\\n\\n/// @notice Thrown when the repayment allowance hasn't been warmed up.\\nerror REPAY_ALLOW_NOT_WARMED_UP();\\n\\n/// @notice Thrown when a different collateral type exists.\\nerror DIFF_COL_EXIST(address collToken);\\n\\n/// @notice Thrown when a position is not eligible for liquidation.\\nerror NOT_LIQUIDATABLE(uint256 positionId);\\n\\n/// @notice Thrown when a position is flagged as bad or invalid.\\nerror BAD_POSITION(uint256 posId);\\n\\n/// @notice Thrown when collateral for a specific position is flagged as bad or invalid.\\nerror BAD_COLLATERAL(uint256 positionId);\\n\\n/// @notice Thrown when there's insufficient collateral for an operation.\\nerror INSUFFICIENT_COLLATERAL();\\n\\n/// @notice Thrown when an attempted repayment exceeds the actual debt.\\nerror REPAY_EXCEEDS_DEBT(uint256 repay, uint256 debt);\\n\\n/// @notice Thrown when an invalid utility token is provided.\\nerror INVALID_UTOKEN(address uToken);\\n\\n/// @notice Thrown when a borrow operation results in zero shares.\\nerror BORROW_ZERO_SHARE(uint256 borrowAmount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CONFIGURATION ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when slippage exceeds the allowed limit.\\nerror EXCEED_SLIPPAGE(uint256 ratio);\\n\\n/// @notice Thrown when a certain ratio is too high for an operation.\\nerror RATIO_TOO_HIGH(uint256 ratio);\\n\\n/// @notice Thrown when an invalid fee distribution is detected.\\nerror INVALID_FEE_DISTRIBUTION();\\n\\n/// @notice Thrown when no treasury is set for fee distribution.\\nerror NO_TREASURY_SET();\\n\\n/// @notice Thrown when a fee window has already started.\\nerror FEE_WINDOW_ALREADY_STARTED();\\n\\n/// @notice Thrown when a fee window duration is too long.\\nerror FEE_WINDOW_TOO_LONG(uint256 windowTime);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                UTILITY ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a cast operation fails.\\nerror CAST();\\n\\n/// @notice Thrown when an operation has surpassed its deadline.\\nerror EXPIRED(uint256 deadline);\\n\",\"keccak256\":\"0x8e02bff5533d9c0f73ccad89c6b292c75db6e36baabf918004ee078ffb9bbdbe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100fb578063bb0e70e014610120578063c66683c014610140578063e431a4f514610174578063f2fde38b1461018757600080fd5b806341976e0914610098578063507b9ede146100be578063715018a6146100d357806389752929146100db575b600080fd5b6100ab6100a6366004610ad5565b61019a565b6040519081526020015b60405180910390f35b6100d16100cc366004610cb3565b6106c0565b005b6100d1610773565b6100ab6100e9366004610ad5565b60016020526000908152604090205481565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100b5565b6100ab61012e366004610ad5565b60036020526000908152604090205481565b61010861014e366004610d99565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6100d1610182366004610dc5565b610787565b6100d1610195366004610ad5565b61079f565b6001600160a01b0381166000908152600160205260408120548082036101e35760405163daa6404b60e01b81526001600160a01b03841660048201526024015b60405180910390fd5b60008167ffffffffffffffff8111156101fe576101fe610af9565b604051908082528060200260200182016040528015610227578160200160208202803683370190505b5090506000805b83811015610303576001600160a01b038681166000818152600260209081526040808320868452909152908190205490516341976e0960e01b81526004810192909252909116906341976e09906024016020604051808303816000875af19250505080156102b9575060408051601f3d908101601f191682019092526102b691810190610e14565b60015b156102f15780156102ef578084846102d081610e43565b9550815181106102e2576102e2610e5c565b6020026020010181815250505b505b806102fb81610e43565b91505061022e565b50806000036103305760405163bb3328ed60e01b81526001600160a01b03861660048201526024016101da565b60005b61033e600183610e72565b8110156104535760005b60016103548385610e72565b61035e9190610e72565b8110156104405783610371826001610e8b565b8151811061038157610381610e5c565b602002602001015184828151811061039b5761039b610e5c565b6020026020010151111561042e57836103b5826001610e8b565b815181106103c5576103c5610e5c565b60200260200101518482815181106103df576103df610e5c565b60200260200101518583815181106103f9576103f9610e5c565b602002602001018684600161040e9190610e8b565b8151811061041e5761041e610e5c565b6020908102919091010191909152525b8061043881610e43565b915050610348565b508061044b81610e43565b915050610333565b506001600160a01b038516600090815260036020526040902054600182900361049c578260008151811061048957610489610e5c565b6020026020010151945050505050919050565b81600203610556576104e3836000815181106104ba576104ba610e5c565b6020026020010151846001815181106104d5576104d5610e5c565b602002602001015183610818565b61050057604051637114d53360e01b815260040160405180910390fd5b60028360018151811061051557610515610e5c565b60200260200101518460008151811061053057610530610e5c565b60200260200101516105429190610e8b565b61054c9190610e9e565b9695505050505050565b60006105978460008151811061056e5761056e610e5c565b60200260200101518560018151811061058957610589610e5c565b602002602001015184610818565b905060006105da856001815181106105b1576105b1610e5c565b6020026020010151866002815181106105cc576105cc610e5c565b602002602001015185610818565b90508180156105e65750805b1561061357846001815181106105fe576105fe610e5c565b60200260200101519650505050505050919050565b81156106715760028560018151811061062e5761062e610e5c565b60200260200101518660008151811061064957610649610e5c565b602002602001015161065b9190610e8b565b6106659190610e9e565b98975050505050505050565b80156106a75760028560028151811061068c5761068c610e5c565b60200260200101518660018151811061064957610649610e5c565b604051637114d53360e01b815260040160405180910390fd5b6106c861086e565b805183511415806106db57508151835114155b156106f95760405163025e650f60e01b815260040160405180910390fd5b60005b835181101561076d5761075b84828151811061071a5761071a610e5c565b602002602001015184838151811061073457610734610e5c565b602002602001015184848151811061074e5761074e610e5c565b60200260200101516108c8565b8061076581610e43565b9150506106fc565b50505050565b61077b61086e565b6107856000610a70565b565b61078f61086e565b61079a8383836108c8565b505050565b6107a761086e565b6001600160a01b03811661080c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101da565b61081581610a70565b50565b600080838511610828578361082a565b845b9050600084861161083b578561083d565b845b9050838261271061084e8483610e72565b6108589190610ec0565b6108629190610e9e565b11159695505050505050565b6000546001600160a01b031633146107855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101da565b6001600160a01b0383166108ef5760405163538ba4f960e01b815260040160405180910390fd5b6103e882111561091557604051631a6b806360e21b8152600481018390526024016101da565b60038151111561093d57805160405163118f6cf360e11b81526004016101da91815260200190565b80516001600160a01b038416600090815260016020908152604080832093909355600390529081208390555b8151811015610a275760006001600160a01b031682828151811061098f5761098f610e5c565b60200260200101516001600160a01b0316036109be5760405163538ba4f960e01b815260040160405180910390fd5b8181815181106109d0576109d0610e5c565b6020908102919091018101516001600160a01b0386811660009081526002845260408082208683529094529290922080546001600160a01b0319169290911691909117905580610a1f81610e43565b915050610969565b50826001600160a01b03167ffaf0e7a4bd03038343c2a7e8953d95dfec44a01478bba4f65a5b5ec9c397da538383604051610a63929190610edf565b60405180910390a2505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461081557600080fd5b600060208284031215610ae757600080fd5b8135610af281610ac0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610b3857610b38610af9565b604052919050565b600067ffffffffffffffff821115610b5a57610b5a610af9565b5060051b60200190565b600082601f830112610b7557600080fd5b81356020610b8a610b8583610b40565b610b0f565b82815260059290921b84018101918181019086841115610ba957600080fd5b8286015b84811015610bc45780358352918301918301610bad565b509695505050505050565b600082601f830112610be057600080fd5b81356020610bf0610b8583610b40565b82815260059290921b84018101918181019086841115610c0f57600080fd5b8286015b84811015610bc4578035610c2681610ac0565b8352918301918301610c13565b600082601f830112610c4457600080fd5b81356020610c54610b8583610b40565b82815260059290921b84018101918181019086841115610c7357600080fd5b8286015b84811015610bc457803567ffffffffffffffff811115610c975760008081fd5b610ca58986838b0101610bcf565b845250918301918301610c77565b600080600060608486031215610cc857600080fd5b833567ffffffffffffffff80821115610ce057600080fd5b818601915086601f830112610cf457600080fd5b81356020610d04610b8583610b40565b82815260059290921b8401810191818101908a841115610d2357600080fd5b948201945b83861015610d4a578535610d3b81610ac0565b82529482019490820190610d28565b97505087013592505080821115610d6057600080fd5b610d6c87838801610b64565b93506040860135915080821115610d8257600080fd5b50610d8f86828701610c33565b9150509250925092565b60008060408385031215610dac57600080fd5b8235610db781610ac0565b946020939093013593505050565b600080600060608486031215610dda57600080fd5b8335610de581610ac0565b925060208401359150604084013567ffffffffffffffff811115610e0857600080fd5b610d8f86828701610bcf565b600060208284031215610e2657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610e5557610e55610e2d565b5060010190565b634e487b7160e01b600052603260045260246000fd5b81810381811115610e8557610e85610e2d565b92915050565b80820180821115610e8557610e85610e2d565b600082610ebb57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610eda57610eda610e2d565b500290565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015610f295784516001600160a01b031683529383019391830191600101610f04565b509097965050505050505056fea264697066735822122012fdc9806fc678df0cb06538ec5cfb636efa148c9db79b683266f9bd86c2cbc064736f6c63430008100033",
  "devdoc": {
    "author": "BlueberryProtocol",
    "events": {
      "SetPrimarySources(address,uint256,address[])": {
        "params": {
          "maxPriceDeviation": "Maximum allowed price deviation.",
          "oracles": "List of oracle sources set for the token.",
          "token": "Address of the token whose oracle sources were updated."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getPrice(address)": {
        "params": {
          "token": "Address of the token to fetch the price for."
        },
        "returns": {
          "_0": "The aggregated USD price of the token, scaled by 10**18."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMultiPrimarySources(address[],uint256[],address[][])": {
        "params": {
          "allSources": "list of oracle sources, one list for each token.",
          "maxPriceDeviationList": "List of maximum allowed price deviations (in 1e18).",
          "tokens": "List of token addresses."
        }
      },
      "setPrimarySources(address,uint256,address[])": {
        "details": "Only owner can set primary sources",
        "params": {
          "maxPriceDeviation": "Maximum price deviation (in 1e18) of price feeds",
          "sources": "Oracle sources for the token",
          "token": "Token address to set oracle sources"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AggregatorOracle",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "EXCEED_DEVIATION()": [
        {
          "notice": "Thrown when the deviation value exceeds the threshold."
        }
      ],
      "EXCEED_SOURCE_LEN(uint256)": [
        {
          "notice": "Thrown when the number of sources exceeds the allowed length."
        }
      ],
      "INPUT_ARRAY_MISMATCH()": [
        {
          "notice": "Thrown when the lengths of input arrays do not match."
        }
      ],
      "NO_PRIMARY_SOURCE(address)": [
        {
          "notice": "Thrown when no primary source is available for the token."
        }
      ],
      "NO_VALID_SOURCE(address)": [
        {
          "notice": "Thrown when no valid price source is available for the token."
        }
      ],
      "OUT_OF_DEVIATION_CAP(uint256)": [
        {
          "notice": "Thrown when the price deviation exceeds allowed limits."
        }
      ],
      "ZERO_ADDRESS()": [
        {
          "notice": "Thrown when the address provided is the zero address."
        }
      ]
    },
    "events": {
      "SetPrimarySources(address,uint256,address[])": {
        "notice": "Emitted when primary oracle sources are set or updated for a token."
      }
    },
    "kind": "user",
    "methods": {
      "getPrice(address)": {
        "notice": "Fetch the aggregated USD price of a token. If there are multiple valid sources, the function aggregates and ensures the data is within acceptable deviation limits."
      },
      "primarySourceCount(address)": {
        "notice": "Mapping of primary oracle sources associated with each token."
      },
      "primarySources(address,uint256)": {
        "notice": "Mapping from token to (mapping from index to oracle source)"
      },
      "setMultiPrimarySources(address[],uint256[],address[][])": {
        "notice": "Set or update the primary oracle sources for multiple tokens at once. Can only be called by the contract owner."
      },
      "setPrimarySources(address,uint256,address[])": {
        "notice": "Set primary oracle sources for the given token"
      }
    },
    "notice": "This contract aggregates price feeds from multiple oracle sources,          ensuring a more reliable and resilient price data.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3374,
        "contract": "contracts/oracle/AggregatorOracle.sol:AggregatorOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25271,
        "contract": "contracts/oracle/AggregatorOracle.sol:AggregatorOracle",
        "label": "primarySourceCount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25279,
        "contract": "contracts/oracle/AggregatorOracle.sol:AggregatorOracle",
        "label": "primarySources",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_contract(IBaseOracle)13365))"
      },
      {
        "astId": 25283,
        "contract": "contracts/oracle/AggregatorOracle.sol:AggregatorOracle",
        "label": "maxPriceDeviations",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBaseOracle)13365": {
        "encoding": "inplace",
        "label": "contract IBaseOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_contract(IBaseOracle)13365))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => contract IBaseOracle))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_contract(IBaseOracle)13365)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_contract(IBaseOracle)13365)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IBaseOracle)",
        "numberOfBytes": "32",
        "value": "t_contract(IBaseOracle)13365"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}