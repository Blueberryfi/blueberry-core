{
  "address": "0xbEC0072A623439Fe199e4FD106F5016F7b274ae0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBaseOracle",
          "name": "base_",
          "type": "address"
        },
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "addressProvider_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "ORACLE_NOT_SUPPORT_LP",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "crvLp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "underlyingTokens",
          "type": "address[]"
        }
      ],
      "name": "CurveLpRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract ICurveAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "base",
      "outputs": [
        {
          "internalType": "contract IBaseOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crvLp",
          "type": "address"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "coins",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "virtualPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crvLp",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x73216f288e322b8012fc3b6653a3439cc0d94a561714f2b87ef8bad9ea071434",
  "receipt": {
    "to": null,
    "from": "0x83B801Bc28340d63b560b70036ccaf48E5995ae9",
    "contractAddress": "0xbEC0072A623439Fe199e4FD106F5016F7b274ae0",
    "transactionIndex": 0,
    "gasUsed": "1011485",
    "logsBloom": "0x
    "blockHash": "0xda7962f9e5ac5dc4325b8640111cbaea5fba67b9f0fe6ee8c35cbd96e392e235",
    "transactionHash": "0x73216f288e322b8012fc3b6653a3439cc0d94a561714f2b87ef8bad9ea071434",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17942258,
        "transactionHash": "0x73216f288e322b8012fc3b6653a3439cc0d94a561714f2b87ef8bad9ea071434",
        "address": "0xbEC0072A623439Fe199e4FD106F5016F7b274ae0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000083b801bc28340d63b560b70036ccaf48e5995ae9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xda7962f9e5ac5dc4325b8640111cbaea5fba67b9f0fe6ee8c35cbd96e392e235"
      }
    ],
    "blockNumber": 17942258,
    "cumulativeGasUsed": "1011485",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAe1209dc6d0fe6DC56D34F20d4133c8EEFa2137c",
    "0x0000000022d53366457f9d5e68ec105046fc4383"
  ],
  "numDeployments": 1,
  "solcInputHash": "40a5e959dbaee40ef6eeed84d8383760",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBaseOracle\",\"name\":\"base_\",\"type\":\"address\"},{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"addressProvider_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"ORACLE_NOT_SUPPORT_LP\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crvLp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"}],\"name\":\"CurveLpRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"contract IBaseOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crvLp\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crvLp\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BlueberryProtocol\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"addressProvider_\":\"The address of the curve address provider.\",\"base_\":\"The address of the base oracle.\"}},\"getPoolInfo(address)\":{\"params\":{\"crvLp\":\"The Curve LP token address.\"},\"returns\":{\"coins\":\"The list of underlying tokens in the pool.\",\"pool\":\"The Curve pool address.\",\"virtualPrice\":\"The virtual price of the Curve pool.\"}},\"getPrice(address)\":{\"details\":\"Uses the minimum underlying token price for calculation.\",\"params\":{\"crvLp\":\"The ERC-20 Curve LP token address.\"},\"returns\":{\"_0\":\"The USD value of the Curve LP token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Curve Stable Oracle\",\"version\":1},\"userdoc\":{\"errors\":{\"ORACLE_NOT_SUPPORT_LP(address)\":[{\"notice\":\"Thrown when the oracle doesn't support a specific LP pair token.\"}]},\"events\":{\"CurveLpRegistered(address,address,address[])\":{\"notice\":\"Emitted when a Curve LP token is registered with its associated pool and underlying tokens.\"}},\"kind\":\"user\",\"methods\":{\"addressProvider()\":{\"notice\":\"Address provider for Curve-related contracts.\"},\"constructor\":{\"notice\":\"Constructor initializes the CurveBaseOracle with the provided parameters.\"},\"getPoolInfo(address)\":{\"notice\":\"Fetches Curve pool details for the provided Curve LP token.\"},\"getPrice(address)\":{\"notice\":\"Returns the USD value of the specified Curve LP token with 18 decimals of precision.\"}},\"notice\":\"Oracle contract that provides price feeds for Curve stable LP tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/CurveStableOracle.sol\":\"CurveStableOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\n/// @title IBaseOracle\\n/// @notice Interface for a basic oracle that provides price data for assets.\\ninterface IBaseOracle {\\n    /// @notice Returns the USD value of a given ERC-20 token, normalized to 1e18 decimals.\\n    /// @dev The value returned is multiplied by 10**18 to maintain precision.\\n    /// @param token Address of the ERC-20 token for which the price is requested.\\n    /// @return The USD price of the given token, multiplied by 10**18.\\n    function getPrice(address token) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f1ac0fc8a41365c1c8fdc16f5851e84e49b937b41a86b4f18c8cf266d35daf8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IBaseOracle.sol\\\";\\n\\n/// @title ICurveOracle\\n/// @notice Interface for the CurveOracle contract which provides price feed data for assets on Curve Finance.\\ninterface ICurveOracle is IBaseOracle {\\n    /// @notice Fetches relevant information about a Curve liquidity pool.\\n    /// @param crvLp The address of the Curve liquidity pool token (LP token).\\n    /// @return pool Address of the pool contract.\\n    /// @return coins A list of underlying tokens in the Curve liquidity pool.\\n    /// @return virtualPrice The current virtual price of the LP token for the given Curve liquidity pool.\\n    function getPoolInfo(\\n        address crvLp\\n    )\\n        external\\n        returns (address pool, address[] memory coins, uint256 virtualPrice);\\n}\\n\",\"keccak256\":\"0x31a57e4c6b4fbe2aa333cfa07563572b3ab23cc5851b6feb387aad7db03e67e1\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_id_info(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            address addr,\\n            bool is_active,\\n            uint256 version,\\n            uint256 last_modified,\\n            string memory description\\n        );\\n\\n    function get_address(uint256 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0x8fc2c7d4d612bb086318455dd2eecda2e059caebb80fcd9c960e1b066e684687\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveCryptoSwapRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface ICurveCryptoSwapRegistry {\\n    function get_n_coins(address lp) external view returns (uint256);\\n\\n    function pool_list(uint256 id) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function get_virtual_price_from_lp_token(\\n        address lp\\n    ) external view returns (uint256);\\n\\n    function get_gauges(\\n        address pool\\n    ) external view returns (address[10] memory, uint128[10] memory);\\n}\\n\",\"keccak256\":\"0xea9031320e60b3e7751529a4842ab11841f9eea5d90de1c328f9056b904c9f5e\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface ICurvePool {\\n    function add_liquidity(uint256[2] calldata, uint256) external;\\n\\n    function add_liquidity(uint256[3] calldata, uint256) external;\\n\\n    function add_liquidity(uint256[4] calldata, uint256) external;\\n\\n    function remove_liquidity(uint256, uint256[2] calldata) external;\\n\\n    function remove_liquidity(uint256, uint256[3] calldata) external;\\n\\n    function remove_liquidity(uint256, uint256[4] calldata) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata, uint256) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata, uint256) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata, uint256) external;\\n\\n    function remove_liquidity_one_coin(uint256, int128, uint256) external;\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function lp_token() external view returns (address); // v1\\n\\n    function token() external view returns (address); // v2\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function withdraw_admin_fees() external;\\n\\n    function claim_admin_fees() external;\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x466d60a0cc8b255356116594700c6af25703eca324749f3bec9d020074440bd9\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface ICurveRegistry {\\n    function get_n_coins(address lp) external view returns (uint256, uint256);\\n\\n    function pool_list(uint256 id) external view returns (address);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function get_virtual_price_from_lp_token(\\n        address lp\\n    ) external view returns (uint256);\\n\\n    function get_gauges(\\n        address pool\\n    ) external view returns (address[10] memory, uint128[10] memory);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n}\\n\",\"keccak256\":\"0x23dd615a81b09b362ee7937084435dd99f9f5b278ca6ed7f298f4e341e82cfbb\",\"license\":\"MIT\"},\"contracts/oracle/CurveBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../utils/BlueBerryErrors.sol\\\" as BlueBerryErrors;\\nimport \\\"./UsingBaseOracle.sol\\\";\\nimport \\\"../interfaces/ICurveOracle.sol\\\";\\nimport \\\"../interfaces/curve/ICurveRegistry.sol\\\";\\nimport \\\"../interfaces/curve/ICurveCryptoSwapRegistry.sol\\\";\\nimport \\\"../interfaces/curve/ICurveAddressProvider.sol\\\";\\nimport \\\"../interfaces/curve/ICurvePool.sol\\\";\\n\\n/// @title Curve Base Oracle\\n/// @author BlueberryProtocol\\n/// @notice Abstract base oracle for Curve LP token price feeds.\\nabstract contract CurveBaseOracle is UsingBaseOracle, ICurveOracle, Ownable {\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      PUBLIC STORAGE \\n    //////////////////////////////////////////////////////////////////////////*/\\n    \\n    /// Address provider for Curve-related contracts.\\n    ICurveAddressProvider public immutable addressProvider;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS \\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// Emitted when a Curve LP token is registered with its associated pool and underlying tokens.\\n    event CurveLpRegistered(\\n        address crvLp,\\n        address pool,\\n        address[] underlyingTokens\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n    \\n    /// @notice Constructor initializes the CurveBaseOracle with the provided parameters.\\n    /// @param base_ The address of the base oracle.\\n    /// @param addressProvider_ The address of the curve address provider.\\n    constructor(\\n        IBaseOracle base_,\\n        ICurveAddressProvider addressProvider_\\n    ) UsingBaseOracle(base_) {\\n        addressProvider = addressProvider_;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Fetches Curve pool information for a given Curve LP token address.\\n    /// @param crvLp Curve LP token address.\\n    /// @return pool The address of the associated Curve pool.\\n    /// @return ulTokens Underlying tokens of the Curve pool.\\n    /// @return virtualPrice Virtual price of the Curve pool.\\n    function _getPoolInfo(\\n        address crvLp\\n    )\\n        internal\\n        returns (address pool, address[] memory ulTokens, uint256 virtualPrice)\\n    {\\n        /// 1. Attempt retrieval from main Curve registry.\\n        address registry = addressProvider.get_registry();\\n        pool = ICurveRegistry(registry).get_pool_from_lp_token(crvLp);\\n        if (pool != address(0)) {\\n            (uint256 n, ) = ICurveRegistry(registry).get_n_coins(pool);\\n            address[8] memory coins = ICurveRegistry(registry).get_coins(pool);\\n            ulTokens = new address[](n);\\n            for (uint256 i = 0; i < n; i++) {\\n                ulTokens[i] = coins[i];\\n            }\\n            virtualPrice = ICurveRegistry(registry)\\n                .get_virtual_price_from_lp_token(crvLp);\\n            return (pool, ulTokens, virtualPrice);\\n        }\\n\\n        /// 2. Attempt retrieval from CryptoSwap Curve registry.\\n        registry = addressProvider.get_address(5);\\n        pool = ICurveCryptoSwapRegistry(registry).get_pool_from_lp_token(crvLp);\\n        if (pool != address(0)) {\\n            uint256 n = ICurveCryptoSwapRegistry(registry).get_n_coins(pool);\\n            address[8] memory coins = ICurveCryptoSwapRegistry(registry)\\n                .get_coins(pool);\\n            ulTokens = new address[](n);\\n            for (uint256 i = 0; i < n; i++) {\\n                ulTokens[i] = coins[i];\\n            }\\n            virtualPrice = ICurveCryptoSwapRegistry(registry)\\n                .get_virtual_price_from_lp_token(crvLp);\\n            return (pool, ulTokens, virtualPrice);\\n        }\\n\\n        /// 3. Attempt retrieval from Meta Curve registry.\\n        registry = addressProvider.get_address(7);\\n        pool = ICurveCryptoSwapRegistry(registry).get_pool_from_lp_token(crvLp);\\n        if (pool != address(0)) {\\n            uint256 n = ICurveCryptoSwapRegistry(registry).get_n_coins(pool);\\n            address[8] memory coins = ICurveCryptoSwapRegistry(registry)\\n                .get_coins(pool);\\n            ulTokens = new address[](n);\\n            for (uint256 i = 0; i < n; i++) {\\n                ulTokens[i] = coins[i];\\n            }\\n            virtualPrice = ICurveCryptoSwapRegistry(registry)\\n                .get_virtual_price_from_lp_token(crvLp);\\n            return (pool, ulTokens, virtualPrice);\\n        }\\n\\n        revert BlueBerryErrors.ORACLE_NOT_SUPPORT_LP(crvLp);\\n    }\\n\\n    /// @dev Internal function to check for reentrancy issues with Curve pools.\\n    /// @param _pool The address of the Curve pool to check.\\n    /// @param _numTokens The number of tokens in the pool.\\n    function _checkReentrant(address _pool, uint256 _numTokens) internal virtual;\\n\\n    /// @notice Fetches Curve pool details for the provided Curve LP token.\\n    /// @param crvLp The Curve LP token address.\\n    /// @return pool The Curve pool address.\\n    /// @return coins The list of underlying tokens in the pool.\\n    /// @return virtualPrice The virtual price of the Curve pool.\\n    function getPoolInfo(\\n        address crvLp\\n    )\\n        external\\n        returns (address pool, address[] memory coins, uint256 virtualPrice)\\n    {\\n        return _getPoolInfo(crvLp);\\n    }\\n\\n    /// @notice Fetches the USD value of a given Curve LP token.\\n    /// @dev To be implemented in inheriting contracts.\\n    /// @param crvLp The Curve LP token address.\\n    /// @return The USD value of the Curve LP token.\\n    function getPrice(address crvLp) external virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaa0c55879a3afe03c3c4b6b578e8b16c6fb2c4e5d9a00d358beb1d0cb1bd610\",\"license\":\"MIT\"},\"contracts/oracle/CurveStableOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./CurveBaseOracle.sol\\\";\\n\\n/// @title Curve Stable Oracle\\n/// @author BlueberryProtocol\\n/// @notice Oracle contract that provides price feeds for Curve stable LP tokens.\\ncontract CurveStableOracle is CurveBaseOracle {\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n    \\n    /// @notice Constructor initializes the CurveBaseOracle with the provided parameters.\\n    /// @param base_ The address of the base oracle.\\n    /// @param addressProvider_ The address of the curve address provider.\\n    constructor(\\n        IBaseOracle base_,\\n        ICurveAddressProvider addressProvider_\\n    ) CurveBaseOracle(base_, addressProvider_) {\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Overrides the base oracle's reentrancy check based on the number of tokens.\\n    /// @param _pool The address of the pool to check.\\n    /// @param _numTokens The number of tokens in the pool.\\n    function _checkReentrant(address _pool, uint256 _numTokens) internal override {\\n        ICurvePool pool = ICurvePool(_pool);\\n        if (_numTokens == 2) {\\n            uint256[2] memory amounts;\\n            pool.remove_liquidity(0, amounts);\\n        } else if (_numTokens == 3) {\\n            uint256[3] memory amounts;\\n            pool.remove_liquidity(0, amounts);\\n        } else if (_numTokens == 4) {\\n            uint256[4] memory amounts;\\n            pool.remove_liquidity(0, amounts);\\n        }\\n    }\\n\\n    /// @notice Returns the USD value of the specified Curve LP token with 18 decimals of precision.\\n    /// @dev Uses the minimum underlying token price for calculation.\\n    /// @param crvLp The ERC-20 Curve LP token address.\\n    /// @return The USD value of the Curve LP token.\\n    function getPrice(address crvLp) external override returns (uint256) {\\n        (address pool, address[] memory tokens, uint256 virtualPrice) = _getPoolInfo(crvLp);\\n        _checkReentrant(pool, tokens.length);\\n\\n        uint256 minPrice = type(uint256).max;\\n        for (uint256 idx = 0; idx < tokens.length; idx++) {\\n            uint256 tokenPrice = base.getPrice(tokens[idx]);\\n            if (tokenPrice < minPrice) minPrice = tokenPrice;\\n        }\\n\\n        // Calculate LP token price using the minimum underlying token price\\n        return (minPrice * virtualPrice) / 1e18;\\n    }\\n\\n    /// @notice Fallback function to receive Ether.\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xcaa594e4de0e64595ba7907856d2b046dab0c76c8e03b0051cc756665fdbcfcf\",\"license\":\"MIT\"},\"contracts/oracle/UsingBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IBaseOracle.sol\\\";\\n\\n/// @title UsingBaseOracle\\n/// @dev This contract serves as a base for other contracts that need access \\n/// to an external oracle service. It provides an immutable reference to a \\n/// specified oracle source.\\ncontract UsingBaseOracle {\\n    IBaseOracle public immutable base; // Base oracle source\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n    \\n    /// @notice Constructs a new instance of the contract.\\n    /// @dev Initializes the contract with a given oracle source.\\n    /// @param _base The address of the oracle to be used as a data source.\\n    constructor(IBaseOracle _base) {\\n        base = _base;\\n    }\\n}\\n\",\"keccak256\":\"0xa7539940cbac33c9a82d997a6a7e3ed05cd78ac21548bc653a5eb9da9931448d\",\"license\":\"MIT\"},\"contracts/utils/BlueBerryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\n/// title BlueberryErrors\\n/// @notice containing all errors used in Blueberry protocol\\npragma solidity 0.8.16;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                COMMON ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an action involves zero amount of tokens.\\nerror ZERO_AMOUNT();\\n\\n/// @notice Thrown when the address provided is the zero address.\\nerror ZERO_ADDRESS();\\n\\n/// @notice Thrown when the lengths of input arrays do not match.\\nerror INPUT_ARRAY_MISMATCH();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                ORACLE ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the delay time exceeds allowed limits.\\nerror TOO_LONG_DELAY(uint256 delayTime);\\n\\n/// @notice Thrown when there's no maximum delay set for a token.\\nerror NO_MAX_DELAY(address token);\\n\\n/// @notice Thrown when the price information for a token is outdated.\\nerror PRICE_OUTDATED(address token);\\n\\n/// @notice Thrown when there's no symbol mapping for the token.\\nerror NO_SYM_MAPPING(address token);\\n\\n/// @notice Thrown when the price obtained is negative.\\nerror PRICE_NEGATIVE(address token);\\n\\n/// @notice Thrown when the sequencer is offline\\nerror SEQUENCER_DOWN(address sequencer);\\n\\n/// @notice Thrown when the grace period for a sequencer is not over yet.\\nerror SEQUENCER_GRACE_PERIOD_NOT_OVER(address sequencer);\\n\\n/// @notice Thrown when the price deviation exceeds allowed limits.\\nerror OUT_OF_DEVIATION_CAP(uint256 deviation);\\n\\n/// @notice Thrown when the number of sources exceeds the allowed length.\\nerror EXCEED_SOURCE_LEN(uint256 length);\\n\\n/// @notice Thrown when no primary source is available for the token.\\nerror NO_PRIMARY_SOURCE(address token);\\n\\n/// @notice Thrown when no valid price source is available for the token.\\nerror NO_VALID_SOURCE(address token);\\n\\n/// @notice Thrown when the deviation value exceeds the threshold.\\nerror EXCEED_DEVIATION();\\n\\n/// @notice Thrown when the mean price is below the acceptable threshold.\\nerror TOO_LOW_MEAN(uint256 mean);\\n\\n/// @notice Thrown when no mean price is set for the token.\\nerror NO_MEAN(address token);\\n\\n/// @notice Thrown when no stable pool exists for the token.\\nerror NO_STABLEPOOL(address token);\\n\\n/// @notice Thrown when the price fetch process fails for a token.\\nerror PRICE_FAILED(address token);\\n\\n/// @notice Thrown when the liquidation threshold is set too high.\\nerror LIQ_THRESHOLD_TOO_HIGH(uint256 threshold);\\n\\n/// @notice Thrown when the liquidation threshold is set too low.\\nerror LIQ_THRESHOLD_TOO_LOW(uint256 threshold);\\n\\n/// @notice Thrown when the oracle doesn't support a specific token.\\nerror ORACLE_NOT_SUPPORT(address token);\\n\\n/// @notice Thrown when the oracle doesn't support a specific LP pair token.\\nerror ORACLE_NOT_SUPPORT_LP(address lp);\\n\\n/// @notice Thrown when the oracle doesn't support a specific wToken.\\nerror ORACLE_NOT_SUPPORT_WTOKEN(address wToken);\\n\\n/// @notice Thrown when there is no route to fetch data for the oracle\\nerror NO_ORACLE_ROUTE(address token);\\n\\n/// @notice Thrown when a value is out of an acceptable range.\\nerror VALUE_OUT_OF_RANGE();\\n\\n/// @notice Thrown when specified limits are incorrect.\\nerror INCORRECT_LIMITS();\\n\\n/// @notice Thrown when Curve LP is already registered.\\nerror CRV_LP_ALREADY_REGISTERED(address lp);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            GENERAL SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the caller isn't recognized as a bank.\\nerror NOT_BANK(address caller);\\n\\n/// @notice Thrown when refunding ETH encounters an issue.\\nerror REFUND_ETH_FAILED(uint256 balance);\\n\\n/// @notice Thrown when a transaction isn't initiated by WETH.\\nerror NOT_FROM_WETH(address from);\\n\\n/// @notice Thrown when the liquidity pool isn't whitelisted\\nerror LP_NOT_WHITELISTED(address lp);\\n\\n/// @notice Thrown when the collateral doesn't exist for a strategy.\\nerror COLLATERAL_NOT_EXIST(uint256 strategyId, address colToken);\\n\\n/// @notice Thrown when the strategy ID doesn't correspond to an existing strategy.\\nerror STRATEGY_NOT_EXIST(address spell, uint256 strategyId);\\n\\n/// @notice Thrown when the position size exceeds maximum limits.\\nerror EXCEED_MAX_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is below minimum requirements.\\nerror EXCEED_MIN_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the loan-to-value ratio exceeds allowed maximum.\\nerror EXCEED_MAX_LTV();\\n\\n/// @notice Thrown when the strategy ID provided is incorrect.\\nerror INCORRECT_STRATEGY_ID(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is invalid.\\nerror INVALID_POS_SIZE();\\n\\n/// @notice Thrown when an incorrect liquidity pool token is provided.\\nerror INCORRECT_LP(address lpToken);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror INCORRECT_PID(uint256 pid);\\n\\n/// @notice Thrown when an incorrect collateral token is provided.\\nerror INCORRECT_COLTOKEN(address colToken);\\n\\n/// @notice Thrown when an incorrect underlying token is provided.\\nerror INCORRECT_UNDERLYING(address uToken);\\nerror INCORRECT_DEBT(address debtToken);\\nerror NOT_FROM_UNIV3(address sender);\\nerror SWAP_FAILED(address swapToken);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CURVE SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when no gauge is present.\\nerror NO_GAUGE();\\n\\n/// @notice Thrown when a gauge already exists for the provided pid and gid.\\nerror EXISTING_GAUGE(uint256 pid, uint256 gid);\\n\\n/// @notice Thrown when no Curve pool is found for the given pid.\\nerror NO_CURVE_POOL(uint256 pid);\\n\\n/// @notice Thrown when no LP has been registered.\\nerror NO_LP_REGISTERED(address lp);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                VAULT ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when borrowing from the vault fails.\\nerror BORROW_FAILED(uint256 amount);\\n\\n/// @notice Thrown when repaying to the vault fails.\\nerror REPAY_FAILED(uint256 amount);\\n\\n/// @notice Thrown when lending to the vault fails.\\nerror LEND_FAILED(uint256 amount);\\n\\n/// @notice Thrown when redeeming from the vault fails.\\nerror REDEEM_FAILED(uint256 amount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                WRAPPER ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an invalid token ID is provided.\\nerror INVALID_TOKEN_ID(uint256 tokenId);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror BAD_PID(uint256 pid);\\n\\n/// @notice Thrown when a mismatch in reward per share is detected.\\nerror BAD_REWARD_PER_SHARE(uint256 rewardPerShare);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                BANK ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a function is called without a required execution flag.\\nerror NOT_UNDER_EXECUTION();\\n\\n/// @notice Thrown when a transaction isn't initiated \\n/// by an externally owned account (EOA).\\nerror NOT_EOA(address from);\\n\\n/// @notice Thrown when a transaction isn't initiated by the expected spell.\\nerror NOT_FROM_SPELL(address from);\\n\\n/// @notice Thrown when the sender is not the owner of a given position ID.\\nerror NOT_FROM_OWNER(uint256 positionId, address sender);\\n\\n\\n/// @notice Thrown when a spell address isn't whitelisted.\\nerror SPELL_NOT_WHITELISTED(address spell);\\n\\n/// @notice Thrown when a token isn't whitelisted.\\nerror TOKEN_NOT_WHITELISTED(address token);\\n\\n/// @notice Thrown when a bank isn't listed for a given token.\\nerror BANK_NOT_LISTED(address token);\\n\\n/// @notice Thrown when a bank is already listed for a given token.\\nerror BANK_ALREADY_LISTED();\\n\\n/// @notice Thrown when the bank limit is reached.\\nerror BANK_LIMIT();\\n\\n/// @notice Thrown when the BTOKEN is already added.\\nerror BTOKEN_ALREADY_ADDED();\\n\\n/// @notice Thrown when the lending action isn't allowed.\\nerror LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when the borrowing action isn't allowed.\\nerror BORROW_NOT_ALLOWED();\\n\\n/// @notice Thrown when the repaying action isn't allowed.\\nerror REPAY_NOT_ALLOWED();\\n\\n/// @notice Thrown when the redeeming action isn't allowed.\\nerror WITHDRAW_LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when certain actions are locked.\\nerror LOCKED();\\n\\n/// @notice Thrown when an action isn't executed.\\nerror NOT_IN_EXEC();\\n\\n/// @notice Thrown when the repayment allowance hasn't been warmed up.\\nerror REPAY_ALLOW_NOT_WARMED_UP();\\n\\n/// @notice Thrown when a different collateral type exists.\\nerror DIFF_COL_EXIST(address collToken);\\n\\n/// @notice Thrown when a position is not eligible for liquidation.\\nerror NOT_LIQUIDATABLE(uint256 positionId);\\n\\n/// @notice Thrown when a position is flagged as bad or invalid.\\nerror BAD_POSITION(uint256 posId);\\n\\n/// @notice Thrown when collateral for a specific position is flagged as bad or invalid.\\nerror BAD_COLLATERAL(uint256 positionId);\\n\\n/// @notice Thrown when there's insufficient collateral for an operation.\\nerror INSUFFICIENT_COLLATERAL();\\n\\n/// @notice Thrown when an attempted repayment exceeds the actual debt.\\nerror REPAY_EXCEEDS_DEBT(uint256 repay, uint256 debt);\\n\\n/// @notice Thrown when an invalid utility token is provided.\\nerror INVALID_UTOKEN(address uToken);\\n\\n/// @notice Thrown when a borrow operation results in zero shares.\\nerror BORROW_ZERO_SHARE(uint256 borrowAmount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CONFIGURATION ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when slippage exceeds the allowed limit.\\nerror EXCEED_SLIPPAGE(uint256 ratio);\\n\\n/// @notice Thrown when a certain ratio is too high for an operation.\\nerror RATIO_TOO_HIGH(uint256 ratio);\\n\\n/// @notice Thrown when an invalid fee distribution is detected.\\nerror INVALID_FEE_DISTRIBUTION();\\n\\n/// @notice Thrown when no treasury is set for fee distribution.\\nerror NO_TREASURY_SET();\\n\\n/// @notice Thrown when a fee window has already started.\\nerror FEE_WINDOW_ALREADY_STARTED();\\n\\n/// @notice Thrown when a fee window duration is too long.\\nerror FEE_WINDOW_TOO_LONG(uint256 windowTime);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                UTILITY ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a cast operation fails.\\nerror CAST();\\n\\n/// @notice Thrown when an operation has surpassed its deadline.\\nerror EXPIRED(uint256 deadline);\\n\",\"keccak256\":\"0x8e02bff5533d9c0f73ccad89c6b292c75db6e36baabf918004ee078ffb9bbdbe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161121638038061121683398101604081905261002f916100c4565b6001600160a01b03821660805281816100473361005c565b6001600160a01b031660a052506100fe915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100c157600080fd5b50565b600080604083850312156100d757600080fd5b82516100e2816100ac565b60208401519092506100f3816100ac565b809150509250929050565b60805160a0516110d861013e6000396000818160ca015281816103a4015281816106b2015261093e015260008181610144015261020b01526110d86000f3fe6080604052600436106100745760003560e01c80635001f3b51161004e5780635001f3b514610132578063715018a6146101665780638da5cb5b1461017d578063f2fde38b1461019b57600080fd5b806306bfa938146100805780632954018c146100b857806341976e091461010457600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610ded565b6101bb565b6040516100af93929190610e11565b60405180910390f35b3480156100c457600080fd5b506100ec7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100af565b34801561011057600080fd5b5061012461011f366004610ded565b6101d8565b6040519081526020016100af565b34801561013e57600080fd5b506100ec7f000000000000000000000000000000000000000000000000000000000000000081565b34801561017257600080fd5b5061017b610309565b005b34801561018957600080fd5b506000546001600160a01b03166100ec565b3480156101a757600080fd5b5061017b6101b6366004610ded565b61031d565b6000606060006101ca8461039b565b9250925092505b9193909250565b6000806000806101e78561039b565b9250925092506101f8838351610bd8565b60001960005b83518110156102e15760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341976e0986848151811061024a5761024a610e76565b60200260200101516040518263ffffffff1660e01b815260040161027d91906001600160a01b0391909116815260200190565b6020604051808303816000875af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c09190610e8c565b9050828110156102ce578092505b50806102d981610ebb565b9150506101fe565b50670de0b6b3a76400006102f58383610ed4565b6102ff9190610ef3565b9695505050505050565b610311610cd4565b61031b6000610d2e565b565b610325610cd4565b6001600160a01b03811661038f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61039881610d2e565b50565b600060606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a262904b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104249190610f25565b60405163bdf475c360e01b81526001600160a01b0387811660048301529192509082169063bdf475c390602401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610f25565b93506001600160a01b0384161561069c5760405163940494f160e01b81526001600160a01b0385811660048301526000919083169063940494f1906024016040805180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105109190610f42565b50604051639ac90d3d60e01b81526001600160a01b038781166004830152919250600091841690639ac90d3d9060240161010060405180830381865afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190610f7c565b90508167ffffffffffffffff81111561059d5761059d610f66565b6040519080825280602002602001820160405280156105c6578160200160208202803683370190505b50945060005b82811015610627578181600881106105e6576105e6610e76565b60200201518682815181106105fd576105fd610e76565b6001600160a01b03909216602092830291909101909101528061061f81610ebb565b9150506105cc565b506040516362db83a560e11b81526001600160a01b03888116600483015284169063c5b7074a90602401602060405180830381865afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190610e8c565b93505050506101d1565b60405163124fd3dd60e21b8152600560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063493f4f7490602401602060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190610f25565b60405163bdf475c360e01b81526001600160a01b0387811660048301529192509082169063bdf475c390602401602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190610f25565b93506001600160a01b038416156109285760405163940494f160e01b81526001600160a01b0385811660048301526000919083169063940494f190602401602060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190610e8c565b604051639ac90d3d60e01b81526001600160a01b038781166004830152919250600091841690639ac90d3d9060240161010060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190610f7c565b90508167ffffffffffffffff81111561089e5761089e610f66565b6040519080825280602002602001820160405280156108c7578160200160208202803683370190505b50945060005b82811015610627578181600881106108e7576108e7610e76565b60200201518682815181106108fe576108fe610e76565b6001600160a01b03909216602092830291909101909101528061092081610ebb565b9150506108cd565b60405163124fd3dd60e21b8152600760048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063493f4f7490602401602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190610f25565b60405163bdf475c360e01b81526001600160a01b0387811660048301529192509082169063bdf475c390602401602060405180830381865afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190610f25565b93506001600160a01b03841615610bb45760405163940494f160e01b81526001600160a01b0385811660048301526000919083169063940494f190602401602060405180830381865afa158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e9190610e8c565b604051639ac90d3d60e01b81526001600160a01b038781166004830152919250600091841690639ac90d3d9060240161010060405180830381865afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190610f7c565b90508167ffffffffffffffff811115610b2a57610b2a610f66565b604051908082528060200260200182016040528015610b53578160200160208202803683370190505b50945060005b8281101561062757818160088110610b7357610b73610e76565b6020020151868281518110610b8a57610b8a610e76565b6001600160a01b039092166020928302919091019091015280610bac81610ebb565b915050610b59565b60405163385fd8c560e11b81526001600160a01b0386166004820152602401610386565b816002829003610c5157610bea610d7e565b6040516316cd8e2760e21b81526001600160a01b03831690635b36389c90610c19906000908590600401611010565b600060405180830381600087803b158015610c3357600080fd5b505af1158015610c47573d6000803e3d6000fd5b5050505050505050565b81600303610c9057610c61610d9c565b60405163ecb586a560e01b81526001600160a01b0383169063ecb586a590610c19906000908590600401611048565b81600403610ccf57610ca0610dba565b604051637d49d87560e01b81526001600160a01b03831690637d49d87590610c19906000908590600401611075565b505050565b6000546001600160a01b0316331461031b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610386565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6001600160a01b038116811461039857600080fd5b600060208284031215610dff57600080fd5b8135610e0a81610dd8565b9392505050565b6001600160a01b038481168252606060208084018290528551918401829052600092868201929091906080860190855b81811015610e5f578551851683529483019491830191600101610e41565b505080945050505050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610e9e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ecd57610ecd610ea5565b5060010190565b6000816000190483118215151615610eee57610eee610ea5565b500290565b600082610f1057634e487b7160e01b600052601260045260246000fd5b500490565b8051610f2081610dd8565b919050565b600060208284031215610f3757600080fd5b8151610e0a81610dd8565b60008060408385031215610f5557600080fd5b505080516020909101519092909150565b634e487b7160e01b600052604160045260246000fd5b6000610100808385031215610f9057600080fd5b83601f840112610f9f57600080fd5b60405181810181811067ffffffffffffffff82111715610fcf57634e487b7160e01b600052604160045260246000fd5b604052908301908085831115610fe457600080fd5b845b8381101561100557610ff781610f15565b825260209182019101610fe6565b509095945050505050565b8281526060810160208083018460005b600281101561103d57815183529183019190830190600101611020565b505050509392505050565b8281526080810160208083018460005b600381101561103d57815183529183019190830190600101611058565b82815260a0810160208083018460005b600481101561103d5781518352918301919083019060010161108556fea264697066735822122089ac7ea05ecd9645c514275c9646f54e5f8cd6da68fc6b8f944363c7b531524564736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80635001f3b51161004e5780635001f3b514610132578063715018a6146101665780638da5cb5b1461017d578063f2fde38b1461019b57600080fd5b806306bfa938146100805780632954018c146100b857806341976e091461010457600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610ded565b6101bb565b6040516100af93929190610e11565b60405180910390f35b3480156100c457600080fd5b506100ec7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100af565b34801561011057600080fd5b5061012461011f366004610ded565b6101d8565b6040519081526020016100af565b34801561013e57600080fd5b506100ec7f000000000000000000000000000000000000000000000000000000000000000081565b34801561017257600080fd5b5061017b610309565b005b34801561018957600080fd5b506000546001600160a01b03166100ec565b3480156101a757600080fd5b5061017b6101b6366004610ded565b61031d565b6000606060006101ca8461039b565b9250925092505b9193909250565b6000806000806101e78561039b565b9250925092506101f8838351610bd8565b60001960005b83518110156102e15760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341976e0986848151811061024a5761024a610e76565b60200260200101516040518263ffffffff1660e01b815260040161027d91906001600160a01b0391909116815260200190565b6020604051808303816000875af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c09190610e8c565b9050828110156102ce578092505b50806102d981610ebb565b9150506101fe565b50670de0b6b3a76400006102f58383610ed4565b6102ff9190610ef3565b9695505050505050565b610311610cd4565b61031b6000610d2e565b565b610325610cd4565b6001600160a01b03811661038f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61039881610d2e565b50565b600060606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a262904b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104249190610f25565b60405163bdf475c360e01b81526001600160a01b0387811660048301529192509082169063bdf475c390602401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610f25565b93506001600160a01b0384161561069c5760405163940494f160e01b81526001600160a01b0385811660048301526000919083169063940494f1906024016040805180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105109190610f42565b50604051639ac90d3d60e01b81526001600160a01b038781166004830152919250600091841690639ac90d3d9060240161010060405180830381865afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190610f7c565b90508167ffffffffffffffff81111561059d5761059d610f66565b6040519080825280602002602001820160405280156105c6578160200160208202803683370190505b50945060005b82811015610627578181600881106105e6576105e6610e76565b60200201518682815181106105fd576105fd610e76565b6001600160a01b03909216602092830291909101909101528061061f81610ebb565b9150506105cc565b506040516362db83a560e11b81526001600160a01b03888116600483015284169063c5b7074a90602401602060405180830381865afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190610e8c565b93505050506101d1565b60405163124fd3dd60e21b8152600560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063493f4f7490602401602060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190610f25565b60405163bdf475c360e01b81526001600160a01b0387811660048301529192509082169063bdf475c390602401602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190610f25565b93506001600160a01b038416156109285760405163940494f160e01b81526001600160a01b0385811660048301526000919083169063940494f190602401602060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190610e8c565b604051639ac90d3d60e01b81526001600160a01b038781166004830152919250600091841690639ac90d3d9060240161010060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190610f7c565b90508167ffffffffffffffff81111561089e5761089e610f66565b6040519080825280602002602001820160405280156108c7578160200160208202803683370190505b50945060005b82811015610627578181600881106108e7576108e7610e76565b60200201518682815181106108fe576108fe610e76565b6001600160a01b03909216602092830291909101909101528061092081610ebb565b9150506108cd565b60405163124fd3dd60e21b8152600760048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063493f4f7490602401602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190610f25565b60405163bdf475c360e01b81526001600160a01b0387811660048301529192509082169063bdf475c390602401602060405180830381865afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190610f25565b93506001600160a01b03841615610bb45760405163940494f160e01b81526001600160a01b0385811660048301526000919083169063940494f190602401602060405180830381865afa158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e9190610e8c565b604051639ac90d3d60e01b81526001600160a01b038781166004830152919250600091841690639ac90d3d9060240161010060405180830381865afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190610f7c565b90508167ffffffffffffffff811115610b2a57610b2a610f66565b604051908082528060200260200182016040528015610b53578160200160208202803683370190505b50945060005b8281101561062757818160088110610b7357610b73610e76565b6020020151868281518110610b8a57610b8a610e76565b6001600160a01b039092166020928302919091019091015280610bac81610ebb565b915050610b59565b60405163385fd8c560e11b81526001600160a01b0386166004820152602401610386565b816002829003610c5157610bea610d7e565b6040516316cd8e2760e21b81526001600160a01b03831690635b36389c90610c19906000908590600401611010565b600060405180830381600087803b158015610c3357600080fd5b505af1158015610c47573d6000803e3d6000fd5b5050505050505050565b81600303610c9057610c61610d9c565b60405163ecb586a560e01b81526001600160a01b0383169063ecb586a590610c19906000908590600401611048565b81600403610ccf57610ca0610dba565b604051637d49d87560e01b81526001600160a01b03831690637d49d87590610c19906000908590600401611075565b505050565b6000546001600160a01b0316331461031b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610386565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6001600160a01b038116811461039857600080fd5b600060208284031215610dff57600080fd5b8135610e0a81610dd8565b9392505050565b6001600160a01b038481168252606060208084018290528551918401829052600092868201929091906080860190855b81811015610e5f578551851683529483019491830191600101610e41565b505080945050505050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610e9e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ecd57610ecd610ea5565b5060010190565b6000816000190483118215151615610eee57610eee610ea5565b500290565b600082610f1057634e487b7160e01b600052601260045260246000fd5b500490565b8051610f2081610dd8565b919050565b600060208284031215610f3757600080fd5b8151610e0a81610dd8565b60008060408385031215610f5557600080fd5b505080516020909101519092909150565b634e487b7160e01b600052604160045260246000fd5b6000610100808385031215610f9057600080fd5b83601f840112610f9f57600080fd5b60405181810181811067ffffffffffffffff82111715610fcf57634e487b7160e01b600052604160045260246000fd5b604052908301908085831115610fe457600080fd5b845b8381101561100557610ff781610f15565b825260209182019101610fe6565b509095945050505050565b8281526060810160208083018460005b600281101561103d57815183529183019190830190600101611020565b505050509392505050565b8281526080810160208083018460005b600381101561103d57815183529183019190830190600101611058565b82815260a0810160208083018460005b600481101561103d5781518352918301919083019060010161108556fea264697066735822122089ac7ea05ecd9645c514275c9646f54e5f8cd6da68fc6b8f944363c7b531524564736f6c63430008100033",
  "devdoc": {
    "author": "BlueberryProtocol",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "addressProvider_": "The address of the curve address provider.",
          "base_": "The address of the base oracle."
        }
      },
      "getPoolInfo(address)": {
        "params": {
          "crvLp": "The Curve LP token address."
        },
        "returns": {
          "coins": "The list of underlying tokens in the pool.",
          "pool": "The Curve pool address.",
          "virtualPrice": "The virtual price of the Curve pool."
        }
      },
      "getPrice(address)": {
        "details": "Uses the minimum underlying token price for calculation.",
        "params": {
          "crvLp": "The ERC-20 Curve LP token address."
        },
        "returns": {
          "_0": "The USD value of the Curve LP token."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Curve Stable Oracle",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ORACLE_NOT_SUPPORT_LP(address)": [
        {
          "notice": "Thrown when the oracle doesn't support a specific LP pair token."
        }
      ]
    },
    "events": {
      "CurveLpRegistered(address,address,address[])": {
        "notice": "Emitted when a Curve LP token is registered with its associated pool and underlying tokens."
      }
    },
    "kind": "user",
    "methods": {
      "addressProvider()": {
        "notice": "Address provider for Curve-related contracts."
      },
      "constructor": {
        "notice": "Constructor initializes the CurveBaseOracle with the provided parameters."
      },
      "getPoolInfo(address)": {
        "notice": "Fetches Curve pool details for the provided Curve LP token."
      },
      "getPrice(address)": {
        "notice": "Returns the USD value of the specified Curve LP token with 18 decimals of precision."
      }
    },
    "notice": "Oracle contract that provides price feeds for Curve stable LP tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3374,
        "contract": "contracts/oracle/CurveStableOracle.sol:CurveStableOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}