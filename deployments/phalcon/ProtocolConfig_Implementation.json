{
  "address": "0x7221519F3C5374a61E882a917780a74E29e1E777",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FEE_WINDOW_ALREADY_STARTED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowTime",
          "type": "uint256"
        }
      ],
      "name": "FEE_WINDOW_TOO_LONG",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_FEE_DISTRIBUTION",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "RATIO_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blbIchiVaultFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blbStabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blbStablePoolFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blbUsdcIchiVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "contract IFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "setBlbStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "setBlbUsdcIchiVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositFee_",
          "type": "uint256"
        }
      ],
      "name": "setDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasuryFeeRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blbStablePoolFeeRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blbIchiVaultFeeRate_",
          "type": "uint256"
        }
      ],
      "name": "setFeeDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeManager_",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardFee_",
          "type": "uint256"
        }
      ],
      "name": "setRewardFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawFee_",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawVaultFeeWindow_",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawVaultFeeWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVaultWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawVaultFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawVaultFeeWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawVaultFeeWindowStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa095b48a37f056a03eef675eece88535e5c18139bc8602b50e23035db709a0a2",
  "receipt": {
    "to": null,
    "from": "0x83B801Bc28340d63b560b70036ccaf48E5995ae9",
    "contractAddress": "0x7221519F3C5374a61E882a917780a74E29e1E777",
    "transactionIndex": 0,
    "gasUsed": "642774",
    "logsBloom": "0x
    "blockHash": "0xe390cb8580c07249c4259c7c43df61ec48e94ac684aa33e81806239aa412dc2d",
    "transactionHash": "0xa095b48a37f056a03eef675eece88535e5c18139bc8602b50e23035db709a0a2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17942248,
        "transactionHash": "0xa095b48a37f056a03eef675eece88535e5c18139bc8602b50e23035db709a0a2",
        "address": "0x7221519F3C5374a61E882a917780a74E29e1E777",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xe390cb8580c07249c4259c7c43df61ec48e94ac684aa33e81806239aa412dc2d"
      }
    ],
    "blockNumber": 17942248,
    "cumulativeGasUsed": "642774",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "40a5e959dbaee40ef6eeed84d8383760",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_WINDOW_ALREADY_STARTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowTime\",\"type\":\"uint256\"}],\"name\":\"FEE_WINDOW_TOO_LONG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_FEE_DISTRIBUTION\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"RATIO_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blbIchiVaultFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blbStabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blbStablePoolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blbUsdcIchiVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"setBlbStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setBlbUsdcIchiVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee_\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryFeeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blbStablePoolFeeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blbIchiVaultFeeRate_\",\"type\":\"uint256\"}],\"name\":\"setFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeManager_\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee_\",\"type\":\"uint256\"}],\"name\":\"setRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawFee_\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawVaultFeeWindow_\",\"type\":\"uint256\"}],\"name\":\"setWithdrawVaultFeeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVaultWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVaultFeeWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVaultFeeWindowStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BlueberryProtocol\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"initialize(address)\":{\"details\":\"Initializes the contract with the given treasury address.\",\"params\":{\"treasury_\":\"Address of the treasury.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBlbStabilityPool(address)\":{\"details\":\"Owner priviledged function to set $BLB stability pool address\",\"params\":{\"pool_\":\"Address of the new stability pool\"}},\"setBlbUsdcIchiVault(address)\":{\"details\":\"Owner priviledged function to set $BLB-ICHI vault address\",\"params\":{\"vault_\":\"Address of the new vault\"}},\"setDepositFee(uint256)\":{\"details\":\"Owner priviledged function to set deposit fee\",\"params\":{\"depositFee_\":\"Fee rate applied to the deposit\"}},\"setFeeDistribution(uint256,uint256,uint256)\":{\"details\":\"Owner priviledged function to set the distribution rates for the various fees\",\"params\":{\"blbIchiVaultFeeRate_\":\"Fee rate applied to the $BLB-ICHI vault\",\"blbStablePoolFeeRate_\":\"Fee rate applied to the $BLB liquidity pool\",\"treasuryFeeRate_\":\"Fee rate sent to treasury\"}},\"setFeeManager(address)\":{\"details\":\"Owner priviledged function to set fee manager address\",\"params\":{\"feeManager_\":\"Address of the new fee manager\"}},\"setRewardFee(uint256)\":{\"details\":\"Owner priviledged function to set reward fee\",\"params\":{\"rewardFee_\":\"Fee rate applied to the rewards\"}},\"setTreasuryWallet(address)\":{\"details\":\"Owner priviledged function to set treasury address\",\"params\":{\"treasury_\":\"Address of the new treasury\"}},\"setWithdrawFee(uint256)\":{\"details\":\"Owner priviledged function to set withdraw fee\",\"params\":{\"withdrawFee_\":\"Fee rate applied to the withdraw\"}},\"setWithdrawVaultFeeWindow(uint256)\":{\"details\":\"Owner priviledged function to set withdraw vault fee window duration\",\"params\":{\"withdrawVaultFeeWindow_\":\"Duration of the withdraw vault fee window\"}},\"startVaultWithdrawFee()\":{\"details\":\"Owner priviledged function to start the withdraw vault fee window\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"rewardFee\":{\"return\":\"The reward fee rate.\",\"returns\":{\"_0\":\"The reward fee rate.\"}},\"withdrawFee\":{\"return\":\"The withdrawal fee rate.\",\"returns\":{\"_0\":\"The withdrawal fee rate.\"}}},\"title\":\"ProtocolConfig\",\"version\":1},\"userdoc\":{\"errors\":{\"FEE_WINDOW_ALREADY_STARTED()\":[{\"notice\":\"Thrown when a fee window has already started.\"}],\"FEE_WINDOW_TOO_LONG(uint256)\":[{\"notice\":\"Thrown when a fee window duration is too long.\"}],\"INVALID_FEE_DISTRIBUTION()\":[{\"notice\":\"Thrown when an invalid fee distribution is detected.\"}],\"RATIO_TOO_HIGH(uint256)\":[{\"notice\":\"Thrown when a certain ratio is too high for an operation.\"}],\"ZERO_ADDRESS()\":[{\"notice\":\"Thrown when the address provided is the zero address.\"}]},\"kind\":\"user\",\"methods\":{\"blbIchiVaultFeeRate()\":{\"notice\":\"Portion of the fee for $BLB stablecoin pool.\"},\"blbStabilityPool()\":{\"notice\":\"Address of the $BLB-USDC ICHI vault.\"},\"blbStablePoolFeeRate()\":{\"notice\":\"Portion of the fee sent to the protocol's treasury.\"},\"blbUsdcIchiVault()\":{\"notice\":\"Address of the protocol's treasury.\"},\"depositFee()\":{\"notice\":\"Fee structures related to leveraging activities.\"},\"feeManager()\":{\"notice\":\"Fee manager of the protocol to handle different types of fees.\"},\"rewardFee()\":{\"notice\":\"Retrieve the reward fee rate applied when users claim rewards from the protocol.\"},\"startVaultWithdrawFee()\":{\"notice\":\"This function can only be called once per vault\"},\"treasury()\":{\"notice\":\"Addresses associated with the protocol.\"},\"treasuryFeeRate()\":{\"notice\":\"Fee distribution rates.\"},\"withdrawFee()\":{\"notice\":\"Retrieve the withdrawal fee rate applied when users withdraw from the protocol.\"},\"withdrawVaultFee()\":{\"notice\":\"Fee structures related to vault operations.\"},\"withdrawVaultFeeWindow()\":{\"notice\":\"Fee applied on vault withdrawals.\"},\"withdrawVaultFeeWindowStartTime()\":{\"notice\":\"Time window for which the vault withdrawal fee applies.\"}},\"notice\":\"This contract acts as the central point of all configurable states in the Blueberry Protocol.         It holds references to fee management, various fee types and values,          treasury settings, and other system configurations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolConfig.sol\":\"ProtocolConfig\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/ProtocolConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./utils/BlueBerryConst.sol\\\" as Constants;\\nimport \\\"./utils/BlueBerryErrors.sol\\\" as Errors;\\nimport \\\"./interfaces/IProtocolConfig.sol\\\";\\n\\n\\n/// @title ProtocolConfig\\n/// @author BlueberryProtocol\\n/// @notice This contract acts as the central point of all configurable states in the Blueberry Protocol.\\n///         It holds references to fee management, various fee types and values, \\n///         treasury settings, and other system configurations.\\n\\ncontract ProtocolConfig is OwnableUpgradeable, IProtocolConfig {\\n\\n    /// Fee manager of the protocol to handle different types of fees.\\n    IFeeManager public feeManager;\\n\\n    /// Fee structures related to leveraging activities.\\n    uint256 public depositFee;             // Fee applied on deposits.\\n    uint256 public withdrawFee;            // Fee applied on withdrawals.\\n    uint256 public rewardFee;              // Fee applied on reward claims.\\n\\n    /// Fee structures related to vault operations.\\n    uint256 public withdrawVaultFee;                 /// Fee applied on vault withdrawals.\\n    uint256 public withdrawVaultFeeWindow;           /// Time window for which the vault withdrawal fee applies.\\n    uint256 public withdrawVaultFeeWindowStartTime;  /// Start timestamp of the withdrawal fee window.\\n\\n    /// Fee distribution rates.\\n    uint256 public treasuryFeeRate;        /// Portion of the fee sent to the protocol's treasury.\\n    uint256 public blbStablePoolFeeRate;   /// Portion of the fee for $BLB stablecoin pool.\\n    uint256 public blbIchiVaultFeeRate;    /// Portion of the fee for $BLB-ICHI vault.\\n\\n    /// Addresses associated with the protocol.\\n    address public treasury;               /// Address of the protocol's treasury.\\n    address public blbUsdcIchiVault;       /// Address of the $BLB-USDC ICHI vault.\\n    address public blbStabilityPool;       /// Address of the $BLB stability pool against stablecoins.\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n        \\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Initializes the contract with the given treasury address.\\n    /// @param treasury_ Address of the treasury.\\n    function initialize(address treasury_) external initializer {\\n        __Ownable_init();\\n        if (treasury_ == address(0)) revert Errors.ZERO_ADDRESS();\\n        treasury = treasury_;\\n\\n        /// Set default values for fees and fee rates.\\n        depositFee = 50; // Represents 0.5% (base 10000)\\n        withdrawFee = 50; // Represents 0.5% (base 10000)\\n        rewardFee = 1000; // Represents 10% (base 10000)\\n\\n        treasuryFeeRate = 3000; // 30% of deposit/withdraw fee => 0.15%\\n        blbStablePoolFeeRate = 3500; //  35% of deposit/withdraw fee => 0.175%\\n        blbIchiVaultFeeRate = 3500; //  35% of deposit/withdraw fee => 0.175%\\n\\n        withdrawVaultFee = 100; // Represents 1% (base 10000)\\n        withdrawVaultFeeWindow = 60 days; // Liquidity boot strapping event per vault\\n    }\\n\\n    /// @dev Owner priviledged function to start the withdraw vault fee window\\n    /// @notice This function can only be called once per vault\\n    function startVaultWithdrawFee() external onlyOwner {\\n        if (withdrawVaultFeeWindowStartTime > 0)\\n            revert Errors.FEE_WINDOW_ALREADY_STARTED();\\n        withdrawVaultFeeWindowStartTime = block.timestamp;\\n    }\\n\\n    /// @dev Owner priviledged function to set deposit fee\\n    /// @param depositFee_ Fee rate applied to the deposit\\n    function setDepositFee(uint256 depositFee_) external onlyOwner {\\n        /// Capped at 20%\\n        if (depositFee_ > Constants.MAX_FEE_RATE)\\n            revert Errors.RATIO_TOO_HIGH(depositFee_);\\n        depositFee = depositFee_;\\n    }\\n\\n    /// @dev Owner priviledged function to set withdraw fee\\n    /// @param withdrawFee_ Fee rate applied to the withdraw\\n    function setWithdrawFee(uint256 withdrawFee_) external onlyOwner {\\n        /// Capped at 20%\\n        if (withdrawFee_ > Constants.MAX_FEE_RATE)\\n            revert Errors.RATIO_TOO_HIGH(withdrawFee_);\\n        withdrawFee = withdrawFee_;\\n    }\\n\\n    /// @dev Owner priviledged function to set withdraw vault fee window duration\\n    /// @param withdrawVaultFeeWindow_ Duration of the withdraw vault fee window\\n    function setWithdrawVaultFeeWindow(\\n        uint256 withdrawVaultFeeWindow_\\n    ) external onlyOwner {\\n        /// Capped at 60 days\\n        if (withdrawVaultFeeWindow_ > Constants.MAX_WITHDRAW_VAULT_FEE_WINDOW)\\n            revert Errors.FEE_WINDOW_TOO_LONG(withdrawVaultFeeWindow_);\\n        withdrawVaultFeeWindow = withdrawVaultFeeWindow_;\\n    }\\n\\n    /// @dev Owner priviledged function to set reward fee\\n    /// @param rewardFee_ Fee rate applied to the rewards\\n    function setRewardFee(uint256 rewardFee_) external onlyOwner {\\n        /// Capped at 20%\\n        if (rewardFee_ > Constants.MAX_FEE_RATE)\\n            revert Errors.RATIO_TOO_HIGH(rewardFee_);\\n        rewardFee = rewardFee_;\\n    }\\n\\n    /// @dev Owner priviledged function to set the distribution rates for the various fees\\n    /// @param treasuryFeeRate_ Fee rate sent to treasury\\n    /// @param blbStablePoolFeeRate_ Fee rate applied to the $BLB liquidity pool\\n    /// @param blbIchiVaultFeeRate_ Fee rate applied to the $BLB-ICHI vault\\n    function setFeeDistribution(\\n        uint256 treasuryFeeRate_,\\n        uint256 blbStablePoolFeeRate_,\\n        uint256 blbIchiVaultFeeRate_\\n    ) external onlyOwner {\\n        if (\\n            (treasuryFeeRate_ + blbStablePoolFeeRate_ + blbIchiVaultFeeRate_) !=\\n            Constants.DENOMINATOR\\n        ) revert Errors.INVALID_FEE_DISTRIBUTION();\\n        treasuryFeeRate = treasuryFeeRate_;\\n        blbStablePoolFeeRate = blbStablePoolFeeRate_;\\n        blbIchiVaultFeeRate = blbIchiVaultFeeRate_;\\n    }\\n\\n    /// @dev Owner priviledged function to set treasury address\\n    /// @param treasury_ Address of the new treasury\\n    function setTreasuryWallet(address treasury_) external onlyOwner {\\n        if (treasury_ == address(0)) revert Errors.ZERO_ADDRESS();\\n        treasury = treasury_;\\n    }\\n\\n    /// @dev Owner priviledged function to set fee manager address\\n    /// @param feeManager_ Address of the new fee manager\\n    function setFeeManager(address feeManager_) external onlyOwner {\\n        if (feeManager_ == address(0)) revert Errors.ZERO_ADDRESS();\\n        feeManager = IFeeManager(feeManager_);\\n    }\\n\\n    /// @dev Owner priviledged function to set $BLB-ICHI vault address\\n    /// @param vault_ Address of the new vault\\n    function setBlbUsdcIchiVault(address vault_) external onlyOwner {\\n        if (vault_ == address(0)) revert Errors.ZERO_ADDRESS();\\n        blbUsdcIchiVault = vault_;\\n    }\\n\\n    /// @dev Owner priviledged function to set $BLB stability pool address\\n    /// @param pool_ Address of the new stability pool\\n    function setBlbStabilityPool(address pool_) external onlyOwner {\\n        if (pool_ == address(0)) revert Errors.ZERO_ADDRESS();\\n        blbStabilityPool = pool_;\\n    }\\n}\\n\",\"keccak256\":\"0xe0f8f7fa0df8fe427ae35c88c6f97b32335cae889778c1c9caf6cdfd6cf597b5\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @title IFeeManager\\n/// @notice Interface for FeeManager, the central fee management contract in the Blueberry Protocol.\\n/// @dev FeeManager is responsible for cutting various fees in the protocol and sending them to the treasury.\\ninterface IFeeManager {\\n\\n    /// @notice Calculates and deducts the deposit fee when lending \\n    ///         isolated underlying assets to Blueberry Money Market.\\n    /// @param token The address of the underlying token for which the deposit fee is to be calculated.\\n    /// @param amount The gross deposit amount before fees.\\n    /// @return The net deposit amount after the fee deduction.\\n    function doCutDepositFee(address token, uint256 amount)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Calculates and deducts the withdrawal fee when redeeming \\n    ///         isolated underlying tokens from Blueberry Money Market.\\n    /// @param token The address of the underlying token for which the withdrawal fee is to be calculated.\\n    /// @param amount The gross withdrawal amount before fees.\\n    /// @return The net withdrawal amount after the fee deduction.\\n    function doCutWithdrawFee(address token, uint256 amount)\\n        external\\n        returns (uint256);\\n    /// @notice Calculates and deducts the performance fee from the \\n    /// rewards generated due to the leveraged position.\\n    /// @param token The address of the reward token for which the reward fee is to be calculated.\\n    /// @param amount The gross reward amount before fees.\\n    /// @return The net reward amount after the fee deduction.\\n    function doCutRewardsFee(address token, uint256 amount)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Calculates and deducts the vault withdrawal fee if \\n    ///the withdrawal occurs within the specified fee window in the Blueberry Money Market.\\n    /// @param token The address of the underlying token for which the vault withdrawal fee is to be calculated.\\n    /// @param amount The gross vault withdrawal amount before fees.\\n    /// @return The net vault withdrawal amount after the fee deduction.\\n    function doCutVaultWithdrawFee(address token, uint256 amount)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x68a7615b3fcf804baf81fd179eec9a998f0eb854879d96db6a633a0da608b235\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IFeeManager.sol\\\";\\n\\n/// @title IProtocolConfig\\n/// @notice Interface for the Protocol Configuration, \\n///         encapsulating various fees and related configuration parameters.\\n/// @dev This interface defines methods to retrieve fees \\n///      and related parameters that govern the behavior of the protocol.\\ninterface IProtocolConfig {\\n\\n    /// @notice Retrieve the deposit fee rate applied when users deposit into the protocol.\\n    /// @return The deposit fee rate.\\n    function depositFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal fee rate applied when users withdraw from the protocol.\\n    /// @return The withdrawal fee rate.\\n    function withdrawFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the reward fee rate applied when users claim rewards from the protocol.\\n    /// @return The reward fee rate.\\n    function rewardFee() external view returns (uint256);\\n\\n    /// @notice Get the address where protocol's collected fees are stored and managed.\\n    /// @return The treasury address of the protocol.\\n    function treasury() external view returns (address);\\n\\n    /// @notice Retrieve the fee rate applied for withdrawals from vaults.\\n    /// @return The fee rate for vault withdrawals.\\n    function withdrawVaultFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the window of time where the vault withdrawal fee is applied.\\n    /// @return The window of time where the vault withdrawal fee is applied.\\n    function withdrawVaultFeeWindow() external view returns (uint256);\\n\\n    /// @notice Retrieve the start time of the window of time where the vault withdrawal fee is applied.\\n    /// @return The start time of the window of time where the vault withdrawal fee is applied.\\n    function withdrawVaultFeeWindowStartTime() external view returns (uint256);\\n\\n    /// @notice Get the fee manager that handles fee calculations and distributions.\\n    /// @return An instance of the IFeeManager interface that manages fees within the protocol.\\n    function feeManager() external view returns (IFeeManager);\\n}\\n\",\"keccak256\":\"0xcfc950eee69407755e5ed75e302f601c6d0e76cf06091a4760b8a81d6d7e8328\",\"license\":\"MIT\"},\"contracts/utils/BlueBerryConst.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\n/// title BlueberryConst\\n/// @notice containing all general constants used in Blueberry protocol\\npragma solidity 0.8.16;\\n\\n/// @dev Common denominator for percentage-based calculations.\\nuint256 constant DENOMINATOR = 10000;\\n\\n/// @dev Minimum threshold for liquidity operations, represented as a fraction of the DENOMINATOR.\\nuint256 constant MIN_LIQ_THRESHOLD = 8000; // represent 80%\\n\\n/// @dev Precision factor to maintain price accuracy.\\nuint256 constant PRICE_PRECISION = 1e18;\\n\\n/// @dev Maximum allowed price deviation, represented as a fraction of the DENOMINATOR.\\nuint256 constant MAX_PRICE_DEVIATION = 1000; // represent 10%\\n\\n/// @dev Minimum time interval for specific time-dependent operations.\\nuint32 constant MIN_TIME_GAP = 1 hours;\\n\\n/// @dev Maximum time interval for specific time-dependent operations.\\nuint32 constant MAX_TIME_GAP = 2 days;\\n\\n/// @dev Maximum allowed fee rate, represented as a fraction of the DENOMINATOR.\\nuint256 constant MAX_FEE_RATE = 2000; // represent 20%\\n\\n/// @dev Maximum allowed time for vault withdrawal fee calculations.\\nuint256 constant MAX_WITHDRAW_VAULT_FEE_WINDOW = 60 days;\\n\\n/// @dev Maximum delay permitted for swap operations.\\nuint32 constant MAX_DELAY_ON_SWAP = 2 hours;\\n\\n/// @dev Allowed grace period time for sequencer operations.\\nuint32 constant SEQUENCER_GRACE_PERIOD_TIME = 3600;\\n\\n/// @dev Precision factor for Chainlink price feed values.\\nuint256 constant CHAINLINK_PRICE_FEED_PRECISION = 1e8;\\n\\n/// @dev Warm-up period before a liquidation repayment can be initiated.\\nuint256 constant LIQUIDATION_REPAY_WARM_UP_PERIOD = 4 hours;\\n\",\"keccak256\":\"0xc72e559e5caa385508ef3158993ec99e13e89b4c4b0b40156b34c0fb710e5952\",\"license\":\"MIT\"},\"contracts/utils/BlueBerryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\n/// title BlueberryErrors\\n/// @notice containing all errors used in Blueberry protocol\\npragma solidity 0.8.16;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                COMMON ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an action involves zero amount of tokens.\\nerror ZERO_AMOUNT();\\n\\n/// @notice Thrown when the address provided is the zero address.\\nerror ZERO_ADDRESS();\\n\\n/// @notice Thrown when the lengths of input arrays do not match.\\nerror INPUT_ARRAY_MISMATCH();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                ORACLE ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the delay time exceeds allowed limits.\\nerror TOO_LONG_DELAY(uint256 delayTime);\\n\\n/// @notice Thrown when there's no maximum delay set for a token.\\nerror NO_MAX_DELAY(address token);\\n\\n/// @notice Thrown when the price information for a token is outdated.\\nerror PRICE_OUTDATED(address token);\\n\\n/// @notice Thrown when there's no symbol mapping for the token.\\nerror NO_SYM_MAPPING(address token);\\n\\n/// @notice Thrown when the price obtained is negative.\\nerror PRICE_NEGATIVE(address token);\\n\\n/// @notice Thrown when the sequencer is offline\\nerror SEQUENCER_DOWN(address sequencer);\\n\\n/// @notice Thrown when the grace period for a sequencer is not over yet.\\nerror SEQUENCER_GRACE_PERIOD_NOT_OVER(address sequencer);\\n\\n/// @notice Thrown when the price deviation exceeds allowed limits.\\nerror OUT_OF_DEVIATION_CAP(uint256 deviation);\\n\\n/// @notice Thrown when the number of sources exceeds the allowed length.\\nerror EXCEED_SOURCE_LEN(uint256 length);\\n\\n/// @notice Thrown when no primary source is available for the token.\\nerror NO_PRIMARY_SOURCE(address token);\\n\\n/// @notice Thrown when no valid price source is available for the token.\\nerror NO_VALID_SOURCE(address token);\\n\\n/// @notice Thrown when the deviation value exceeds the threshold.\\nerror EXCEED_DEVIATION();\\n\\n/// @notice Thrown when the mean price is below the acceptable threshold.\\nerror TOO_LOW_MEAN(uint256 mean);\\n\\n/// @notice Thrown when no mean price is set for the token.\\nerror NO_MEAN(address token);\\n\\n/// @notice Thrown when no stable pool exists for the token.\\nerror NO_STABLEPOOL(address token);\\n\\n/// @notice Thrown when the price fetch process fails for a token.\\nerror PRICE_FAILED(address token);\\n\\n/// @notice Thrown when the liquidation threshold is set too high.\\nerror LIQ_THRESHOLD_TOO_HIGH(uint256 threshold);\\n\\n/// @notice Thrown when the liquidation threshold is set too low.\\nerror LIQ_THRESHOLD_TOO_LOW(uint256 threshold);\\n\\n/// @notice Thrown when the oracle doesn't support a specific token.\\nerror ORACLE_NOT_SUPPORT(address token);\\n\\n/// @notice Thrown when the oracle doesn't support a specific LP pair token.\\nerror ORACLE_NOT_SUPPORT_LP(address lp);\\n\\n/// @notice Thrown when the oracle doesn't support a specific wToken.\\nerror ORACLE_NOT_SUPPORT_WTOKEN(address wToken);\\n\\n/// @notice Thrown when there is no route to fetch data for the oracle\\nerror NO_ORACLE_ROUTE(address token);\\n\\n/// @notice Thrown when a value is out of an acceptable range.\\nerror VALUE_OUT_OF_RANGE();\\n\\n/// @notice Thrown when specified limits are incorrect.\\nerror INCORRECT_LIMITS();\\n\\n/// @notice Thrown when Curve LP is already registered.\\nerror CRV_LP_ALREADY_REGISTERED(address lp);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            GENERAL SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the caller isn't recognized as a bank.\\nerror NOT_BANK(address caller);\\n\\n/// @notice Thrown when refunding ETH encounters an issue.\\nerror REFUND_ETH_FAILED(uint256 balance);\\n\\n/// @notice Thrown when a transaction isn't initiated by WETH.\\nerror NOT_FROM_WETH(address from);\\n\\n/// @notice Thrown when the liquidity pool isn't whitelisted\\nerror LP_NOT_WHITELISTED(address lp);\\n\\n/// @notice Thrown when the collateral doesn't exist for a strategy.\\nerror COLLATERAL_NOT_EXIST(uint256 strategyId, address colToken);\\n\\n/// @notice Thrown when the strategy ID doesn't correspond to an existing strategy.\\nerror STRATEGY_NOT_EXIST(address spell, uint256 strategyId);\\n\\n/// @notice Thrown when the position size exceeds maximum limits.\\nerror EXCEED_MAX_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is below minimum requirements.\\nerror EXCEED_MIN_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the loan-to-value ratio exceeds allowed maximum.\\nerror EXCEED_MAX_LTV();\\n\\n/// @notice Thrown when the strategy ID provided is incorrect.\\nerror INCORRECT_STRATEGY_ID(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is invalid.\\nerror INVALID_POS_SIZE();\\n\\n/// @notice Thrown when an incorrect liquidity pool token is provided.\\nerror INCORRECT_LP(address lpToken);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror INCORRECT_PID(uint256 pid);\\n\\n/// @notice Thrown when an incorrect collateral token is provided.\\nerror INCORRECT_COLTOKEN(address colToken);\\n\\n/// @notice Thrown when an incorrect underlying token is provided.\\nerror INCORRECT_UNDERLYING(address uToken);\\nerror INCORRECT_DEBT(address debtToken);\\nerror NOT_FROM_UNIV3(address sender);\\nerror SWAP_FAILED(address swapToken);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CURVE SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when no gauge is present.\\nerror NO_GAUGE();\\n\\n/// @notice Thrown when a gauge already exists for the provided pid and gid.\\nerror EXISTING_GAUGE(uint256 pid, uint256 gid);\\n\\n/// @notice Thrown when no Curve pool is found for the given pid.\\nerror NO_CURVE_POOL(uint256 pid);\\n\\n/// @notice Thrown when no LP has been registered.\\nerror NO_LP_REGISTERED(address lp);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                VAULT ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when borrowing from the vault fails.\\nerror BORROW_FAILED(uint256 amount);\\n\\n/// @notice Thrown when repaying to the vault fails.\\nerror REPAY_FAILED(uint256 amount);\\n\\n/// @notice Thrown when lending to the vault fails.\\nerror LEND_FAILED(uint256 amount);\\n\\n/// @notice Thrown when redeeming from the vault fails.\\nerror REDEEM_FAILED(uint256 amount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                WRAPPER ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an invalid token ID is provided.\\nerror INVALID_TOKEN_ID(uint256 tokenId);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror BAD_PID(uint256 pid);\\n\\n/// @notice Thrown when a mismatch in reward per share is detected.\\nerror BAD_REWARD_PER_SHARE(uint256 rewardPerShare);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                BANK ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a function is called without a required execution flag.\\nerror NOT_UNDER_EXECUTION();\\n\\n/// @notice Thrown when a transaction isn't initiated \\n/// by an externally owned account (EOA).\\nerror NOT_EOA(address from);\\n\\n/// @notice Thrown when a transaction isn't initiated by the expected spell.\\nerror NOT_FROM_SPELL(address from);\\n\\n/// @notice Thrown when the sender is not the owner of a given position ID.\\nerror NOT_FROM_OWNER(uint256 positionId, address sender);\\n\\n\\n/// @notice Thrown when a spell address isn't whitelisted.\\nerror SPELL_NOT_WHITELISTED(address spell);\\n\\n/// @notice Thrown when a token isn't whitelisted.\\nerror TOKEN_NOT_WHITELISTED(address token);\\n\\n/// @notice Thrown when a bank isn't listed for a given token.\\nerror BANK_NOT_LISTED(address token);\\n\\n/// @notice Thrown when a bank is already listed for a given token.\\nerror BANK_ALREADY_LISTED();\\n\\n/// @notice Thrown when the bank limit is reached.\\nerror BANK_LIMIT();\\n\\n/// @notice Thrown when the BTOKEN is already added.\\nerror BTOKEN_ALREADY_ADDED();\\n\\n/// @notice Thrown when the lending action isn't allowed.\\nerror LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when the borrowing action isn't allowed.\\nerror BORROW_NOT_ALLOWED();\\n\\n/// @notice Thrown when the repaying action isn't allowed.\\nerror REPAY_NOT_ALLOWED();\\n\\n/// @notice Thrown when the redeeming action isn't allowed.\\nerror WITHDRAW_LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when certain actions are locked.\\nerror LOCKED();\\n\\n/// @notice Thrown when an action isn't executed.\\nerror NOT_IN_EXEC();\\n\\n/// @notice Thrown when the repayment allowance hasn't been warmed up.\\nerror REPAY_ALLOW_NOT_WARMED_UP();\\n\\n/// @notice Thrown when a different collateral type exists.\\nerror DIFF_COL_EXIST(address collToken);\\n\\n/// @notice Thrown when a position is not eligible for liquidation.\\nerror NOT_LIQUIDATABLE(uint256 positionId);\\n\\n/// @notice Thrown when a position is flagged as bad or invalid.\\nerror BAD_POSITION(uint256 posId);\\n\\n/// @notice Thrown when collateral for a specific position is flagged as bad or invalid.\\nerror BAD_COLLATERAL(uint256 positionId);\\n\\n/// @notice Thrown when there's insufficient collateral for an operation.\\nerror INSUFFICIENT_COLLATERAL();\\n\\n/// @notice Thrown when an attempted repayment exceeds the actual debt.\\nerror REPAY_EXCEEDS_DEBT(uint256 repay, uint256 debt);\\n\\n/// @notice Thrown when an invalid utility token is provided.\\nerror INVALID_UTOKEN(address uToken);\\n\\n/// @notice Thrown when a borrow operation results in zero shares.\\nerror BORROW_ZERO_SHARE(uint256 borrowAmount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CONFIGURATION ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when slippage exceeds the allowed limit.\\nerror EXCEED_SLIPPAGE(uint256 ratio);\\n\\n/// @notice Thrown when a certain ratio is too high for an operation.\\nerror RATIO_TOO_HIGH(uint256 ratio);\\n\\n/// @notice Thrown when an invalid fee distribution is detected.\\nerror INVALID_FEE_DISTRIBUTION();\\n\\n/// @notice Thrown when no treasury is set for fee distribution.\\nerror NO_TREASURY_SET();\\n\\n/// @notice Thrown when a fee window has already started.\\nerror FEE_WINDOW_ALREADY_STARTED();\\n\\n/// @notice Thrown when a fee window duration is too long.\\nerror FEE_WINDOW_TOO_LONG(uint256 windowTime);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                UTILITY ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a cast operation fails.\\nerror CAST();\\n\\n/// @notice Thrown when an operation has surpassed its deadline.\\nerror EXPIRED(uint256 deadline);\\n\",\"keccak256\":\"0x8e02bff5533d9c0f73ccad89c6b292c75db6e36baabf918004ee078ffb9bbdbe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610a2c806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806374ff36f7116100f9578063ba8e568f11610097578063e941fa7811610071578063e941fa7814610328578063ec670aa614610331578063f2fde38b14610344578063fbe5db361461035757600080fd5b8063ba8e568f146102ef578063c4d66de814610302578063d0fb02031461031557600080fd5b80639151dfe3116100d35780639151dfe3146102ae57806393f4dc19146102b6578063a8602fea146102c9578063b6ac642a146102dc57600080fd5b806374ff36f71461028b5780638b424267146102945780638da5cb5b1461029d57600080fd5b80635321f12c116101665780636660103211610140578063666010321461026857806367a5279314610271578063715018a61461027a57806371df5a8d1461028257600080fd5b80635321f12c1461023957806361d027b3146102425780636447ceac1461025557600080fd5b806304592e1e146101ae578063088203e6146101de57806312d2f841146101f557806341a2ac70146101fe578063472d35b914610213578063490ae21014610226575b600080fd5b6071546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e7606b5481565b6040519081526020016101d5565b6101e7606a5481565b61021161020c36600461090f565b61036a565b005b610211610221366004610928565b6103a2565b61021161023436600461090f565b6103f3565b6101e7606e5481565b606f546101c1906001600160a01b031681565b610211610263366004610928565b610426565b6101e7606c5481565b6101e760665481565b610211610477565b6101e7606d5481565b6101e760695481565b6101e760685481565b6033546001600160a01b03166101c1565b61021161048b565b6102116102c4366004610928565b6104ba565b6102116102d7366004610928565b61050b565b6102116102ea36600461090f565b61055c565b6102116102fd366004610958565b61058f565b610211610310366004610928565b6105db565b6065546101c1906001600160a01b031681565b6101e760675481565b61021161033f36600461090f565b61075c565b610211610352366004610928565b610790565b6070546101c1906001600160a01b031681565b610372610809565b6107d081111561039d57604051630216804b60e61b8152600481018290526024015b60405180910390fd5b606855565b6103aa610809565b6001600160a01b0381166103d15760405163538ba4f960e01b815260040160405180910390fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b6103fb610809565b6107d081111561042157604051630216804b60e61b815260048101829052602401610394565b606655565b61042e610809565b6001600160a01b0381166104555760405163538ba4f960e01b815260040160405180910390fd5b607080546001600160a01b0319166001600160a01b0392909216919091179055565b61047f610809565b6104896000610863565b565b610493610809565b606b54156104b4576040516320fa6a5760e01b815260040160405180910390fd5b42606b55565b6104c2610809565b6001600160a01b0381166104e95760405163538ba4f960e01b815260040160405180910390fd5b607180546001600160a01b0319166001600160a01b0392909216919091179055565b610513610809565b6001600160a01b03811661053a5760405163538ba4f960e01b815260040160405180910390fd5b606f80546001600160a01b0319166001600160a01b0392909216919091179055565b610564610809565b6107d081111561058a57604051630216804b60e61b815260048101829052602401610394565b606755565b610597610809565b612710816105a58486610984565b6105af9190610984565b146105cd57604051630e5bed8960e11b815260040160405180910390fd5b606c92909255606d55606e55565b600054610100900460ff16158080156105fb5750600054600160ff909116105b806106155750303b158015610615575060005460ff166001145b6106785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610394565b6000805460ff19166001179055801561069b576000805461ff0019166101001790555b6106a36108b5565b6001600160a01b0382166106ca5760405163538ba4f960e01b815260040160405180910390fd5b606f80546001600160a01b0319166001600160a01b038416179055603260668190556067556103e8606855610bb8606c55610dac606d819055606e556064606955624f1a00606a558015610758576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b610764610809565b624f1a0081111561078b57604051633831c9dd60e21b815260048101829052602401610394565b606a55565b610798610809565b6001600160a01b0381166107fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610394565b61080681610863565b50565b6033546001600160a01b031633146104895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610394565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166108dc5760405162461bcd60e51b8152600401610394906109ab565b610489600054610100900460ff166109065760405162461bcd60e51b8152600401610394906109ab565b61048933610863565b60006020828403121561092157600080fd5b5035919050565b60006020828403121561093a57600080fd5b81356001600160a01b038116811461095157600080fd5b9392505050565b60008060006060848603121561096d57600080fd5b505081359360208301359350604090920135919050565b808201808211156109a557634e487b7160e01b600052601160045260246000fd5b92915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122073d6aa15185dd832b50f8477353eeb1e9aa605593a6b38d5bbdbf1edaf3709e864736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806374ff36f7116100f9578063ba8e568f11610097578063e941fa7811610071578063e941fa7814610328578063ec670aa614610331578063f2fde38b14610344578063fbe5db361461035757600080fd5b8063ba8e568f146102ef578063c4d66de814610302578063d0fb02031461031557600080fd5b80639151dfe3116100d35780639151dfe3146102ae57806393f4dc19146102b6578063a8602fea146102c9578063b6ac642a146102dc57600080fd5b806374ff36f71461028b5780638b424267146102945780638da5cb5b1461029d57600080fd5b80635321f12c116101665780636660103211610140578063666010321461026857806367a5279314610271578063715018a61461027a57806371df5a8d1461028257600080fd5b80635321f12c1461023957806361d027b3146102425780636447ceac1461025557600080fd5b806304592e1e146101ae578063088203e6146101de57806312d2f841146101f557806341a2ac70146101fe578063472d35b914610213578063490ae21014610226575b600080fd5b6071546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e7606b5481565b6040519081526020016101d5565b6101e7606a5481565b61021161020c36600461090f565b61036a565b005b610211610221366004610928565b6103a2565b61021161023436600461090f565b6103f3565b6101e7606e5481565b606f546101c1906001600160a01b031681565b610211610263366004610928565b610426565b6101e7606c5481565b6101e760665481565b610211610477565b6101e7606d5481565b6101e760695481565b6101e760685481565b6033546001600160a01b03166101c1565b61021161048b565b6102116102c4366004610928565b6104ba565b6102116102d7366004610928565b61050b565b6102116102ea36600461090f565b61055c565b6102116102fd366004610958565b61058f565b610211610310366004610928565b6105db565b6065546101c1906001600160a01b031681565b6101e760675481565b61021161033f36600461090f565b61075c565b610211610352366004610928565b610790565b6070546101c1906001600160a01b031681565b610372610809565b6107d081111561039d57604051630216804b60e61b8152600481018290526024015b60405180910390fd5b606855565b6103aa610809565b6001600160a01b0381166103d15760405163538ba4f960e01b815260040160405180910390fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b6103fb610809565b6107d081111561042157604051630216804b60e61b815260048101829052602401610394565b606655565b61042e610809565b6001600160a01b0381166104555760405163538ba4f960e01b815260040160405180910390fd5b607080546001600160a01b0319166001600160a01b0392909216919091179055565b61047f610809565b6104896000610863565b565b610493610809565b606b54156104b4576040516320fa6a5760e01b815260040160405180910390fd5b42606b55565b6104c2610809565b6001600160a01b0381166104e95760405163538ba4f960e01b815260040160405180910390fd5b607180546001600160a01b0319166001600160a01b0392909216919091179055565b610513610809565b6001600160a01b03811661053a5760405163538ba4f960e01b815260040160405180910390fd5b606f80546001600160a01b0319166001600160a01b0392909216919091179055565b610564610809565b6107d081111561058a57604051630216804b60e61b815260048101829052602401610394565b606755565b610597610809565b612710816105a58486610984565b6105af9190610984565b146105cd57604051630e5bed8960e11b815260040160405180910390fd5b606c92909255606d55606e55565b600054610100900460ff16158080156105fb5750600054600160ff909116105b806106155750303b158015610615575060005460ff166001145b6106785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610394565b6000805460ff19166001179055801561069b576000805461ff0019166101001790555b6106a36108b5565b6001600160a01b0382166106ca5760405163538ba4f960e01b815260040160405180910390fd5b606f80546001600160a01b0319166001600160a01b038416179055603260668190556067556103e8606855610bb8606c55610dac606d819055606e556064606955624f1a00606a558015610758576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b610764610809565b624f1a0081111561078b57604051633831c9dd60e21b815260048101829052602401610394565b606a55565b610798610809565b6001600160a01b0381166107fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610394565b61080681610863565b50565b6033546001600160a01b031633146104895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610394565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166108dc5760405162461bcd60e51b8152600401610394906109ab565b610489600054610100900460ff166109065760405162461bcd60e51b8152600401610394906109ab565b61048933610863565b60006020828403121561092157600080fd5b5035919050565b60006020828403121561093a57600080fd5b81356001600160a01b038116811461095157600080fd5b9392505050565b60008060006060848603121561096d57600080fd5b505081359360208301359350604090920135919050565b808201808211156109a557634e487b7160e01b600052601160045260246000fd5b92915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122073d6aa15185dd832b50f8477353eeb1e9aa605593a6b38d5bbdbf1edaf3709e864736f6c63430008100033",
  "devdoc": {
    "author": "BlueberryProtocol",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "initialize(address)": {
        "details": "Initializes the contract with the given treasury address.",
        "params": {
          "treasury_": "Address of the treasury."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBlbStabilityPool(address)": {
        "details": "Owner priviledged function to set $BLB stability pool address",
        "params": {
          "pool_": "Address of the new stability pool"
        }
      },
      "setBlbUsdcIchiVault(address)": {
        "details": "Owner priviledged function to set $BLB-ICHI vault address",
        "params": {
          "vault_": "Address of the new vault"
        }
      },
      "setDepositFee(uint256)": {
        "details": "Owner priviledged function to set deposit fee",
        "params": {
          "depositFee_": "Fee rate applied to the deposit"
        }
      },
      "setFeeDistribution(uint256,uint256,uint256)": {
        "details": "Owner priviledged function to set the distribution rates for the various fees",
        "params": {
          "blbIchiVaultFeeRate_": "Fee rate applied to the $BLB-ICHI vault",
          "blbStablePoolFeeRate_": "Fee rate applied to the $BLB liquidity pool",
          "treasuryFeeRate_": "Fee rate sent to treasury"
        }
      },
      "setFeeManager(address)": {
        "details": "Owner priviledged function to set fee manager address",
        "params": {
          "feeManager_": "Address of the new fee manager"
        }
      },
      "setRewardFee(uint256)": {
        "details": "Owner priviledged function to set reward fee",
        "params": {
          "rewardFee_": "Fee rate applied to the rewards"
        }
      },
      "setTreasuryWallet(address)": {
        "details": "Owner priviledged function to set treasury address",
        "params": {
          "treasury_": "Address of the new treasury"
        }
      },
      "setWithdrawFee(uint256)": {
        "details": "Owner priviledged function to set withdraw fee",
        "params": {
          "withdrawFee_": "Fee rate applied to the withdraw"
        }
      },
      "setWithdrawVaultFeeWindow(uint256)": {
        "details": "Owner priviledged function to set withdraw vault fee window duration",
        "params": {
          "withdrawVaultFeeWindow_": "Duration of the withdraw vault fee window"
        }
      },
      "startVaultWithdrawFee()": {
        "details": "Owner priviledged function to start the withdraw vault fee window"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "rewardFee": {
        "return": "The reward fee rate.",
        "returns": {
          "_0": "The reward fee rate."
        }
      },
      "withdrawFee": {
        "return": "The withdrawal fee rate.",
        "returns": {
          "_0": "The withdrawal fee rate."
        }
      }
    },
    "title": "ProtocolConfig",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FEE_WINDOW_ALREADY_STARTED()": [
        {
          "notice": "Thrown when a fee window has already started."
        }
      ],
      "FEE_WINDOW_TOO_LONG(uint256)": [
        {
          "notice": "Thrown when a fee window duration is too long."
        }
      ],
      "INVALID_FEE_DISTRIBUTION()": [
        {
          "notice": "Thrown when an invalid fee distribution is detected."
        }
      ],
      "RATIO_TOO_HIGH(uint256)": [
        {
          "notice": "Thrown when a certain ratio is too high for an operation."
        }
      ],
      "ZERO_ADDRESS()": [
        {
          "notice": "Thrown when the address provided is the zero address."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "blbIchiVaultFeeRate()": {
        "notice": "Portion of the fee for $BLB stablecoin pool."
      },
      "blbStabilityPool()": {
        "notice": "Address of the $BLB-USDC ICHI vault."
      },
      "blbStablePoolFeeRate()": {
        "notice": "Portion of the fee sent to the protocol's treasury."
      },
      "blbUsdcIchiVault()": {
        "notice": "Address of the protocol's treasury."
      },
      "depositFee()": {
        "notice": "Fee structures related to leveraging activities."
      },
      "feeManager()": {
        "notice": "Fee manager of the protocol to handle different types of fees."
      },
      "rewardFee()": {
        "notice": "Retrieve the reward fee rate applied when users claim rewards from the protocol."
      },
      "startVaultWithdrawFee()": {
        "notice": "This function can only be called once per vault"
      },
      "treasury()": {
        "notice": "Addresses associated with the protocol."
      },
      "treasuryFeeRate()": {
        "notice": "Fee distribution rates."
      },
      "withdrawFee()": {
        "notice": "Retrieve the withdrawal fee rate applied when users withdraw from the protocol."
      },
      "withdrawVaultFee()": {
        "notice": "Fee structures related to vault operations."
      },
      "withdrawVaultFeeWindow()": {
        "notice": "Fee applied on vault withdrawals."
      },
      "withdrawVaultFeeWindowStartTime()": {
        "notice": "Time window for which the vault withdrawal fee applies."
      }
    },
    "notice": "This contract acts as the central point of all configurable states in the Blueberry Protocol.         It holds references to fee management, various fee types and values,          treasury settings, and other system configurations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 241,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 244,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3309,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 233,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12593,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "feeManager",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IFeeManager)13509"
      },
      {
        "astId": 12596,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "depositFee",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 12598,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 12600,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "rewardFee",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 12603,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "withdrawVaultFee",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 12606,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "withdrawVaultFeeWindow",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 12609,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "withdrawVaultFeeWindowStartTime",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 12612,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "treasuryFeeRate",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 12615,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "blbStablePoolFeeRate",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 12618,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "blbIchiVaultFeeRate",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 12621,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "treasury",
        "offset": 0,
        "slot": "111",
        "type": "t_address"
      },
      {
        "astId": 12624,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "blbUsdcIchiVault",
        "offset": 0,
        "slot": "112",
        "type": "t_address"
      },
      {
        "astId": 12627,
        "contract": "contracts/ProtocolConfig.sol:ProtocolConfig",
        "label": "blbStabilityPool",
        "offset": 0,
        "slot": "113",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeManager)13509": {
        "encoding": "inplace",
        "label": "contract IFeeManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}