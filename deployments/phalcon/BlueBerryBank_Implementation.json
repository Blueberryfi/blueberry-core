{
  "address": "0xD828099906C4Fecd42948D5c15D502899eb9daA0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "BAD_COLLATERAL",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "posId",
          "type": "uint256"
        }
      ],
      "name": "BAD_POSITION",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BANK_ALREADY_LISTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BANK_LIMIT",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BANK_NOT_LISTED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BORROW_FAILED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BORROW_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "BORROW_ZERO_SHARE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BTOKEN_ALREADY_ADDED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collToken",
          "type": "address"
        }
      ],
      "name": "DIFF_COL_EXIST",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "INCORRECT_DEBT",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uToken",
          "type": "address"
        }
      ],
      "name": "INCORRECT_UNDERLYING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INPUT_ARRAY_MISMATCH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_COLLATERAL",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uToken",
          "type": "address"
        }
      ],
      "name": "INVALID_UTOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LEND_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "LIQ_THRESHOLD_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "LIQ_THRESHOLD_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LOCKED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "NOT_EOA",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NOT_FROM_OWNER",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "NOT_FROM_SPELL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_IN_EXEC",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "NOT_LIQUIDATABLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_UNDER_EXECUTION",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ORACLE_NOT_SUPPORT",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wToken",
          "type": "address"
        }
      ],
      "name": "ORACLE_NOT_SUPPORT_WTOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REPAY_ALLOW_NOT_WARMED_UP",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "REPAY_EXCEEDS_DEBT",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "REPAY_FAILED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REPAY_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spell",
          "type": "address"
        }
      ],
      "name": "SPELL_NOT_WHITELISTED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TOKEN_NOT_WHITELISTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_LEND_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_AMOUNT",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "softVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "hardVault",
          "type": "address"
        }
      ],
      "name": "AddBank",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Execute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingVaultSize",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PutCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "SetOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "SetWhitelistERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "SetWhitelistToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TakeCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawLend",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSITION_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPELL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GENERAL_LOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_IN_EXEC_LOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "accrue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "accrueAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "softVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hardVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liqThreshold",
          "type": "uint256"
        }
      ],
      "name": "addBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allBanks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowContractCalls",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bTokenInBank",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "banks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "hardVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "softVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liqThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IProtocolConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "currentPositionDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "spell",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "contract IFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBankInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "bToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPositionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingVaultShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBank.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getDebtValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getIsolatedCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "icollValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getPositionDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getPositionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingVaultShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBank.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getPositionRisk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "risk",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getPositionValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoreOracle",
          "name": "oracle_",
          "type": "address"
        },
        {
          "internalType": "contract IProtocolConfig",
          "name": "config_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBorrowAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLendAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRepayAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWithdrawLendAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountCall",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPositionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ICoreOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingVaultShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCall",
          "type": "uint256"
        }
      ],
      "name": "putCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountCall",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayResumedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "ok",
          "type": "bool"
        }
      ],
      "name": "setAllowContractCalls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bankStatus",
          "type": "uint256"
        }
      ],
      "name": "setBankStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "takeCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "contracts",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        }
      ],
      "name": "whitelistContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "ok",
          "type": "bool"
        }
      ],
      "name": "whitelistERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "spells",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        }
      ],
      "name": "whitelistSpells",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        }
      ],
      "name": "whitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedSpells",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedWrappedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd186af6f76578915d93fca36b8ba8875bf1d14dfa4fedc66017ea06902398c1",
  "receipt": {
    "to": null,
    "from": "0x83B801Bc28340d63b560b70036ccaf48E5995ae9",
    "contractAddress": "0xD828099906C4Fecd42948D5c15D502899eb9daA0",
    "transactionIndex": 0,
    "gasUsed": "4363045",
    "logsBloom": "0x
    "blockHash": "0x66ad4fa2a4ba54f2819fd9e3eae2f604b87058a33a50c840ebaadb50fea22e31",
    "transactionHash": "0xfd186af6f76578915d93fca36b8ba8875bf1d14dfa4fedc66017ea06902398c1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17942259,
        "transactionHash": "0xfd186af6f76578915d93fca36b8ba8875bf1d14dfa4fedc66017ea06902398c1",
        "address": "0xD828099906C4Fecd42948D5c15D502899eb9daA0",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x66ad4fa2a4ba54f2819fd9e3eae2f604b87058a33a50c840ebaadb50fea22e31"
      }
    ],
    "blockNumber": 17942259,
    "cumulativeGasUsed": "4363045",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "40a5e959dbaee40ef6eeed84d8383760",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"BAD_COLLATERAL\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"posId\",\"type\":\"uint256\"}],\"name\":\"BAD_POSITION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BANK_ALREADY_LISTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BANK_LIMIT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BANK_NOT_LISTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BORROW_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BORROW_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"BORROW_ZERO_SHARE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BTOKEN_ALREADY_ADDED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"}],\"name\":\"DIFF_COL_EXIST\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"INCORRECT_DEBT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"}],\"name\":\"INCORRECT_UNDERLYING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INPUT_ARRAY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_COLLATERAL\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"}],\"name\":\"INVALID_UTOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LEND_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"LIQ_THRESHOLD_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"LIQ_THRESHOLD_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LOCKED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"NOT_EOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NOT_FROM_OWNER\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"NOT_FROM_SPELL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_IN_EXEC\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"NOT_LIQUIDATABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_UNDER_EXECUTION\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ORACLE_NOT_SUPPORT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wToken\",\"type\":\"address\"}],\"name\":\"ORACLE_NOT_SUPPORT_WTOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REPAY_ALLOW_NOT_WARMED_UP\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"REPAY_EXCEEDS_DEBT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"REPAY_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REPAY_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spell\",\"type\":\"address\"}],\"name\":\"SPELL_NOT_WHITELISTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TOKEN_NOT_WHITELISTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WITHDRAW_LEND_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_AMOUNT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"softVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hardVault\",\"type\":\"address\"}],\"name\":\"AddBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingVaultSize\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PutCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"SetWhitelistERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"SetWhitelistToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPELL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GENERAL_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_IN_EXEC_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"accrueAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"softVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hardVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqThreshold\",\"type\":\"uint256\"}],\"name\":\"addBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBanks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowContractCalls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bTokenInBank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"banks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"hardVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"softVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IProtocolConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"currentPositionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spell\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBankInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPositionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingVaultShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IBank.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getDebtValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getIsolatedCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"icollValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingVaultShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"internalType\":\"struct IBank.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"risk\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreOracle\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"contract IProtocolConfig\",\"name\":\"config_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBorrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLendAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRepayAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawLendAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ICoreOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingVaultShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"putCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayResumedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"setAllowContractCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bankStatus\",\"type\":\"uint256\"}],\"name\":\"setBankStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"whitelistContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"whitelistERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"spells\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"whitelistSpells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"whitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedSpells\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedWrappedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BlueberryProtocol\",\"kind\":\"dev\",\"methods\":{\"EXECUTOR()\":{\"details\":\"An executor is the owner of the current position.\",\"returns\":{\"_0\":\"Address of the executor.\"}},\"accrue(address)\":{\"details\":\"Trigger interest accrual for a specific bank.\",\"params\":{\"token\":\"The address of the underlying token to trigger the interest accrual.\"}},\"accrueAll(address[])\":{\"details\":\"Convenient function to trigger interest accrual for multiple banks.\",\"params\":{\"tokens\":\"An array of token addresses to trigger interest accrual for.\"}},\"addBank(address,address,address,uint256)\":{\"details\":\"Add a new bank entity with associated vaults.Emits a {AddBank} event.\",\"params\":{\"hardVault\":\"Address of the hardVault.\",\"liqThreshold\":\"Liquidation threshold.\",\"softVault\":\"Address of the softVault.\",\"token\":\"Address of the underlying token for the bank.\"}},\"borrow(address,uint256)\":{\"details\":\"This function must only be called from a spell while under execution.Emit a {Borrow} event.\",\"params\":{\"amount\":\"The amount of tokens the user wishes to borrow.\",\"token\":\"The token to borrow from the bank.\"},\"returns\":{\"borrowedAmount\":\"Returns the actual amount borrowed from the bank.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"currentPositionDebt(uint256)\":{\"details\":\"Trigger interest accrual and return the current debt balance for a specific position.\",\"params\":{\"positionId\":\"The ID of the position to query for the debt balance. The current debt balance for the specified position.\"}},\"execute(uint256,address,bytes)\":{\"details\":\"Executes a specific action on a position.Emit an {Execute} event.\",\"params\":{\"data\":\"Data payload to pass to the spell for execution.\",\"positionId\":\"Unique identifier of the position, or zero for a new position.\",\"spell\":\"Address of the contract (\\\"spell\\\") that contains the logic for the action to be executed.\"}},\"feeManager()\":{\"details\":\"Get the current FeeManager interface from the configuration.\",\"returns\":{\"_0\":\"An interface representing the current FeeManager.\"}},\"getBankInfo(address)\":{\"details\":\"Retrieve information about a specific bank.\",\"params\":{\"token\":\"The token address to query for bank information.\"},\"returns\":{\"bToken\":\"The address of the bToken associated with the bank.\",\"isListed\":\"Whether the bank is listed or not.\",\"totalShare\":\"The total shares in the bank.\"}},\"getCurrentPositionInfo()\":{\"details\":\"Fetches details about the current active position.\",\"returns\":{\"_0\":\"Position object containing all details about the current position.\"}},\"getDebtValue(uint256)\":{\"details\":\"Computes the total USD value of the debt of a given position.\",\"params\":{\"positionId\":\"ID of the position to compute the debt value for.\"},\"returns\":{\"debtValue\":\"Total USD value of the position's debt.\"}},\"getIsolatedCollateralValue(uint256)\":{\"details\":\"Computes the USD value of the isolated collateral for a given position.\",\"params\":{\"positionId\":\"ID of the position to compute the isolated collateral value for.\"},\"returns\":{\"icollValue\":\"USD value of the isolated collateral.\"}},\"getPositionDebt(uint256)\":{\"details\":\"Should call accrue first to obtain the current debt.\",\"params\":{\"positionId\":\"The ID of the position to query.\"}},\"getPositionInfo(uint256)\":{\"details\":\"Fetches details about a specific position using its ID.\",\"params\":{\"positionId\":\"Unique identifier of the position.\"},\"returns\":{\"_0\":\"Position object containing all details about the position.\"}},\"getPositionRisk(uint256)\":{\"details\":\"Computes the risk ratio of a specified position.\",\"params\":{\"positionId\":\"ID of the position to assess risk for.\"},\"returns\":{\"risk\":\"The risk ratio of the position (based on a scale of 1e4).\"}},\"getPositionValue(uint256)\":{\"details\":\"Computes the total USD value of the collateral of a given position.\",\"params\":{\"positionId\":\"ID of the position to compute the value for.\"},\"returns\":{\"positionValue\":\"Total USD value of the collateral and pending rewards.\"}},\"initialize(address,address)\":{\"details\":\"Initialize the bank smart contract, using msg.sender as the first governor.Emits a {SetOracle} event.\",\"params\":{\"config_\":\"The Protocol config address\",\"oracle_\":\"The oracle smart contract address.\"}},\"isBorrowAllowed()\":{\"details\":\"Determine if borrowing is currently allowed based on the bank's status flags.\",\"returns\":{\"_0\":\"A boolean indicating whether borrowing is permitted.\"}},\"isLendAllowed()\":{\"details\":\"Determine if lending is currently allowed based on the bank's status flags.\",\"returns\":{\"_0\":\"A boolean indicating whether lending is permitted.\"}},\"isLiquidatable(uint256)\":{\"details\":\"Determines if a given position can be liquidated based on its risk ratio.\",\"params\":{\"positionId\":\"ID of the position to check.\"},\"returns\":{\"_0\":\"True if the position can be liquidated; otherwise, false.\"}},\"isRepayAllowed()\":{\"details\":\"Determine if repayments are currently allowed based on the bank's status flags.\",\"returns\":{\"_0\":\"A boolean indicating whether repayments are permitted.\"}},\"isWithdrawLendAllowed()\":{\"details\":\"Determine if withdrawing from lending is currently allowed based on the bank's status flags.\",\"returns\":{\"_0\":\"A boolean indicating whether withdrawing from lending is permitted.\"}},\"lend(address,uint256)\":{\"details\":\"Lend tokens to the bank as isolated collateral.Emit a {Lend} event.\",\"params\":{\"amount\":\"The number of tokens to lend.\",\"token\":\"The address of the token to lend.\"}},\"liquidate(uint256,address,uint256)\":{\"details\":\"Liquidates a position by repaying its debt and taking the collateral.Emits a {Liquidate} event.\",\"params\":{\"amountCall\":\"The amount of debt to be repaid when calling transferFrom.\",\"debtToken\":\"The token in which the debt is denominated.\",\"positionId\":\"The unique identifier of the position to liquidate.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"This function is called at the end of a  `safeBatchTransferFrom` after the balances have been updated.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"This function is called at the end of a  `safeTransferFrom` after the balance has been updated.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"putCollateral(address,uint256,uint256)\":{\"details\":\"Must only be called during execution.\",\"params\":{\"amountCall\":\"The amount of tokens to add as collateral.\",\"collId\":\"The token ID for collateral (i.e., uint256 format of LP address).\",\"collToken\":\"The ERC1155 token wrapped for collateral (i.e., Wrapped token of LP).\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(address,uint256)\":{\"details\":\"This function must only be called while under execution.Emit a {Repay} event.\",\"params\":{\"amountCall\":\"The amount of tokens to be repaid.\",\"token\":\"The token to repay to the bank.\"}},\"setAllowContractCalls(bool)\":{\"details\":\"Toggles the allowance of contract calls.\",\"params\":{\"ok\":\"If true, contract calls are allowed. Otherwise, only EOA calls are allowed.\"}},\"setBankStatus(uint256)\":{\"details\":\"Update the bank's operational status flags.\",\"params\":{\"_bankStatus\":\"The new status flags for the bank.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if the interfaceId is 0x01ffc9a7 (IERC1155Receiver).\"},\"takeCollateral(uint256)\":{\"details\":\"Must only be called during execution.\",\"params\":{\"amount\":\"The amount of tokens to be withdrawn as collateral.\"},\"returns\":{\"_0\":\"Returns the amount of collateral withdrawn.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelistContracts(address[],bool[])\":{\"details\":\"Sets whitelist statuses for various contracts.\",\"params\":{\"contracts\":\"List of contract addresses.\",\"statuses\":\"Corresponding list of whitelist statuses to set.\"}},\"whitelistERC1155(address[],bool)\":{\"details\":\"Set the whitelist status for specific wrapped tokens (ERC1155).\",\"params\":{\"ok\":\"Boolean indicating the desired whitelist status for the provided tokens.\",\"tokens\":\"Array of wrapped token addresses to set their whitelist status.\"}},\"whitelistSpells(address[],bool[])\":{\"details\":\"Set the whitelist status for specific spells.\",\"params\":{\"spells\":\"Array of spell addresses to change their whitelist status.\",\"statuses\":\"Array of boolean values indicating the desired whitelist status for each spell.\"}},\"whitelistTokens(address[],bool[])\":{\"details\":\"Set the whitelist status for specific tokens.\",\"params\":{\"statuses\":\"Array of boolean values indicating the desired whitelist status for each token.\",\"tokens\":\"Array of token addresses to change their whitelist status.\"}},\"withdrawLend(address,uint256)\":{\"details\":\"Withdraw isolated collateral tokens previously lent to the bank.Emit a {WithdrawLend} event.\",\"params\":{\"shareAmount\":\"The number of vault share tokens to withdraw.\",\"token\":\"The address of the isolated collateral token to withdraw.\"}}},\"stateVariables\":{\"POSITION_ID\":{\"return\":\"Current position ID.\",\"returns\":{\"_0\":\"Current position ID.\"}},\"SPELL\":{\"return\":\"Current spell address.\",\"returns\":{\"_0\":\"Current spell address.\"}},\"oracle\":{\"details\":\"The protocol config address.\"}},\"title\":\"BlueberryBank\",\"version\":1},\"userdoc\":{\"errors\":{\"BAD_COLLATERAL(uint256)\":[{\"notice\":\"Thrown when collateral for a specific position is flagged as bad or invalid.\"}],\"BAD_POSITION(uint256)\":[{\"notice\":\"Thrown when a position is flagged as bad or invalid.\"}],\"BANK_ALREADY_LISTED()\":[{\"notice\":\"Thrown when a bank is already listed for a given token.\"}],\"BANK_LIMIT()\":[{\"notice\":\"Thrown when the bank limit is reached.\"}],\"BANK_NOT_LISTED(address)\":[{\"notice\":\"Thrown when a bank isn't listed for a given token.\"}],\"BORROW_FAILED(uint256)\":[{\"notice\":\"Thrown when borrowing from the vault fails.\"}],\"BORROW_NOT_ALLOWED()\":[{\"notice\":\"Thrown when the borrowing action isn't allowed.\"}],\"BORROW_ZERO_SHARE(uint256)\":[{\"notice\":\"Thrown when a borrow operation results in zero shares.\"}],\"BTOKEN_ALREADY_ADDED()\":[{\"notice\":\"Thrown when the BTOKEN is already added.\"}],\"DIFF_COL_EXIST(address)\":[{\"notice\":\"Thrown when a different collateral type exists.\"}],\"INCORRECT_UNDERLYING(address)\":[{\"notice\":\"Thrown when an incorrect underlying token is provided.\"}],\"INPUT_ARRAY_MISMATCH()\":[{\"notice\":\"Thrown when the lengths of input arrays do not match.\"}],\"INSUFFICIENT_COLLATERAL()\":[{\"notice\":\"Thrown when there's insufficient collateral for an operation.\"}],\"INVALID_UTOKEN(address)\":[{\"notice\":\"Thrown when an invalid utility token is provided.\"}],\"LEND_NOT_ALLOWED()\":[{\"notice\":\"Thrown when the lending action isn't allowed.\"}],\"LIQ_THRESHOLD_TOO_HIGH(uint256)\":[{\"notice\":\"Thrown when the liquidation threshold is set too high.\"}],\"LIQ_THRESHOLD_TOO_LOW(uint256)\":[{\"notice\":\"Thrown when the liquidation threshold is set too low.\"}],\"LOCKED()\":[{\"notice\":\"Thrown when certain actions are locked.\"}],\"NOT_EOA(address)\":[{\"notice\":\"Thrown when a transaction isn't initiated  by an externally owned account (EOA).\"}],\"NOT_FROM_OWNER(uint256,address)\":[{\"notice\":\"Thrown when the sender is not the owner of a given position ID.\"}],\"NOT_FROM_SPELL(address)\":[{\"notice\":\"Thrown when a transaction isn't initiated by the expected spell.\"}],\"NOT_IN_EXEC()\":[{\"notice\":\"Thrown when an action isn't executed.\"}],\"NOT_LIQUIDATABLE(uint256)\":[{\"notice\":\"Thrown when a position is not eligible for liquidation.\"}],\"NOT_UNDER_EXECUTION()\":[{\"notice\":\"Thrown when a function is called without a required execution flag.\"}],\"ORACLE_NOT_SUPPORT(address)\":[{\"notice\":\"Thrown when the oracle doesn't support a specific token.\"}],\"ORACLE_NOT_SUPPORT_WTOKEN(address)\":[{\"notice\":\"Thrown when the oracle doesn't support a specific wToken.\"}],\"REPAY_ALLOW_NOT_WARMED_UP()\":[{\"notice\":\"Thrown when the repayment allowance hasn't been warmed up.\"}],\"REPAY_EXCEEDS_DEBT(uint256,uint256)\":[{\"notice\":\"Thrown when an attempted repayment exceeds the actual debt.\"}],\"REPAY_FAILED(uint256)\":[{\"notice\":\"Thrown when repaying to the vault fails.\"}],\"REPAY_NOT_ALLOWED()\":[{\"notice\":\"Thrown when the repaying action isn't allowed.\"}],\"SPELL_NOT_WHITELISTED(address)\":[{\"notice\":\"Thrown when a spell address isn't whitelisted.\"}],\"TOKEN_NOT_WHITELISTED(address)\":[{\"notice\":\"Thrown when a token isn't whitelisted.\"}],\"WITHDRAW_LEND_NOT_ALLOWED()\":[{\"notice\":\"Thrown when the redeeming action isn't allowed.\"}],\"ZERO_ADDRESS()\":[{\"notice\":\"Thrown when the address provided is the zero address.\"}],\"ZERO_AMOUNT()\":[{\"notice\":\"Thrown when an action involves zero amount of tokens.\"}]},\"events\":{\"AddBank(address,address,address,address)\":{\"notice\":\"Emitted when a new bank is added by the owner.\"},\"Borrow(uint256,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a user borrows tokens from a bank.\"},\"Execute(uint256,address)\":{\"notice\":\"Emitted when a position is executed.\"},\"Lend(uint256,address,address,uint256)\":{\"notice\":\"Emitted when tokens are lent to the bank.\"},\"Liquidate(uint256,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a position is liquidated.\"},\"PutCollateral(uint256,address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a user adds tokens as collateral.\"},\"Repay(uint256,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a user repays borrowed tokens to a bank.\"},\"SetOracle(address)\":{\"notice\":\"Emitted when the oracle's address is updated by the owner.\"},\"SetWhitelistERC1155(address,bool)\":{\"notice\":\"Emitted when a Wrapped ERC1155 token is whitelisted or removed by the owner.\"},\"SetWhitelistToken(address,bool)\":{\"notice\":\"Emitted when a token is whitelisted or removed by the owner.\"},\"TakeCollateral(uint256,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a user retrieves tokens from their collateral.\"},\"WithdrawLend(uint256,address,address,uint256)\":{\"notice\":\"Emitted when lent tokens are withdrawn from the bank.\"}},\"kind\":\"user\",\"methods\":{\"EXECUTOR()\":{\"notice\":\"Fetches the executor of the current position.\"},\"POSITION_ID()\":{\"notice\":\"Returns the ID of the currently executed position.\"},\"SPELL()\":{\"notice\":\"Returns the address of the currently executed spell.\"},\"_GENERAL_LOCK()\":{\"notice\":\"Temporary variables used across functions.\"},\"allBanks(uint256)\":{\"notice\":\"Collections of banks and positions.\"},\"allowContractCalls()\":{\"notice\":\"Flags and whitelists\"},\"bTokenInBank(address)\":{\"notice\":\"Mapping from token to bank data.\"},\"bankStatus()\":{\"notice\":\"Next available position ID, starting from 1 (see initialize).\"},\"banks(address)\":{\"notice\":\"The list of all listed banks.\"},\"borrow(address,uint256)\":{\"notice\":\"Allows users to borrow tokens from the specified bank.\"},\"config()\":{\"notice\":\"Configurations and oracle addresses.\"},\"execute(uint256,address,bytes)\":{\"notice\":\"This can be used for various operations like adjusting collateral, repaying debt, etc.\"},\"getCurrentPositionInfo()\":{\"notice\":\"This function assumes the presence of an active position and will revert if there's none.\"},\"getDebtValue(uint256)\":{\"notice\":\"Ensure to call `accrue` beforehand to account for any interest changes.\"},\"getIsolatedCollateralValue(uint256)\":{\"notice\":\"Ensure to call `accrue` beforehand to get the most recent value.\"},\"getPositionDebt(uint256)\":{\"notice\":\"Retrieve the debt of a given position, considering the stored debt interest.\"},\"getPositionRisk(uint256)\":{\"notice\":\"A higher risk ratio implies greater risk associated with the position.         when:  riskRatio = (ov - pv) / cv         where: riskRatio = (debt - positionValue) / isolatedCollateralValue\"},\"getPositionValue(uint256)\":{\"notice\":\"The returned value includes both the collateral and any pending rewards.\"},\"isBorrowAllowed()\":{\"notice\":\"Check the last bit of bankStatus.\"},\"isLendAllowed()\":{\"notice\":\"Check the third-to-last bit of bankStatus.\"},\"isRepayAllowed()\":{\"notice\":\"Check the second-to-last bit of bankStatus.\"},\"isWithdrawLendAllowed()\":{\"notice\":\"Check the fourth-to-last bit of bankStatus.\"},\"lend(address,uint256)\":{\"notice\":\"The tokens lent will be used as collateral in the bank and might earn interest or other rewards.\"},\"liquidate(uint256,address,uint256)\":{\"notice\":\"Liquidation can only be triggered if the position is deemed liquidatable          and other conditions are met.\"},\"nextPositionId()\":{\"notice\":\"State variables for position and bank.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handle the receipt of multiple ERC1155 token types.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle the receipt of a single ERC1155 token type.\"},\"positions(uint256)\":{\"notice\":\"Mapping from bToken to its existence in bank.\"},\"putCollateral(address,uint256,uint256)\":{\"notice\":\"Allows users to provide additional collateral.\"},\"repay(address,uint256)\":{\"notice\":\"Allows users to repay their borrowed tokens to the bank.\"},\"repayResumedTimestamp()\":{\"notice\":\"Each bit stores certain bank status, e.g. borrow allowed, repay allowed\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if the contract supports a given interface.\"},\"takeCollateral(uint256)\":{\"notice\":\"Allows users to withdraw a portion of their collateral.\"},\"whitelistedContracts(address)\":{\"notice\":\"Mapping from spell to whitelist status\"},\"whitelistedSpells(address)\":{\"notice\":\"Mapping from token to whitelist status\"},\"whitelistedWrappedTokens(address)\":{\"notice\":\"Mapping from token to whitelist status\"},\"withdrawLend(address,uint256)\":{\"notice\":\"This will reduce the isolated collateral and might also reduce the position's overall health.\"}},\"notice\":\"Blueberry Bank is the main contract that stores user's positions and track the borrowing of tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlueBerryBank.sol\":\"BlueBerryBank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BlueBerryBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"./utils/BlueBerryConst.sol\\\" as Constants;\\nimport \\\"./utils/BlueBerryErrors.sol\\\" as Errors;\\nimport \\\"./utils/EnsureApprove.sol\\\";\\nimport \\\"./utils/ERC1155NaiveReceiver.sol\\\";\\nimport \\\"./interfaces/IBank.sol\\\";\\nimport \\\"./interfaces/ICoreOracle.sol\\\";\\nimport \\\"./interfaces/ISoftVault.sol\\\";\\nimport \\\"./interfaces/IHardVault.sol\\\";\\nimport \\\"./interfaces/compound/ICErc20.sol\\\";\\nimport \\\"./libraries/BBMath.sol\\\";\\n\\n /// @title BlueberryBank\\n /// @author BlueberryProtocol\\n /// @notice Blueberry Bank is the main contract that stores user's positions and track the borrowing of tokens\\ncontract BlueBerryBank is\\n    OwnableUpgradeable,\\n    ERC1155NaiveReceiver,\\n    IBank,\\n    EnsureApprove\\n{\\n    using BBMath for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                   PUBLIC STORAGE\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// Constants for internal usage.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    uint256 private constant _NO_ID = type(uint256).max;\\n    address private constant _NO_ADDRESS = address(1);\\n\\n    /// Temporary variables used across functions.\\n    uint256 public _GENERAL_LOCK;      // TEMPORARY: re-entrancy lock guard.\\n    uint256 public _IN_EXEC_LOCK;      // TEMPORARY: exec lock guard.\\n    uint256 public POSITION_ID;        // TEMPORARY: position ID currently under execution.\\n    address public SPELL;              // TEMPORARY: spell currently under execution.\\n\\n    /// Configurations and oracle addresses.\\n    IProtocolConfig public config;     /// @dev The protocol config address.\\n    ICoreOracle public oracle;         /// @dev The main oracle address.\\n\\n    /// State variables for position and bank.\\n    uint256 public nextPositionId;        /// Next available position ID, starting from 1 (see initialize).\\n    uint256 public bankStatus;            /// Each bit stores certain bank status, e.g. borrow allowed, repay allowed\\n    uint256 public repayResumedTimestamp; /// Timestamp that repay is allowed or resumed\\n\\n    /// Collections of banks and positions.\\n    address[] public allBanks;                     /// The list of all listed banks.\\n    mapping(address => Bank) public banks;         /// Mapping from token to bank data.\\n    mapping(address => bool) public bTokenInBank;  /// Mapping from bToken to its existence in bank.\\n    mapping(uint256 => Position) public positions; /// Mapping from position ID to position data.\\n\\n    /// Flags and whitelists\\n    bool public allowContractCalls; // The boolean status whether to allow call from contract (false = onlyEOA)\\n    mapping(address => bool) public whitelistedTokens;        /// Mapping from token to whitelist status\\n    mapping(address => bool) public whitelistedWrappedTokens; /// Mapping from token to whitelist status\\n    mapping(address => bool) public whitelistedSpells;        /// Mapping from spell to whitelist status\\n    mapping(address => bool) public whitelistedContracts;     /// Mapping from user to whitelist status\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      MODIFIERS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Ensure that the function is called from EOA\\n    /// when allowContractCalls is set to false and caller is not whitelisted\\n    modifier onlyEOAEx() {\\n        if (!allowContractCalls && !whitelistedContracts[msg.sender]) {\\n            if (AddressUpgradeable.isContract(msg.sender))\\n                revert Errors.NOT_EOA(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Ensure that the token is already whitelisted\\n    modifier onlyWhitelistedToken(address token) {\\n        if (!whitelistedTokens[token])\\n            revert Errors.TOKEN_NOT_WHITELISTED(token);\\n        _;\\n    }\\n\\n    /// @dev Ensure that the wrapped ERC1155 is already whitelisted\\n    modifier onlyWhitelistedERC1155(address token) {\\n        if (!whitelistedWrappedTokens[token])\\n            revert Errors.TOKEN_NOT_WHITELISTED(token);\\n        _;\\n    }\\n\\n    /// @dev Reentrancy lock guard.\\n    modifier lock() {\\n        if (_GENERAL_LOCK != _NOT_ENTERED) revert Errors.LOCKED();\\n        _GENERAL_LOCK = _ENTERED;\\n        _;\\n        _GENERAL_LOCK = _NOT_ENTERED;\\n    }\\n\\n    /// @dev Ensure that the function is called from within the execution scope.\\n    modifier inExec() {\\n        if (POSITION_ID == _NO_ID) revert Errors.NOT_IN_EXEC();\\n        if (SPELL != msg.sender) revert Errors.NOT_FROM_SPELL(msg.sender);\\n        if (_IN_EXEC_LOCK != _NOT_ENTERED) revert Errors.LOCKED();\\n        _IN_EXEC_LOCK = _ENTERED;\\n        _;\\n        _IN_EXEC_LOCK = _NOT_ENTERED;\\n    }\\n\\n    /// @dev Ensure that the interest rate of the given token is accrued.\\n    modifier poke(address token) {\\n        accrue(token);\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                     CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Initialize the bank smart contract, using msg.sender as the first governor.\\n    /// @dev Emits a {SetOracle} event.\\n    /// @param oracle_ The oracle smart contract address.\\n    /// @param config_ The Protocol config address\\n    function initialize(\\n        ICoreOracle oracle_,\\n        IProtocolConfig config_\\n    ) external initializer {\\n        __Ownable_init();\\n        if (address(oracle_) == address(0) || address(config_) == address(0)) {\\n            revert Errors.ZERO_ADDRESS();\\n        }\\n        _GENERAL_LOCK = _NOT_ENTERED;\\n        _IN_EXEC_LOCK = _NOT_ENTERED;\\n        POSITION_ID = _NO_ID;\\n        SPELL = _NO_ADDRESS;\\n\\n        config = config_;\\n        oracle = oracle_;\\n\\n        nextPositionId = 1;\\n        bankStatus = 15; // 0x1111: allow borrow, repay, lend, withdrawLend as default\\n\\n        emit SetOracle(address(oracle_));\\n    }\\n\\n    /// @notice Fetches the executor of the current position.\\n    /// @dev An executor is the owner of the current position.\\n    /// @return Address of the executor.\\n    function EXECUTOR() external view override returns (address) {\\n        uint256 positionId = POSITION_ID;\\n        if (positionId == _NO_ID) {\\n            revert Errors.NOT_UNDER_EXECUTION();\\n        }\\n        return positions[positionId].owner;\\n    }\\n\\n    /// @dev Toggles the allowance of contract calls.\\n    /// @param ok If true, contract calls are allowed. Otherwise, only EOA calls are allowed.\\n    function setAllowContractCalls(bool ok) external onlyOwner {\\n        allowContractCalls = ok;\\n    }\\n\\n    /// @dev Sets whitelist statuses for various contracts.\\n    /// @param contracts List of contract addresses.\\n    /// @param statuses Corresponding list of whitelist statuses to set.\\n    function whitelistContracts(\\n        address[] calldata contracts,\\n        bool[] calldata statuses\\n    ) external onlyOwner {\\n        if (contracts.length != statuses.length) {\\n            revert Errors.INPUT_ARRAY_MISMATCH();\\n        }\\n        for (uint256 idx = 0; idx < contracts.length; idx++) {\\n            if (contracts[idx] == address(0)) {\\n                revert Errors.ZERO_ADDRESS();\\n            }\\n            whitelistedContracts[contracts[idx]] = statuses[idx];\\n        }\\n    }\\n\\n    /// @dev Set the whitelist status for specific spells.\\n    /// @param spells Array of spell addresses to change their whitelist status.\\n    /// @param statuses Array of boolean values indicating the desired whitelist status for each spell.\\n    function whitelistSpells(\\n        address[] calldata spells,\\n        bool[] calldata statuses\\n    ) external onlyOwner {\\n        if (spells.length != statuses.length) {\\n            revert Errors.INPUT_ARRAY_MISMATCH();\\n        }\\n        for (uint256 idx = 0; idx < spells.length; idx++) {\\n            if (spells[idx] == address(0)) {\\n                revert Errors.ZERO_ADDRESS();\\n            }\\n            whitelistedSpells[spells[idx]] = statuses[idx];\\n        }\\n    }\\n\\n    /// @dev Set the whitelist status for specific tokens.\\n    /// @param tokens Array of token addresses to change their whitelist status.\\n    /// @param statuses Array of boolean values indicating the desired whitelist status for each token.\\n    function whitelistTokens(\\n        address[] calldata tokens,\\n        bool[] calldata statuses\\n    ) external onlyOwner {\\n        if (tokens.length != statuses.length) {\\n            revert Errors.INPUT_ARRAY_MISMATCH();\\n        }\\n        for (uint256 idx = 0; idx < tokens.length; idx++) {\\n            if (statuses[idx] && !oracle.isTokenSupported(tokens[idx]))\\n                revert Errors.ORACLE_NOT_SUPPORT(tokens[idx]);\\n            whitelistedTokens[tokens[idx]] = statuses[idx];\\n            emit SetWhitelistToken(tokens[idx], statuses[idx]);\\n        }\\n    }\\n\\n    /// @dev Set the whitelist status for specific wrapped tokens (ERC1155).\\n    /// @param tokens Array of wrapped token addresses to set their whitelist status.\\n    /// @param ok Boolean indicating the desired whitelist status for the provided tokens.\\n    function whitelistERC1155(\\n        address[] memory tokens,\\n        bool ok\\n    ) external onlyOwner {\\n        for (uint256 idx = 0; idx < tokens.length; idx++) {\\n            address token = tokens[idx];\\n            if (token == address(0)) revert Errors.ZERO_ADDRESS();\\n            whitelistedWrappedTokens[token] = ok;\\n            emit SetWhitelistERC1155(token, ok);\\n        }\\n    }\\n\\n    /// @dev Add a new bank entity with associated vaults.\\n    /// @dev Emits a {AddBank} event.\\n    /// @param token Address of the underlying token for the bank.\\n    /// @param softVault Address of the softVault.\\n    /// @param hardVault Address of the hardVault.\\n    /// @param liqThreshold Liquidation threshold.\\n    function addBank(\\n        address token,\\n        address softVault,\\n        address hardVault,\\n        uint256 liqThreshold\\n    ) external onlyOwner onlyWhitelistedToken(token) {\\n        if (softVault == address(0) || hardVault == address(0))\\n            revert Errors.ZERO_ADDRESS();\\n        if (liqThreshold > Constants.DENOMINATOR)\\n            revert Errors.LIQ_THRESHOLD_TOO_HIGH(liqThreshold);\\n        if (liqThreshold < Constants.MIN_LIQ_THRESHOLD)\\n            revert Errors.LIQ_THRESHOLD_TOO_LOW(liqThreshold);\\n\\n        Bank storage bank = banks[token];\\n        address bToken = address(ISoftVault(softVault).bToken());\\n\\n        if (bTokenInBank[bToken]) revert Errors.BTOKEN_ALREADY_ADDED();\\n        if (bank.isListed) revert Errors.BANK_ALREADY_LISTED();\\n        if (allBanks.length >= 256) revert Errors.BANK_LIMIT();\\n\\n        bTokenInBank[bToken] = true;\\n        bank.isListed = true;\\n        bank.index = uint8(allBanks.length);\\n        bank.bToken = bToken;\\n        bank.softVault = softVault;\\n        bank.hardVault = hardVault;\\n        bank.liqThreshold = liqThreshold;\\n\\n        IHardVault(hardVault).setApprovalForAll(hardVault, true);\\n        allBanks.push(token);\\n\\n        emit AddBank(token, bToken, softVault, hardVault);\\n    }\\n\\n    /// @dev Update the bank's operational status flags.\\n    /// @param _bankStatus The new status flags for the bank.\\n    function setBankStatus(uint256 _bankStatus) external onlyOwner {\\n        bool repayAllowedStatusBefore = isRepayAllowed();\\n        bankStatus = _bankStatus;\\n        bool repayAllowedStatusAfter = isRepayAllowed();\\n\\n        /// If the repayAllowed status changes from \\\"off\\\" to \\\"on\\\", update the timestamp.\\n        if (!repayAllowedStatusBefore && repayAllowedStatusAfter) {\\n            repayResumedTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @dev Determine if borrowing is currently allowed based on the bank's status flags.\\n    /// @notice Check the last bit of bankStatus.\\n    /// @return A boolean indicating whether borrowing is permitted.\\n    function isBorrowAllowed() public view returns (bool) {\\n        return (bankStatus & 0x01) > 0;\\n    }\\n\\n    /// @dev Determine if repayments are currently allowed based on the bank's status flags.\\n    /// @notice Check the second-to-last bit of bankStatus.\\n    /// @return A boolean indicating whether repayments are permitted.\\n    function isRepayAllowed() public view returns (bool) {\\n        return (bankStatus & 0x02) > 0;\\n    }\\n\\n    /// @dev Determine if lending is currently allowed based on the bank's status flags.\\n    /// @notice Check the third-to-last bit of bankStatus.\\n    /// @return A boolean indicating whether lending is permitted.\\n    function isLendAllowed() public view returns (bool) {\\n        return (bankStatus & 0x04) > 0;\\n    }\\n\\n    /// @dev Determine if withdrawing from lending is currently allowed based on the bank's status flags.\\n    /// @notice Check the fourth-to-last bit of bankStatus.\\n    /// @return A boolean indicating whether withdrawing from lending is permitted.\\n    function isWithdrawLendAllowed() public view returns (bool) {\\n        return (bankStatus & 0x08) > 0;\\n    }\\n\\n    /// @dev Get the current FeeManager interface from the configuration.\\n    /// @return An interface representing the current FeeManager.\\n    function feeManager() public view returns (IFeeManager) {\\n        return config.feeManager();\\n    }\\n\\n    /// @dev Trigger interest accrual for a specific bank.\\n    /// @param token The address of the underlying token to trigger the interest accrual.\\n    function accrue(address token) public override {\\n        Bank storage bank = banks[token];\\n        if (!bank.isListed) revert Errors.BANK_NOT_LISTED(token);\\n        ICErc20(bank.bToken).borrowBalanceCurrent(address(this));\\n    }\\n\\n    /// @dev Convenient function to trigger interest accrual for multiple banks.\\n    /// @param tokens An array of token addresses to trigger interest accrual for.\\n    function accrueAll(address[] memory tokens) external {\\n        for (uint256 idx = 0; idx < tokens.length; idx++) {\\n            accrue(tokens[idx]);\\n        }\\n    }\\n\\n    /// @dev Internal function to return the current borrow balance of the given token.\\n    /// @param token The token address to query for borrow balance.\\n    function _borrowBalanceStored(\\n        address token\\n    ) internal view returns (uint256) {\\n        return ICErc20(banks[token].bToken).borrowBalanceStored(address(this));\\n    }\\n\\n    /// @dev Trigger interest accrual and return the current debt balance for a specific position.\\n    /// @param positionId The ID of the position to query for the debt balance.\\n    /// The current debt balance for the specified position.\\n    function currentPositionDebt(\\n        uint256 positionId\\n    )\\n        external\\n        override\\n        poke(positions[positionId].debtToken)\\n        returns (uint256)\\n    {\\n        return getPositionDebt(positionId);\\n    }\\n\\n    /// @notice Retrieve the debt of a given position, considering the stored debt interest.\\n    /// @dev Should call accrue first to obtain the current debt.\\n    /// @param positionId The ID of the position to query.\\n    function getPositionDebt(\\n        uint256 positionId\\n    ) public view returns (uint256 debt) {\\n        Position memory pos = positions[positionId];\\n        Bank memory bank = banks[pos.debtToken];\\n        if (pos.debtShare == 0 || bank.totalShare == 0) {\\n            return 0;\\n        }\\n        debt = (pos.debtShare * _borrowBalanceStored(pos.debtToken)).divCeil(\\n            bank.totalShare\\n        );\\n    }\\n\\n    /// @dev Retrieve information about a specific bank.\\n    /// @param token The token address to query for bank information.\\n    /// @return isListed Whether the bank is listed or not.\\n    /// @return bToken The address of the bToken associated with the bank.\\n    /// @return totalShare The total shares in the bank.\\n    function getBankInfo(\\n        address token\\n    )\\n        external\\n        view\\n        override\\n        returns (bool isListed, address bToken, uint256 totalShare)\\n    {\\n        Bank memory bank = banks[token];\\n        return (bank.isListed, bank.bToken, bank.totalShare);\\n    }\\n\\n    /// @dev Fetches details about a specific position using its ID.\\n    /// @param positionId Unique identifier of the position.\\n    /// @return Position object containing all details about the position.\\n    function getPositionInfo(\\n        uint256 positionId\\n    ) external view override returns (Position memory) {\\n        return positions[positionId];\\n    }\\n\\n    /// @dev Fetches details about the current active position.\\n    /// @notice This function assumes the presence of an active position and will revert if there's none.\\n    /// @return Position object containing all details about the current position.\\n    function getCurrentPositionInfo()\\n        external\\n        view\\n        override\\n        returns (Position memory)\\n    {\\n        if (POSITION_ID == _NO_ID) revert Errors.BAD_POSITION(POSITION_ID);\\n        return positions[POSITION_ID];\\n    }\\n\\n    /// @dev Computes the total USD value of the collateral of a given position.\\n    /// @notice The returned value includes both the collateral and any pending rewards.\\n    /// @param positionId ID of the position to compute the value for.\\n    /// @return positionValue Total USD value of the collateral and pending rewards.\\n    function getPositionValue(\\n        uint256 positionId\\n    ) public override returns (uint256 positionValue) {\\n        Position memory pos = positions[positionId];\\n        if (pos.collateralSize == 0) {\\n            return 0;\\n        } else {\\n            if (pos.collToken == address(0))\\n                revert Errors.BAD_COLLATERAL(positionId);\\n            uint256 collValue = oracle.getWrappedTokenValue(\\n                pos.collToken,\\n                pos.collId,\\n                pos.collateralSize\\n            );\\n\\n            uint rewardsValue;\\n            (address[] memory tokens, uint256[] memory rewards) = IERC20Wrapper(\\n                pos.collToken\\n            ).pendingRewards(pos.collId, pos.collateralSize);\\n            for (uint256 i; i < tokens.length; i++) {\\n                if (oracle.isTokenSupported(tokens[i])) {\\n                    rewardsValue += oracle.getTokenValue(tokens[i], rewards[i]);\\n                }\\n            }\\n\\n            return collValue + rewardsValue;\\n        }\\n    }\\n\\n    /// @dev Computes the total USD value of the debt of a given position.\\n    /// @notice Ensure to call `accrue` beforehand to account for any interest changes.\\n    /// @param positionId ID of the position to compute the debt value for.\\n    /// @return debtValue Total USD value of the position's debt.\\n    function getDebtValue(\\n        uint256 positionId\\n    ) public override returns (uint256 debtValue) {\\n        Position memory pos = positions[positionId];\\n        uint256 debt = getPositionDebt(positionId);\\n        debtValue = oracle.getTokenValue(pos.debtToken, debt);\\n    }\\n\\n    /// @dev Computes the USD value of the isolated collateral for a given position.\\n    /// @notice Ensure to call `accrue` beforehand to get the most recent value.\\n    /// @param positionId ID of the position to compute the isolated collateral value for.\\n    /// @return icollValue USD value of the isolated collateral.\\n    function getIsolatedCollateralValue(\\n        uint256 positionId\\n    ) public override returns (uint256 icollValue) {\\n        Position memory pos = positions[positionId];\\n        /// NOTE: exchangeRateStored has 18 decimals.\\n        uint256 underlyingAmount;\\n        if (_isSoftVault(pos.underlyingToken)) {\\n            underlyingAmount =\\n                (ICErc20(banks[pos.debtToken].bToken).exchangeRateStored() *\\n                    pos.underlyingVaultShare) /\\n                Constants.PRICE_PRECISION;\\n        } else {\\n            underlyingAmount = pos.underlyingVaultShare;\\n        }\\n        icollValue = oracle.getTokenValue(\\n            pos.underlyingToken,\\n            underlyingAmount\\n        );\\n    }\\n\\n    /// @dev Computes the risk ratio of a specified position.\\n    /// @notice A higher risk ratio implies greater risk associated with the position.\\n    ///         when:  riskRatio = (ov - pv) / cv\\n    ///         where: riskRatio = (debt - positionValue) / isolatedCollateralValue\\n    /// @param positionId ID of the position to assess risk for.\\n    /// @return risk The risk ratio of the position (based on a scale of 1e4).\\n    function getPositionRisk(uint256 positionId) public returns (uint256 risk) {\\n        uint256 pv = getPositionValue(positionId);\\n        uint256 ov = getDebtValue(positionId);\\n        uint256 cv = getIsolatedCollateralValue(positionId);\\n\\n        if (\\n            (cv == 0 && pv == 0 && ov == 0) || pv >= ov /// Closed position or Overcollateralized position\\n        ) {\\n            risk = 0;\\n        } else if (cv == 0) {\\n            /// Sth bad happened to isolated underlying token\\n            risk = Constants.DENOMINATOR;\\n        } else {\\n            risk = ((ov - pv) * Constants.DENOMINATOR) / cv;\\n        }\\n    }\\n\\n    /// @dev Determines if a given position can be liquidated based on its risk ratio.\\n    /// @param positionId ID of the position to check.\\n    /// @return True if the position can be liquidated; otherwise, false.\\n    function isLiquidatable(uint256 positionId) public returns (bool) {\\n        return\\n            getPositionRisk(positionId) >=\\n            banks[positions[positionId].underlyingToken].liqThreshold;\\n    }\\n\\n    /// @dev Liquidates a position by repaying its debt and taking the collateral.\\n    /// @dev Emits a {Liquidate} event.\\n    /// @notice Liquidation can only be triggered if the position is deemed liquidatable \\n    ///         and other conditions are met.\\n    /// @param positionId The unique identifier of the position to liquidate.\\n    /// @param debtToken The token in which the debt is denominated.\\n    /// @param amountCall The amount of debt to be repaid when calling transferFrom.\\n    function liquidate(\\n        uint256 positionId,\\n        address debtToken,\\n        uint256 amountCall\\n    ) external override lock poke(debtToken) {\\n        /// Ensures repayments are allowed at the moment of calling this function.\\n        if (!isRepayAllowed()) revert Errors.REPAY_NOT_ALLOWED();\\n        /// Ensures a non-zero repayment amount is specified.\\n        if (amountCall == 0) revert Errors.ZERO_AMOUNT();\\n        /// Ensures the position is liquidatable.\\n        if (!isLiquidatable(positionId))\\n            revert Errors.NOT_LIQUIDATABLE(positionId);\\n\\n        /// Retrieve the position and associated bank data.\\n        Position storage pos = positions[positionId];\\n        Bank memory bank = banks[pos.underlyingToken];\\n        /// Ensure the position has valid collateral.\\n        if (pos.collToken == address(0))\\n            revert Errors.BAD_COLLATERAL(positionId);\\n\\n        /// Revert liquidation if the repayment hasn't been warmed up \\n        /// following the last state where repayments were paused.\\n        if (\\n            block.timestamp <\\n            repayResumedTimestamp + Constants.LIQUIDATION_REPAY_WARM_UP_PERIOD\\n        ) revert Errors.REPAY_ALLOW_NOT_WARMED_UP();\\n\\n        /// Repay the debt and get details of repayment.\\n        uint256 oldShare = pos.debtShare;\\n        (uint256 amountPaid, uint256 share) = _repay(\\n            positionId,\\n            debtToken,\\n            amountCall\\n        );\\n\\n        /// Calculate the size of collateral and underlying vault share that the liquidator will get.\\n        uint256 liqSize = (pos.collateralSize * share) / oldShare;\\n        uint256 uVaultShare = (pos.underlyingVaultShare * share) / oldShare;\\n\\n        /// Adjust the position's debt and collateral after liquidation.\\n        pos.collateralSize -= liqSize;\\n        pos.underlyingVaultShare -= uVaultShare;\\n\\n        /// Transfer the liquidated collateral (Wrapped LP Tokens) to the liquidator.\\n        IERC1155Upgradeable(pos.collToken).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            pos.collId,\\n            liqSize,\\n            \\\"\\\"\\n        );\\n        /// Transfer underlying collaterals(vault share tokens) to liquidator\\n        if (_isSoftVault(pos.underlyingToken)) {\\n            IERC20Upgradeable(bank.softVault).safeTransfer(\\n                msg.sender,\\n                uVaultShare\\n            );\\n        } else {\\n            IERC1155Upgradeable(bank.hardVault).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                uint256(uint160(pos.underlyingToken)),\\n                uVaultShare,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        /// Emit an event capturing details of the liquidation process.\\n        emit Liquidate(\\n            positionId,\\n            msg.sender,\\n            debtToken,\\n            amountPaid,\\n            share,\\n            liqSize,\\n            uVaultShare\\n        );\\n    }\\n\\n    /// @dev Executes a specific action on a position.\\n    /// @dev Emit an {Execute} event.\\n    /// @notice This can be used for various operations like adjusting collateral, repaying debt, etc.\\n    /// @param positionId Unique identifier of the position, or zero for a new position.\\n    /// @param spell Address of the contract (\\\"spell\\\") that contains the logic for the action to be executed.\\n    /// @param data Data payload to pass to the spell for execution.\\n    function execute(\\n        uint256 positionId,\\n        address spell,\\n        bytes memory data\\n    ) external lock onlyEOAEx returns (uint256) {\\n        if (!whitelistedSpells[spell])\\n            revert Errors.SPELL_NOT_WHITELISTED(spell);\\n        if (positionId == 0) {\\n            positionId = nextPositionId++;\\n            positions[positionId].owner = msg.sender;\\n        } else {\\n            if (positionId >= nextPositionId)\\n                revert Errors.BAD_POSITION(positionId);\\n            if (msg.sender != positions[positionId].owner)\\n                revert Errors.NOT_FROM_OWNER(positionId, msg.sender);\\n        }\\n        POSITION_ID = positionId;\\n        SPELL = spell;\\n\\n        (bool ok, bytes memory returndata) = SPELL.call(data);\\n        if (!ok) {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"bad cast call\\\");\\n            }\\n        }\\n\\n        if (isLiquidatable(positionId)) revert Errors.INSUFFICIENT_COLLATERAL();\\n\\n        POSITION_ID = _NO_ID;\\n        SPELL = _NO_ADDRESS;\\n\\n        emit Execute(positionId, msg.sender);\\n\\n        return positionId;\\n    }\\n\\n    /// @dev Lend tokens to the bank as isolated collateral.\\n    /// @dev Emit a {Lend} event.\\n    /// @notice The tokens lent will be used as collateral in the bank and might earn interest or other rewards.\\n    /// @param token The address of the token to lend.\\n    /// @param amount The number of tokens to lend.\\n    function lend(\\n        address token,\\n        uint256 amount\\n    ) external override inExec poke(token) onlyWhitelistedToken(token) {\\n        if (!isLendAllowed()) revert Errors.LEND_NOT_ALLOWED();\\n\\n        Position storage pos = positions[POSITION_ID];\\n        Bank storage bank = banks[token];\\n        if (pos.underlyingToken != address(0)) {\\n            /// already have isolated collateral, allow same isolated collateral\\n            if (pos.underlyingToken != token)\\n                revert Errors.INCORRECT_UNDERLYING(token);\\n        } else {\\n            pos.underlyingToken = token;\\n        }\\n\\n        IERC20Upgradeable(token).safeTransferFrom(\\n            pos.owner,\\n            address(this),\\n            amount\\n        );\\n        _ensureApprove(token, address(feeManager()), amount);\\n        amount = feeManager().doCutDepositFee(token, amount);\\n\\n        if (_isSoftVault(token)) {\\n            _ensureApprove(token, bank.softVault, amount);\\n            pos.underlyingVaultShare += ISoftVault(bank.softVault).deposit(\\n                amount\\n            );\\n        } else {\\n            _ensureApprove(token, bank.hardVault, amount);\\n            pos.underlyingVaultShare += IHardVault(bank.hardVault).deposit(\\n                token,\\n                amount\\n            );\\n        }\\n\\n        emit Lend(POSITION_ID, msg.sender, token, amount);\\n    }\\n\\n    /// @dev Withdraw isolated collateral tokens previously lent to the bank.\\n    /// @dev Emit a {WithdrawLend} event.\\n    /// @notice This will reduce the isolated collateral and might also reduce the position's overall health.\\n    /// @param token The address of the isolated collateral token to withdraw.\\n    /// @param shareAmount The number of vault share tokens to withdraw.\\n    function withdrawLend(\\n        address token,\\n        uint256 shareAmount\\n    ) external override inExec poke(token) {\\n        if (!isWithdrawLendAllowed()) revert Errors.WITHDRAW_LEND_NOT_ALLOWED();\\n        Position storage pos = positions[POSITION_ID];\\n        Bank memory bank = banks[token];\\n        if (token != pos.underlyingToken) revert Errors.INVALID_UTOKEN(token);\\n        if (shareAmount == type(uint256).max) {\\n            shareAmount = pos.underlyingVaultShare;\\n        }\\n\\n        uint256 wAmount;\\n        if (_isSoftVault(token)) {\\n            _ensureApprove(bank.softVault, bank.softVault, shareAmount);\\n            wAmount = ISoftVault(bank.softVault).withdraw(shareAmount);\\n        } else {\\n            wAmount = IHardVault(bank.hardVault).withdraw(token, shareAmount);\\n        }\\n\\n        pos.underlyingVaultShare -= shareAmount;\\n\\n        _ensureApprove(token, address(feeManager()), wAmount);\\n        wAmount = feeManager().doCutWithdrawFee(token, wAmount);\\n\\n        IERC20Upgradeable(token).safeTransfer(msg.sender, wAmount);\\n\\n        emit WithdrawLend(POSITION_ID, msg.sender, token, wAmount);\\n    }\\n\\n    /// @notice Allows users to borrow tokens from the specified bank.\\n    /// @dev This function must only be called from a spell while under execution.\\n    /// @dev Emit a {Borrow} event.\\n    /// @param token The token to borrow from the bank.\\n    /// @param amount The amount of tokens the user wishes to borrow.\\n    /// @return borrowedAmount Returns the actual amount borrowed from the bank.\\n    function borrow(\\n        address token,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        inExec\\n        poke(token)\\n        onlyWhitelistedToken(token)\\n        returns (uint256 borrowedAmount)\\n    {\\n        if (!isBorrowAllowed()) revert Errors.BORROW_NOT_ALLOWED();\\n        Bank storage bank = banks[token];\\n        Position storage pos = positions[POSITION_ID];\\n        if (pos.debtToken != address(0)) {\\n            /// already have some debts, allow same debt token\\n            if (pos.debtToken != token) revert Errors.INCORRECT_DEBT(token);\\n        } else {\\n            pos.debtToken = token;\\n        }\\n\\n        uint256 totalShare = bank.totalShare;\\n        uint256 totalDebt = _borrowBalanceStored(token);\\n        uint256 share = totalShare == 0\\n            ? amount\\n            : (amount * totalShare).divCeil(totalDebt);\\n        if (share == 0) revert Errors.BORROW_ZERO_SHARE(amount);\\n        bank.totalShare += share;\\n        pos.debtShare += share;\\n\\n        borrowedAmount = _doBorrow(token, amount);\\n        IERC20Upgradeable(token).safeTransfer(msg.sender, borrowedAmount);\\n\\n        emit Borrow(POSITION_ID, msg.sender, token, amount, share);\\n    }\\n\\n    /// @notice Allows users to repay their borrowed tokens to the bank.\\n    /// @dev This function must only be called while under execution.\\n    /// @dev Emit a {Repay} event.\\n    /// @param token The token to repay to the bank.\\n    /// @param amountCall The amount of tokens to be repaid.\\n    function repay(\\n        address token,\\n        uint256 amountCall\\n    ) external override inExec poke(token) onlyWhitelistedToken(token) {\\n        if (!isRepayAllowed()) revert Errors.REPAY_NOT_ALLOWED();\\n        (uint256 amount, uint256 share) = _repay(\\n            POSITION_ID,\\n            token,\\n            amountCall\\n        );\\n        emit Repay(POSITION_ID, msg.sender, token, amount, share);\\n    }\\n\\n    /// @notice Internal function that handles the logic for repaying tokens.\\n    /// @param positionId The position ID which determines the debt to be repaid.\\n    /// @param token The bank token used to repay the debt.\\n    /// @param amountCall The amount specified by the caller to repay by calling `transferFrom`, or -1 for debt size.\\n    /// @return Returns the actual repaid amount and the reduced debt share.\\n    function _repay(\\n        uint256 positionId,\\n        address token,\\n        uint256 amountCall\\n    ) internal returns (uint256, uint256) {\\n        Bank storage bank = banks[token];\\n        Position storage pos = positions[positionId];\\n        if (pos.debtToken != token) revert Errors.INCORRECT_DEBT(token);\\n        uint256 totalShare = bank.totalShare;\\n        uint256 totalDebt = _borrowBalanceStored(token);\\n        uint256 oldShare = pos.debtShare;\\n        uint256 oldDebt = (oldShare * totalDebt).divCeil(totalShare);\\n        if (amountCall > oldDebt) {\\n            amountCall = oldDebt;\\n        }\\n        amountCall = _doERC20TransferIn(token, amountCall);\\n        uint256 paid = _doRepay(token, amountCall);\\n        if (paid > oldDebt) revert Errors.REPAY_EXCEEDS_DEBT(paid, oldDebt); /// prevent share overflow attack\\n        uint256 lessShare = paid == oldDebt\\n            ? oldShare\\n            : (paid * totalShare) / totalDebt;\\n        bank.totalShare -= lessShare;\\n        pos.debtShare -= lessShare;\\n        return (paid, lessShare);\\n    }\\n\\n    /// @notice Allows users to provide additional collateral.\\n    /// @dev Must only be called during execution.\\n    /// @param collToken The ERC1155 token wrapped for collateral (i.e., Wrapped token of LP).\\n    /// @param collId The token ID for collateral (i.e., uint256 format of LP address).\\n    /// @param amountCall The amount of tokens to add as collateral.\\n    function putCollateral(\\n        address collToken,\\n        uint256 collId,\\n        uint256 amountCall\\n    ) external override inExec onlyWhitelistedERC1155(collToken) {\\n        Position storage pos = positions[POSITION_ID];\\n        if (pos.collToken != collToken || pos.collId != collId) {\\n            if (!oracle.isWrappedTokenSupported(collToken, collId))\\n                revert Errors.ORACLE_NOT_SUPPORT_WTOKEN(collToken);\\n            if (pos.collateralSize > 0)\\n                revert Errors.DIFF_COL_EXIST(pos.collToken);\\n            pos.collToken = collToken;\\n            pos.collId = collId;\\n        }\\n        uint256 amount = _doERC1155TransferIn(collToken, collId, amountCall);\\n        pos.collateralSize += amount;\\n        emit PutCollateral(\\n            POSITION_ID,\\n            pos.owner,\\n            msg.sender,\\n            collToken,\\n            collId,\\n            amount\\n        );\\n    }\\n\\n    /// @notice Allows users to withdraw a portion of their collateral.\\n    /// @dev Must only be called during execution.\\n    /// @param amount The amount of tokens to be withdrawn as collateral.\\n    /// @return Returns the amount of collateral withdrawn.\\n    function takeCollateral(\\n        uint256 amount\\n    ) external override inExec returns (uint256) {\\n        Position storage pos = positions[POSITION_ID];\\n        if (amount == type(uint256).max) {\\n            amount = pos.collateralSize;\\n        }\\n        pos.collateralSize -= amount;\\n        IERC1155Upgradeable(pos.collToken).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            pos.collId,\\n            amount,\\n            \\\"\\\"\\n        );\\n        emit TakeCollateral(\\n            POSITION_ID,\\n            msg.sender,\\n            pos.collToken,\\n            pos.collId,\\n            amount\\n        );\\n\\n        return amount;\\n    }\\n\\n    /// @notice Internal function that handles the borrowing logic.\\n    /// @dev Borrows the specified amount of tokens and returns the actual borrowed amount.\\n    /// NOTE: Caller must ensure that bToken interest was already accrued up to this block.\\n    /// @param token The token to borrow.\\n    /// @param amountCall The amount of tokens to be borrowed.\\n    /// @return borrowAmount The actual amount borrowed.\\n    function _doBorrow(\\n        address token,\\n        uint256 amountCall\\n    ) internal returns (uint256 borrowAmount) {\\n        address bToken = banks[token].bToken;\\n\\n        IERC20Upgradeable uToken = IERC20Upgradeable(token);\\n        uint256 uBalanceBefore = uToken.balanceOf(address(this));\\n        if (ICErc20(bToken).borrow(amountCall) != 0)\\n            revert Errors.BORROW_FAILED(amountCall);\\n        uint256 uBalanceAfter = uToken.balanceOf(address(this));\\n\\n        borrowAmount = uBalanceAfter - uBalanceBefore;\\n    }\\n\\n    /// @dev Internal function to handle repayment to the bank. Returns the actual repaid amount.\\n    /// @param token The token used for the repayment.\\n    /// @param amountCall The specified amount for the repay action.\\n    /// NOTE: The caller should ensure that the bToken's interest is updated up to the current block.\\n    function _doRepay(\\n        address token,\\n        uint256 amountCall\\n    ) internal returns (uint256 repaidAmount) {\\n        address bToken = banks[token].bToken;\\n        _ensureApprove(token, bToken, amountCall);\\n        uint256 beforeDebt = _borrowBalanceStored(token);\\n        if (ICErc20(bToken).repayBorrow(amountCall) != 0)\\n            revert Errors.REPAY_FAILED(amountCall);\\n        uint256 newDebt = _borrowBalanceStored(token);\\n        repaidAmount = beforeDebt - newDebt;\\n    }\\n\\n    /// @dev Internal function to handle the transfer of ERC20 tokens into the contract. \\n    /// @param token The ERC20 token to perform transferFrom action.\\n    /// @param amountCall The amount use in the transferFrom call.\\n    /// @return The actual recieved amount.\\n    function _doERC20TransferIn(\\n        address token,\\n        uint256 amountCall\\n    ) internal returns (uint256) {\\n        uint256 balanceBefore = IERC20Upgradeable(token).balanceOf(\\n            address(this)\\n        );\\n        IERC20Upgradeable(token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amountCall\\n        );\\n        uint256 balanceAfter = IERC20Upgradeable(token).balanceOf(\\n            address(this)\\n        );\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    /// @dev Internal function to handle the transfer of ERC1155 tokens into the contract.\\n    /// @param token The ERC1155 token contract address.\\n    /// @param id The specific token ID to be transferred within the ERC1155 contract.\\n    /// @param amountCall The expected amount of the specific token ID to be transferred.\\n    /// @return The amount of tokens received.\\n    function _doERC1155TransferIn(\\n        address token,\\n        uint256 id,\\n        uint256 amountCall\\n    ) internal returns (uint256) {\\n        uint256 balanceBefore = IERC1155Upgradeable(token).balanceOf(\\n            address(this),\\n            id\\n        );\\n        IERC1155Upgradeable(token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            id,\\n            amountCall,\\n            \\\"\\\"\\n        );\\n        uint256 balanceAfter = IERC1155Upgradeable(token).balanceOf(\\n            address(this),\\n            id\\n        );\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    /// @dev Return if the given vault token is soft vault or hard vault\\n    /// @param token The underlying token of the vault to be checked.\\n    /// @return bool True if it's a Soft Vault, False if it's a Hard Vault.\\n    function _isSoftVault(address token) internal view returns (bool) {\\n        return address(ISoftVault(banks[token].softVault).uToken()) == token;\\n    }\\n}\\n\",\"keccak256\":\"0xe7a9f428b077c78078e44cf663785efcf7bce250314ece40f49d2b2a9a0c8ac9\",\"license\":\"MIT\"},\"contracts/interfaces/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IProtocolConfig.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./ICoreOracle.sol\\\";\\n\\n/// @title IBank\\n/// @notice Interface for the bank operations, including lending, borrowing, and management of collateral positions.\\ninterface IBank {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       STRUCTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// Represents the configuration and current state of a bank.\\n    struct Bank {\\n        bool isListed;             /// Indicates if this bank is active.\\n        uint8 index;               /// Index for reverse lookups.\\n        address hardVault;         /// Address of the hard vault.\\n        address softVault;         /// Address of the soft vault.\\n        address bToken;            /// Address of the bToken associated with the bank.\\n        uint256 totalShare;        /// Total shares of debt across all open positions.\\n        uint256 liqThreshold;      /// Liquidation threshold (e.g., 85% for volatile tokens, \\n                                   /// 90% for stablecoins). Base: 1e4\\n    }\\n\\n    /// Represents a position in the bank, including both debt and collateral.\\n    struct Position {\\n        address owner;                /// Address of the position's owner.\\n        address collToken;            /// Address of the ERC1155 token used as collateral.\\n        address underlyingToken;      /// Address of the isolated underlying collateral token.\\n        address debtToken;            /// Address of the debt token.\\n        uint256 underlyingVaultShare; /// Amount of vault share for isolated underlying collateral.\\n        uint256 collId;               /// Token ID of the ERC1155 collateral.\\n        uint256 collateralSize;       /// Amount of wrapped token used as collateral.\\n        uint256 debtShare;            /// Debt share of the given debt token for the bank.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when a new bank is added by the owner.\\n    event AddBank(\\n        address token,        /// The primary token associated with the bank.\\n        address bToken,       /// The corresponding bToken for the bank.\\n        address softVault,    /// Address of the soft vault.\\n        address hardVault             /// Address of the hard vault.\\n    );\\n\\n    /// @notice Emitted when the oracle's address is updated by the owner.\\n    event SetOracle(address oracle);  /// New address of the oracle.\\n\\n    /// @notice Emitted when a Wrapped ERC1155 token is whitelisted or removed by the owner.\\n    event SetWhitelistERC1155(\\n        address indexed token,      /// Address of the Wrapped ERC1155 token.\\n        bool isWhitelisted          /// True if whitelisted, false otherwise.\\n    );\\n\\n    /// @notice Emitted when a token is whitelisted or removed by the owner.\\n    event SetWhitelistToken(\\n        address indexed token,     /// Address of the token.\\n        bool isWhitelisted         /// True if whitelisted, false otherwise.\\n    );\\n\\n    /// @notice Emitted when tokens are lent to the bank.\\n    event Lend(\\n        uint256 positionId,        /// Position ID associated with the lending.\\n        address caller,    /// Address of the spell caller.\\n        address token,     /// Address of the lent token.\\n        uint256 amount             /// Amount of tokens lent.\\n    );\\n\\n    /// @notice Emitted when lent tokens are withdrawn from the bank.\\n    event WithdrawLend(\\n        uint256 positionId,        /// Position ID associated with the withdrawal.\\n        address caller,    /// Address of the spell caller.\\n        address token,     ///Address of the token being withdrawn.\\n        uint256 amount             /// Amount of tokens withdrawn.\\n    );\\n\\n    /// @notice Emitted when a user borrows tokens from a bank.\\n    event Borrow(\\n        uint256 positionId,        /// Position ID associated with the borrowing.\\n        address caller,    /// Address of the spell caller that initiates the borrowing.\\n        address token,     /// Token being borrowed.\\n        uint256 amount,            /// Amount of tokens borrowed.\\n        uint256 share              /// Debt share associated with the borrowed amount.\\n    );\\n\\n    /// @notice Emitted when a user repays borrowed tokens to a bank.\\n    event Repay(\\n        uint256 positionId,        /// Position ID associated with the repayment.\\n        address caller,    /// Address of the spell caller initiating the repayment.\\n        address token,     /// Token being repaid.\\n        uint256 amount,            /// Amount of tokens repaid.\\n        uint256 share              /// Debt share associated with the repaid amount.\\n    );\\n\\n    /// @notice Emitted when a user adds tokens as collateral.\\n    event PutCollateral(\\n        uint256 positionId,        /// Position ID associated with the collateral.\\n        address owner,     /// Owner of the collateral position.\\n        address caller,    /// Address of the spell caller adding the collateral.\\n        address token,     /// Token used as collateral.\\n        uint256 id,                /// ID of the wrapped token.\\n        uint256 amount             /// Amount of tokens put as collateral.\\n    );\\n\\n    /// @notice Emitted when a user retrieves tokens from their collateral.\\n    event TakeCollateral(\\n        uint256 positionId,        /// Position ID associated with the collateral.\\n        address caller,    /// Address of the spell caller retrieving the collateral.\\n        address token,     /// Token taken from the collateral.\\n        uint256 id,                /// ID of the wrapped token.\\n        uint256 amount             /// Amount of tokens taken from collateral.\\n    );\\n\\n    /// @notice Emitted when a position is liquidated.\\n    event Liquidate(\\n        uint256 positionId,           /// Position ID being liquidated.\\n        address liquidator,   /// Address of the user performing the liquidation.\\n        address debtToken,    /// Debt token associated with the position.\\n        uint256 amount,               /// Amount used for liquidation.\\n        uint256 share,                /// Debt share associated with the liquidation.\\n        uint256 positionSize,         /// Size of the position being liquidated.\\n        uint256 underlyingVaultSize   /// Vault size underlying the liquidated position.\\n    );\\n\\n    /// @notice Emitted when a position is executed.\\n    event Execute(\\n        uint256 positionId,        /// Position ID being executed.\\n        address owner      /// Owner of the position.\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Returns the ID of the currently executed position.\\n    /// @return Current position ID.\\n    function POSITION_ID() external view returns (uint256);\\n\\n    /// @notice Returns the address of the currently executed spell.\\n    /// @return Current spell address.\\n    function SPELL() external view returns (address);\\n\\n    /// @notice Returns the current executor's address, which is the owner of the current position.\\n    /// @return Address of the current executor.\\n    function EXECUTOR() external view returns (address);\\n\\n    /// @notice Returns the next available position ID.\\n    /// @return Next position ID.\\n    function nextPositionId() external view returns (uint256);\\n\\n    /// @notice Provides the protocol configuration settings.\\n    function config() external view returns (IProtocolConfig);\\n\\n    /// @notice Retrieves the active fee manager.\\n    function feeManager() external view returns (IFeeManager);\\n\\n    /// @notice Provides the current oracle responsible for price feeds.\\n    function oracle() external view returns (ICoreOracle);\\n\\n    /// @notice Fetches details of a bank given its token.\\n    function getBankInfo(address token) external view returns (\\n        bool isListed,           /// Indicates if the bank is listed.\\n        address bToken,          /// Corresponding bToken of the bank.\\n        uint256 totalShare       /// Total shared debt across all positions in this bank.\\n    );\\n    \\n    /// @notice Computes the total debt value associated with a given position.\\n    /// @dev Should call accrue first to get current debt\\n    /// @param positionId The unique ID of the position.\\n    /// @return The total debt value in USD.\\n    function getDebtValue(uint256 positionId) external returns (uint256);\\n\\n    /// @notice Determines the overall value of a specified position.\\n    /// @param positionId The unique ID of the position.\\n    /// @return The total value of the position in USD.\\n    function getPositionValue(uint256 positionId) external returns (uint256);\\n\\n    /// @notice Computes the isolated collateral value for a particular position.\\n    /// @dev Should call accrue first to get current debt.\\n    /// @param positionId The unique ID of the position.\\n    /// @return icollValue The value of the isolated collateral in USD.\\n    function getIsolatedCollateralValue(\\n        uint256 positionId\\n    ) external returns (uint256 icollValue);\\n\\n    /// @notice Provides comprehensive details about a position using its ID.\\n    /// @param positionId The unique ID of the position.\\n    /// @return A Position struct containing details of the position.\\n    function getPositionInfo(\\n        uint256 positionId\\n    ) external view returns (Position memory);\\n\\n    /// @notice Fetches information about the currently active position.\\n    /// @return A Position struct with details of the current position.\\n    function getCurrentPositionInfo() external view returns (Position memory);\\n\\n    /// @notice Triggers interest accumulation and fetches the updated borrow balance.\\n    /// @param positionId The unique ID of the position.\\n    /// @return The updated debt balance after accruing interest.\\n    function currentPositionDebt(uint256 positionId) external returns (uint256);\\n\\n    /// @notice Deposits tokens into the bank as a lender.\\n    /// @param token The address of the token to deposit.\\n    /// @param amount The amount of tokens to deposit.\\n    function lend(address token, uint256 amount) external;\\n\\n    /// @notice Redeems deposited tokens from the bank.\\n    /// @param token The address of the token to withdraw.\\n    /// @param amount The amount of tokens to redeem.\\n    function withdrawLend(address token, uint256 amount) external;\\n\\n    /// @notice Borrows tokens against collateral from the bank.\\n    /// @param token The address of the token to borrow.\\n    /// @param amount The amount of tokens to borrow.\\n    /// @return The amount of tokens that are borrowed.\\n    function borrow(address token, uint256 amount) external returns (uint256);\\n\\n    /// @notice Repays borrowed tokens to the bank.\\n    /// @param token The address of the token to repay.\\n    /// @param amountCall The amount of tokens to repay.\\n    function repay(address token, uint256 amountCall) external;\\n\\n    /// @notice Increases the collateral backing a position.\\n    /// @param collToken Address of the collateral token.\\n    /// @param collId ID associated with the collateral type (if applicable).\\n    /// @param amountCall Amount of collateral tokens to deposit.\\n    function putCollateral(\\n        address collToken,\\n        uint256 collId,\\n        uint256 amountCall\\n    ) external;\\n\\n    /// @notice Redeems a portion of the collateral backing a position.\\n    /// @param amount Amount of collateral tokens to redeem.\\n    /// @return The actual amount of collateral redeemed.\\n    function takeCollateral(uint256 amount) external returns (uint256);\\n\\n    /// @notice Liquidate a specific position.\\n    /// @param positionId ID of the position to liquidate.\\n    /// @param debtToken Address of the debt token.\\n    /// @param amountCall Amount specified for the liquidation call.\\n    function liquidate(\\n        uint256 positionId,\\n        address debtToken,\\n        uint256 amountCall\\n    ) external;\\n\\n    /// @notice Accrues interest for a given token.\\n    /// @param token Address of the token to accrue interest for.\\n    function accrue(address token) external;\\n}\\n\",\"keccak256\":\"0x19401d73605f5a24cac8da1dd7cd0e194b1e2e2c34f902a916cfc3a12eb2372e\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\n/// @title IBaseOracle\\n/// @notice Interface for a basic oracle that provides price data for assets.\\ninterface IBaseOracle {\\n    /// @notice Returns the USD value of a given ERC-20 token, normalized to 1e18 decimals.\\n    /// @dev The value returned is multiplied by 10**18 to maintain precision.\\n    /// @param token Address of the ERC-20 token for which the price is requested.\\n    /// @return The USD price of the given token, multiplied by 10**18.\\n    function getPrice(address token) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f1ac0fc8a41365c1c8fdc16f5851e84e49b937b41a86b4f18c8cf266d35daf8\",\"license\":\"MIT\"},\"contracts/interfaces/ICoreOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IBaseOracle.sol\\\";\\n\\n/// @title ICoreOracle\\n/// @notice Interface for the CoreOracle contract which provides price feed data for assets in the Blueberry protocol.\\ninterface ICoreOracle is IBaseOracle {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Event emitted when the owner sets a new oracle route for a given token.\\n    /// @param token The ERC20 token for which the oracle route is set.\\n    /// @param route The address of the oracle route.\\n    event SetRoute(address indexed token, address route);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Check if the given ERC20 token is supported by the oracle.\\n    /// @param token The ERC20 token to check support for.\\n    /// @return A boolean indicating whether the token is supported or not.\\n    function isTokenSupported(address token) external returns (bool);\\n\\n    /// @notice Check if the oracle supports the underlying token of a given ERC1155 wrapper.\\n    /// @dev Only meant to validate wrappers of the Blueberry protocol, such as WERC20.\\n    /// @param token ERC1155 token address to check support for.\\n    /// @param tokenId ERC1155 token id to check support for.\\n    /// @return A boolean indicating whether the wrapped token is supported or not.\\n    function isWrappedTokenSupported(\\n        address token,\\n        uint256 tokenId\\n    ) external returns (bool);\\n\\n    /// @notice Returns the USD value of a specific wrapped ERC1155 token.\\n    /// @param token ERC1155 token address.\\n    /// @param id ERC1155 token id.\\n    /// @param amount Amount of the token for which to get the USD value, normalized to 1e18 decimals.\\n    /// @return The USD value of the given wrapped token amount.\\n    function getWrappedTokenValue(\\n        address token,\\n        uint256 id,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /// @notice Returns the USD value of a given amount of a specific ERC20 token.\\n    /// @param token ERC20 token address.\\n    /// @param amount Amount of the ERC20 token for which to get the USD value.\\n    /// @return The USD value of the given token amount.\\n    function getTokenValue(\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x2aa5eef818df12165d98b67312f8ea8c7d40a00b395da599ba8a884ebbdfda93\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Wrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\n/// @title IERC20Wrapper\\n/// @notice Interface for the ERC20Wrapper contract which allows the wrapping\\n///         of ERC-20 tokens with associated ERC-1155 token IDs.\\ninterface IERC20Wrapper {\\n    /// @notice Fetches the underlying ERC-20 token address associated with the provided ERC-1155 token ID.\\n    /// @param tokenId The ERC-1155 token ID for which the underlying ERC-20 token address is to be fetched.\\n    /// @return The address of the underlying ERC-20 token.\\n    function getUnderlyingToken(\\n        uint256 tokenId\\n    ) external view returns (address);\\n\\n    /// @notice Fetches pending rewards for a particular ERC-1155 token ID and given amount.\\n    /// @param id The ERC-1155 token ID for which the pending rewards are to be fetched.\\n    /// @param amount The amount for which pending rewards are to be calculated.\\n    /// @return tokens A list of addresses representing reward tokens.\\n    /// @return amounts A list of amounts corresponding to each reward token in the `tokens` list.\\n    function pendingRewards(\\n        uint256 id,\\n        uint amount\\n    ) external returns (address[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0x4fce0d9b53b93859d539735379c3c8fbe4eff071a1f898356114c3aa5f02613d\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @title IFeeManager\\n/// @notice Interface for FeeManager, the central fee management contract in the Blueberry Protocol.\\n/// @dev FeeManager is responsible for cutting various fees in the protocol and sending them to the treasury.\\ninterface IFeeManager {\\n\\n    /// @notice Calculates and deducts the deposit fee when lending \\n    ///         isolated underlying assets to Blueberry Money Market.\\n    /// @param token The address of the underlying token for which the deposit fee is to be calculated.\\n    /// @param amount The gross deposit amount before fees.\\n    /// @return The net deposit amount after the fee deduction.\\n    function doCutDepositFee(address token, uint256 amount)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Calculates and deducts the withdrawal fee when redeeming \\n    ///         isolated underlying tokens from Blueberry Money Market.\\n    /// @param token The address of the underlying token for which the withdrawal fee is to be calculated.\\n    /// @param amount The gross withdrawal amount before fees.\\n    /// @return The net withdrawal amount after the fee deduction.\\n    function doCutWithdrawFee(address token, uint256 amount)\\n        external\\n        returns (uint256);\\n    /// @notice Calculates and deducts the performance fee from the \\n    /// rewards generated due to the leveraged position.\\n    /// @param token The address of the reward token for which the reward fee is to be calculated.\\n    /// @param amount The gross reward amount before fees.\\n    /// @return The net reward amount after the fee deduction.\\n    function doCutRewardsFee(address token, uint256 amount)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Calculates and deducts the vault withdrawal fee if \\n    ///the withdrawal occurs within the specified fee window in the Blueberry Money Market.\\n    /// @param token The address of the underlying token for which the vault withdrawal fee is to be calculated.\\n    /// @param amount The gross vault withdrawal amount before fees.\\n    /// @return The net vault withdrawal amount after the fee deduction.\\n    function doCutVaultWithdrawFee(address token, uint256 amount)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x68a7615b3fcf804baf81fd179eec9a998f0eb854879d96db6a633a0da608b235\",\"license\":\"MIT\"},\"contracts/interfaces/IHardVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\nimport \\\"./IERC20Wrapper.sol\\\";\\n\\n/// @title IHardVault\\n/// @notice Interface for the HardVault, which integrates ERC1155 tokens with the protocol's underlying assets.\\n/// @dev This interface facilitates the conversion between underlying ERC-20\\n///      tokens and corresponding ERC-1155 representations within the protocol.\\ninterface IHardVault is IERC1155Upgradeable {\\n    /// @notice Retrieves the underlying ERC-20 token address corresponding to a specific ERC-1155 token ID.\\n    /// @param tokenId The ERC-1155 token ID to fetch the underlying ERC-20 token for.\\n    /// @return Address of the underlying ERC-20 token associated with the provided token ID.\\n    function getUnderlyingToken(\\n        uint256 tokenId\\n    ) external view returns (address);\\n\\n    /// @notice Returns the balance of the underlying ERC-20 token for a specific user.\\n    /// @param uToken Address of the ERC-20 token to query.\\n    /// @param user Address of the user to query the balance for.\\n    /// @return Balance of the underlying ERC-20 token for the given user.\\n    function balanceOfERC20(\\n        address uToken,\\n        address user\\n    ) external view returns (uint256);\\n\\n    /// @notice Deposit a certain amount of ERC-20 tokens to receive an equivalent amount of ERC-1155 representations.\\n    /// @param uToken The address of the ERC-20 token to be deposited.\\n    /// @param amount The quantity of ERC-20 tokens to be deposited.\\n    /// @return shareAmount The amount of ERC-1155 tokens minted in exchange for the deposited ERC-20 tokens.\\n    function deposit(\\n        address uToken,\\n        uint256 amount\\n    ) external returns (uint256 shareAmount);\\n\\n    /// @notice Withdraw a certain amount of ERC-1155 tokens to \\n    ///         receive an equivalent amount of underlying ERC-20 tokens.\\n    /// @param uToken The address of the underlying ERC-20 token to be withdrawn.\\n    /// @param shareAmount The quantity of ERC-1155 tokens to be withdrawn.\\n    /// @return withdrawAmount The amount of ERC-20 tokens returned in exchange for the withdrawn ERC-1155 tokens.\\n    function withdraw(\\n        address uToken,\\n        uint256 shareAmount\\n    ) external returns (uint256 withdrawAmount);\\n}\\n\",\"keccak256\":\"0xb154b1b8c093de237692dc27521072f52495a655afb042f907e38b781bdf2d2a\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./IFeeManager.sol\\\";\\n\\n/// @title IProtocolConfig\\n/// @notice Interface for the Protocol Configuration, \\n///         encapsulating various fees and related configuration parameters.\\n/// @dev This interface defines methods to retrieve fees \\n///      and related parameters that govern the behavior of the protocol.\\ninterface IProtocolConfig {\\n\\n    /// @notice Retrieve the deposit fee rate applied when users deposit into the protocol.\\n    /// @return The deposit fee rate.\\n    function depositFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal fee rate applied when users withdraw from the protocol.\\n    /// @return The withdrawal fee rate.\\n    function withdrawFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the reward fee rate applied when users claim rewards from the protocol.\\n    /// @return The reward fee rate.\\n    function rewardFee() external view returns (uint256);\\n\\n    /// @notice Get the address where protocol's collected fees are stored and managed.\\n    /// @return The treasury address of the protocol.\\n    function treasury() external view returns (address);\\n\\n    /// @notice Retrieve the fee rate applied for withdrawals from vaults.\\n    /// @return The fee rate for vault withdrawals.\\n    function withdrawVaultFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the window of time where the vault withdrawal fee is applied.\\n    /// @return The window of time where the vault withdrawal fee is applied.\\n    function withdrawVaultFeeWindow() external view returns (uint256);\\n\\n    /// @notice Retrieve the start time of the window of time where the vault withdrawal fee is applied.\\n    /// @return The start time of the window of time where the vault withdrawal fee is applied.\\n    function withdrawVaultFeeWindowStartTime() external view returns (uint256);\\n\\n    /// @notice Get the fee manager that handles fee calculations and distributions.\\n    /// @return An instance of the IFeeManager interface that manages fees within the protocol.\\n    function feeManager() external view returns (IFeeManager);\\n}\\n\",\"keccak256\":\"0xcfc950eee69407755e5ed75e302f601c6d0e76cf06091a4760b8a81d6d7e8328\",\"license\":\"MIT\"},\"contracts/interfaces/ISoftVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./compound/ICErc20.sol\\\";\\n\\n/// @title ISoftVault\\n/// @notice Interface for the SoftVault, allowing deposits and withdrawals of assets.\\n/// @dev The SoftVault is responsible for handling user deposits, \\n///      withdrawals, and interactions with underlying Blueberry Money Market bTokens.\\ninterface ISoftVault is IERC20Upgradeable {\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                       EVENTS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Event emitted when an account deposits assets.\\n    /// @param account Address of the account that deposited.\\n    /// @param amount The amount of underlying assets deposited.\\n    /// @param shareAmount The corresponding amount of vault shares minted.\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 shareAmount\\n    );\\n\\n    /// @notice Event emitted when an account withdraws assets.\\n    /// @param account Address of the account that withdrew.\\n    /// @param amount The amount of underlying assets withdrawn.\\n    /// @param shareAmount The corresponding amount of vault shares burned.    \\n    event Withdrawn(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 shareAmount\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                      FUNCTIONS\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Get the corresponding Blueberry Money Market bToken for this vault.\\n    /// @return A Blueberry Money Market bToken interface.\\n    function bToken() external view returns (ICErc20);\\n\\n    /// @notice Get the underlying ERC20 token for this vault.\\n    /// @return An ERC20 interface of the underlying token.\\n    function uToken() external view returns (IERC20Upgradeable);\\n\\n    /// @notice Deposit a specified amount of the underlying asset into the vault.\\n    /// @dev This function will convert the deposited assets into the corresponding bToken.\\n    /// @param amount The amount of the underlying asset to deposit.\\n    /// @return shareAmount The amount of vault shares minted for the deposit.\\n    function deposit(uint256 amount) external returns (uint256 shareAmount);\\n\\n    /// @notice Withdraw a specified amount of the underlying asset from the vault.\\n    /// @dev This function will convert the corresponding bToken back into the underlying asset.\\n    /// @param amount The amount of vault shares to redeem.\\n    /// @return withdrawAmount The amount of the underlying asset withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 withdrawAmount);\\n}\\n\",\"keccak256\":\"0x1ad462171cadadbbae6f385203eee532acc17c306d5a55662aa6c3c694bf5b62\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface ICErc20 {\\n    function decimals() external view returns (uint8);\\n\\n    function underlying() external view returns (address);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function borrowBalanceStored(\\n        address account\\n    ) external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x9de70f727ed2b88a1567c8a232e97ec5de078a970b7975038d6d549c44dfe0b7\",\"license\":\"MIT\"},\"contracts/libraries/BBMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\n// @title BBMath library\\n// @notice A library facilitating all math operations required by the Blueberry Protocol.\\nlibrary BBMath {\\n    \\n    /// @notice Rounds up the result of division between two numbers.\\n    /// @param a Numerator.\\n    /// @param b Denominator.\\n    /// @return The result of the division, rounded up.\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    /// @notice Calculates the square root of a number using the Babylonian method.\\n    /// @dev This function uses bit manipulation to efficiently estimate square roots.\\n    ///      The function iteratively refines the approximation, and after seven iterations,\\n    ///      the result is very close to the actual square root.\\n    /// @param x The number to compute the square root of.\\n    /// @return The estimated square root of x.\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n\\n        /// Bitwise operations to determine the magnitude of the input\\n        /// and position our initial approximation (r) near the actual square root.\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n\\n        /// Refinement using Babylonian method\\n        /// This iterative approach refines our approximation with every iteration.\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; /// Seven iterations should be enough\\n\\n        /// Determine the closest approximation by comparing r and r1.\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xca5190446bd69aa9b4824f999042b7078fe93b2d1e6e9e3033ac4865968abea5\",\"license\":\"MIT\"},\"contracts/utils/BlueBerryConst.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\n/// title BlueberryConst\\n/// @notice containing all general constants used in Blueberry protocol\\npragma solidity 0.8.16;\\n\\n/// @dev Common denominator for percentage-based calculations.\\nuint256 constant DENOMINATOR = 10000;\\n\\n/// @dev Minimum threshold for liquidity operations, represented as a fraction of the DENOMINATOR.\\nuint256 constant MIN_LIQ_THRESHOLD = 8000; // represent 80%\\n\\n/// @dev Precision factor to maintain price accuracy.\\nuint256 constant PRICE_PRECISION = 1e18;\\n\\n/// @dev Maximum allowed price deviation, represented as a fraction of the DENOMINATOR.\\nuint256 constant MAX_PRICE_DEVIATION = 1000; // represent 10%\\n\\n/// @dev Minimum time interval for specific time-dependent operations.\\nuint32 constant MIN_TIME_GAP = 1 hours;\\n\\n/// @dev Maximum time interval for specific time-dependent operations.\\nuint32 constant MAX_TIME_GAP = 2 days;\\n\\n/// @dev Maximum allowed fee rate, represented as a fraction of the DENOMINATOR.\\nuint256 constant MAX_FEE_RATE = 2000; // represent 20%\\n\\n/// @dev Maximum allowed time for vault withdrawal fee calculations.\\nuint256 constant MAX_WITHDRAW_VAULT_FEE_WINDOW = 60 days;\\n\\n/// @dev Maximum delay permitted for swap operations.\\nuint32 constant MAX_DELAY_ON_SWAP = 2 hours;\\n\\n/// @dev Allowed grace period time for sequencer operations.\\nuint32 constant SEQUENCER_GRACE_PERIOD_TIME = 3600;\\n\\n/// @dev Precision factor for Chainlink price feed values.\\nuint256 constant CHAINLINK_PRICE_FEED_PRECISION = 1e8;\\n\\n/// @dev Warm-up period before a liquidation repayment can be initiated.\\nuint256 constant LIQUIDATION_REPAY_WARM_UP_PERIOD = 4 hours;\\n\",\"keccak256\":\"0xc72e559e5caa385508ef3158993ec99e13e89b4c4b0b40156b34c0fb710e5952\",\"license\":\"MIT\"},\"contracts/utils/BlueBerryErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\n/// title BlueberryErrors\\n/// @notice containing all errors used in Blueberry protocol\\npragma solidity 0.8.16;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                COMMON ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an action involves zero amount of tokens.\\nerror ZERO_AMOUNT();\\n\\n/// @notice Thrown when the address provided is the zero address.\\nerror ZERO_ADDRESS();\\n\\n/// @notice Thrown when the lengths of input arrays do not match.\\nerror INPUT_ARRAY_MISMATCH();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                ORACLE ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the delay time exceeds allowed limits.\\nerror TOO_LONG_DELAY(uint256 delayTime);\\n\\n/// @notice Thrown when there's no maximum delay set for a token.\\nerror NO_MAX_DELAY(address token);\\n\\n/// @notice Thrown when the price information for a token is outdated.\\nerror PRICE_OUTDATED(address token);\\n\\n/// @notice Thrown when there's no symbol mapping for the token.\\nerror NO_SYM_MAPPING(address token);\\n\\n/// @notice Thrown when the price obtained is negative.\\nerror PRICE_NEGATIVE(address token);\\n\\n/// @notice Thrown when the sequencer is offline\\nerror SEQUENCER_DOWN(address sequencer);\\n\\n/// @notice Thrown when the grace period for a sequencer is not over yet.\\nerror SEQUENCER_GRACE_PERIOD_NOT_OVER(address sequencer);\\n\\n/// @notice Thrown when the price deviation exceeds allowed limits.\\nerror OUT_OF_DEVIATION_CAP(uint256 deviation);\\n\\n/// @notice Thrown when the number of sources exceeds the allowed length.\\nerror EXCEED_SOURCE_LEN(uint256 length);\\n\\n/// @notice Thrown when no primary source is available for the token.\\nerror NO_PRIMARY_SOURCE(address token);\\n\\n/// @notice Thrown when no valid price source is available for the token.\\nerror NO_VALID_SOURCE(address token);\\n\\n/// @notice Thrown when the deviation value exceeds the threshold.\\nerror EXCEED_DEVIATION();\\n\\n/// @notice Thrown when the mean price is below the acceptable threshold.\\nerror TOO_LOW_MEAN(uint256 mean);\\n\\n/// @notice Thrown when no mean price is set for the token.\\nerror NO_MEAN(address token);\\n\\n/// @notice Thrown when no stable pool exists for the token.\\nerror NO_STABLEPOOL(address token);\\n\\n/// @notice Thrown when the price fetch process fails for a token.\\nerror PRICE_FAILED(address token);\\n\\n/// @notice Thrown when the liquidation threshold is set too high.\\nerror LIQ_THRESHOLD_TOO_HIGH(uint256 threshold);\\n\\n/// @notice Thrown when the liquidation threshold is set too low.\\nerror LIQ_THRESHOLD_TOO_LOW(uint256 threshold);\\n\\n/// @notice Thrown when the oracle doesn't support a specific token.\\nerror ORACLE_NOT_SUPPORT(address token);\\n\\n/// @notice Thrown when the oracle doesn't support a specific LP pair token.\\nerror ORACLE_NOT_SUPPORT_LP(address lp);\\n\\n/// @notice Thrown when the oracle doesn't support a specific wToken.\\nerror ORACLE_NOT_SUPPORT_WTOKEN(address wToken);\\n\\n/// @notice Thrown when there is no route to fetch data for the oracle\\nerror NO_ORACLE_ROUTE(address token);\\n\\n/// @notice Thrown when a value is out of an acceptable range.\\nerror VALUE_OUT_OF_RANGE();\\n\\n/// @notice Thrown when specified limits are incorrect.\\nerror INCORRECT_LIMITS();\\n\\n/// @notice Thrown when Curve LP is already registered.\\nerror CRV_LP_ALREADY_REGISTERED(address lp);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            GENERAL SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the caller isn't recognized as a bank.\\nerror NOT_BANK(address caller);\\n\\n/// @notice Thrown when refunding ETH encounters an issue.\\nerror REFUND_ETH_FAILED(uint256 balance);\\n\\n/// @notice Thrown when a transaction isn't initiated by WETH.\\nerror NOT_FROM_WETH(address from);\\n\\n/// @notice Thrown when the liquidity pool isn't whitelisted\\nerror LP_NOT_WHITELISTED(address lp);\\n\\n/// @notice Thrown when the collateral doesn't exist for a strategy.\\nerror COLLATERAL_NOT_EXIST(uint256 strategyId, address colToken);\\n\\n/// @notice Thrown when the strategy ID doesn't correspond to an existing strategy.\\nerror STRATEGY_NOT_EXIST(address spell, uint256 strategyId);\\n\\n/// @notice Thrown when the position size exceeds maximum limits.\\nerror EXCEED_MAX_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is below minimum requirements.\\nerror EXCEED_MIN_POS_SIZE(uint256 strategyId);\\n\\n/// @notice Thrown when the loan-to-value ratio exceeds allowed maximum.\\nerror EXCEED_MAX_LTV();\\n\\n/// @notice Thrown when the strategy ID provided is incorrect.\\nerror INCORRECT_STRATEGY_ID(uint256 strategyId);\\n\\n/// @notice Thrown when the position size is invalid.\\nerror INVALID_POS_SIZE();\\n\\n/// @notice Thrown when an incorrect liquidity pool token is provided.\\nerror INCORRECT_LP(address lpToken);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror INCORRECT_PID(uint256 pid);\\n\\n/// @notice Thrown when an incorrect collateral token is provided.\\nerror INCORRECT_COLTOKEN(address colToken);\\n\\n/// @notice Thrown when an incorrect underlying token is provided.\\nerror INCORRECT_UNDERLYING(address uToken);\\nerror INCORRECT_DEBT(address debtToken);\\nerror NOT_FROM_UNIV3(address sender);\\nerror SWAP_FAILED(address swapToken);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CURVE SPELL ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when no gauge is present.\\nerror NO_GAUGE();\\n\\n/// @notice Thrown when a gauge already exists for the provided pid and gid.\\nerror EXISTING_GAUGE(uint256 pid, uint256 gid);\\n\\n/// @notice Thrown when no Curve pool is found for the given pid.\\nerror NO_CURVE_POOL(uint256 pid);\\n\\n/// @notice Thrown when no LP has been registered.\\nerror NO_LP_REGISTERED(address lp);\\n\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                VAULT ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when borrowing from the vault fails.\\nerror BORROW_FAILED(uint256 amount);\\n\\n/// @notice Thrown when repaying to the vault fails.\\nerror REPAY_FAILED(uint256 amount);\\n\\n/// @notice Thrown when lending to the vault fails.\\nerror LEND_FAILED(uint256 amount);\\n\\n/// @notice Thrown when redeeming from the vault fails.\\nerror REDEEM_FAILED(uint256 amount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                WRAPPER ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when an invalid token ID is provided.\\nerror INVALID_TOKEN_ID(uint256 tokenId);\\n\\n/// @notice Thrown when an incorrect pool ID is provided.\\nerror BAD_PID(uint256 pid);\\n\\n/// @notice Thrown when a mismatch in reward per share is detected.\\nerror BAD_REWARD_PER_SHARE(uint256 rewardPerShare);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                BANK ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a function is called without a required execution flag.\\nerror NOT_UNDER_EXECUTION();\\n\\n/// @notice Thrown when a transaction isn't initiated \\n/// by an externally owned account (EOA).\\nerror NOT_EOA(address from);\\n\\n/// @notice Thrown when a transaction isn't initiated by the expected spell.\\nerror NOT_FROM_SPELL(address from);\\n\\n/// @notice Thrown when the sender is not the owner of a given position ID.\\nerror NOT_FROM_OWNER(uint256 positionId, address sender);\\n\\n\\n/// @notice Thrown when a spell address isn't whitelisted.\\nerror SPELL_NOT_WHITELISTED(address spell);\\n\\n/// @notice Thrown when a token isn't whitelisted.\\nerror TOKEN_NOT_WHITELISTED(address token);\\n\\n/// @notice Thrown when a bank isn't listed for a given token.\\nerror BANK_NOT_LISTED(address token);\\n\\n/// @notice Thrown when a bank is already listed for a given token.\\nerror BANK_ALREADY_LISTED();\\n\\n/// @notice Thrown when the bank limit is reached.\\nerror BANK_LIMIT();\\n\\n/// @notice Thrown when the BTOKEN is already added.\\nerror BTOKEN_ALREADY_ADDED();\\n\\n/// @notice Thrown when the lending action isn't allowed.\\nerror LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when the borrowing action isn't allowed.\\nerror BORROW_NOT_ALLOWED();\\n\\n/// @notice Thrown when the repaying action isn't allowed.\\nerror REPAY_NOT_ALLOWED();\\n\\n/// @notice Thrown when the redeeming action isn't allowed.\\nerror WITHDRAW_LEND_NOT_ALLOWED();\\n\\n/// @notice Thrown when certain actions are locked.\\nerror LOCKED();\\n\\n/// @notice Thrown when an action isn't executed.\\nerror NOT_IN_EXEC();\\n\\n/// @notice Thrown when the repayment allowance hasn't been warmed up.\\nerror REPAY_ALLOW_NOT_WARMED_UP();\\n\\n/// @notice Thrown when a different collateral type exists.\\nerror DIFF_COL_EXIST(address collToken);\\n\\n/// @notice Thrown when a position is not eligible for liquidation.\\nerror NOT_LIQUIDATABLE(uint256 positionId);\\n\\n/// @notice Thrown when a position is flagged as bad or invalid.\\nerror BAD_POSITION(uint256 posId);\\n\\n/// @notice Thrown when collateral for a specific position is flagged as bad or invalid.\\nerror BAD_COLLATERAL(uint256 positionId);\\n\\n/// @notice Thrown when there's insufficient collateral for an operation.\\nerror INSUFFICIENT_COLLATERAL();\\n\\n/// @notice Thrown when an attempted repayment exceeds the actual debt.\\nerror REPAY_EXCEEDS_DEBT(uint256 repay, uint256 debt);\\n\\n/// @notice Thrown when an invalid utility token is provided.\\nerror INVALID_UTOKEN(address uToken);\\n\\n/// @notice Thrown when a borrow operation results in zero shares.\\nerror BORROW_ZERO_SHARE(uint256 borrowAmount);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            CONFIGURATION ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when slippage exceeds the allowed limit.\\nerror EXCEED_SLIPPAGE(uint256 ratio);\\n\\n/// @notice Thrown when a certain ratio is too high for an operation.\\nerror RATIO_TOO_HIGH(uint256 ratio);\\n\\n/// @notice Thrown when an invalid fee distribution is detected.\\nerror INVALID_FEE_DISTRIBUTION();\\n\\n/// @notice Thrown when no treasury is set for fee distribution.\\nerror NO_TREASURY_SET();\\n\\n/// @notice Thrown when a fee window has already started.\\nerror FEE_WINDOW_ALREADY_STARTED();\\n\\n/// @notice Thrown when a fee window duration is too long.\\nerror FEE_WINDOW_TOO_LONG(uint256 windowTime);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                UTILITY ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when a cast operation fails.\\nerror CAST();\\n\\n/// @notice Thrown when an operation has surpassed its deadline.\\nerror EXPIRED(uint256 deadline);\\n\",\"keccak256\":\"0x8e02bff5533d9c0f73ccad89c6b292c75db6e36baabf918004ee078ffb9bbdbe\",\"license\":\"MIT\"},\"contracts/utils/ERC1155NaiveReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/// @title ERC1155NaiveReceiver\\n/// @notice A receiver contract that naively accepts all ERC1155 transfers.\\ncontract ERC1155NaiveReceiver is IERC1155Receiver {\\n    /// @notice Handle the receipt of a single ERC1155 token type.\\n    /// @dev This function is called at the end of a \\n    /// `safeTransferFrom` after the balance has been updated.\\n    function onERC1155Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* id */,\\n        uint256 /* value */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// @notice Handle the receipt of multiple ERC1155 token types.\\n    /// @dev This function is called at the end of a \\n    /// `safeBatchTransferFrom` after the balances have been updated.\\n    function onERC1155BatchReceived(\\n        address /* operator */,\\n        address /* from */,\\n        uint256[] calldata /* ids */,\\n        uint256[] calldata /* values */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /// @notice Checks if the contract supports a given interface.\\n    /// @dev Returns true if the interfaceId is 0x01ffc9a7 (IERC1155Receiver).\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) external view virtual override returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xe2638915bd88e9c1c401e2f08f70b14a0bb744b8c7eca191256741d0f878d584\",\"license\":\"MIT\"},\"contracts/utils/EnsureApprove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d\\n*/\\n\\npragma solidity 0.8.16;\\n\\n/// @title EnsureApprove\\n/// @notice Helper to ensure approvals are set correctly\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract EnsureApprove {\\n    /// @dev Reset approval to zero and then approve spender with amount\\n    /// @param token Address of token to approve\\n    /// @param spender Address to approve\\n    /// @param amount Amount to approve\\n    function _ensureApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        IERC20(token).approve(spender, 0);\\n        IERC20(token).approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda03a819ff03706270cd8a6e0baf3351780fe253a3ab7579cd1f3bbc6ca23813\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b614d7380620000f46000396000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c806380c3b8c2116101de578063bc197c811161010f578063d7ac71ff116100ad578063f23a6e611161007c578063f23a6e6114610a29578063f2fde38b14610a49578063f6ff6b1214610a5c578063f70aedd914610a6f57600080fd5b8063d7ac71ff146109dd578063daf9c210146109e6578063dd6f3c7014610a09578063e73c4e2514610a1c57600080fd5b8063c9a4bb3f116100e9578063c9a4bb3f146109b6578063d05e44a4146109bf578063d0fb0203146109c8578063d2ffc9f3146109d057600080fd5b8063bc197c8114610955578063bd83eb4c14610990578063c0177bd5146109a357600080fd5b80639548f37e1161017c578063aed023dc11610156578063aed023dc146108ff578063b3c26e9c14610912578063b43aa79a1461091f578063b86a0aaa1461094257600080fd5b80639548f37e1461082857806399fbab881461083b578063a2fb342d146108ec57600080fd5b80638b00e196116101b85780638b00e196146107de5780638da5cb5b146107f15780639042dad51461080257806394d95d051461081557600080fd5b806380c3b8c21461070e57806386c0dc88146107b2578063899346c7146107d557600080fd5b806349aa2e81116102c3578063715018a6116102615780637b79413a116102305780637b79413a146106175780637cbdae6f146106d55780637dc0d1d0146106e85780637de3fa67146106fb57600080fd5b8063715018a6146105d657806376636722146105de57806379502c55146105f157806379bd1eac1461060457600080fd5b806362548d8c1161029d57806362548d8c1461057d578063630dc7cb146105905780636680ac0b146105b0578063710a9f68146105c357600080fd5b806349aa2e81146104d95780634b8a3529146104e6578063519f5099146104f957600080fd5b806322867d7811610330578063314568d91161030a578063314568d91461047d57806338bd678a14610490578063391feebb146104a3578063485cc955146104c657600080fd5b806322867d781461044a578063269a4bad1461045d57806326e533501461047057600080fd5b8063071feca31161036c578063071feca3146103f85780630e5641e61461040b5780630ebcce7f14610414578063211a44431461043757600080fd5b806301ffc9a71461039357806303de6355146103cc5780630639282e146103e1575b600080fd5b6103b76103a13660046143dc565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b6103df6103da366004614452565b610a77565b005b6103ea606d5481565b6040519081526020016103c3565b6103df6104063660046144cc565b610cf0565b6103ea606c5481565b6103b76104223660046144fe565b60706020526000908152604090205460ff1681565b6103b761044536600461451b565b610d0b565b6103df610458366004614534565b610d47565b6103ea61046b36600461451b565b610e95565b606c5460041615156103b7565b6103df61048b366004614560565b610ec9565b6103df61049e366004614674565b61113f565b6103b76104b13660046144fe565b60766020526000908152604090205460ff1681565b6103df6104d43660046146a9565b611183565b606c5460011615156103b7565b6103ea6104f4366004614534565b61135e565b61050c61050736600461451b565b6115e6565b6040516103c3919060006101008201905060018060a01b03808451168352806020850151166020840152806040850151166040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b6103df61058b366004614452565b61166c565b61059861177b565b6040516001600160a01b0390911681526020016103c3565b6103df6105be3660046144fe565b6117bf565b6103ea6105d13660046146e2565b611874565b6103df611b23565b606854610598906001600160a01b031681565b606954610598906001600160a01b031681565b6103df610612366004614793565b611b37565b6106b06106253660046144fe565b6001600160a01b038082166000908152606f6020908152604091829020825160e081018452815460ff8082161515808452610100830490911694830194909452620100009004851693810193909352600181015484166060840152600281015490931660808301819052600384015460a0840181905260049094015460c09093019290925293909250565b6040805193151584526001600160a01b039092166020840152908201526060016103c3565b6103df6106e336600461451b565b611ecb565b606a54610598906001600160a01b031681565b6103df610709366004614452565b611f09565b61076a61071c3660046144fe565b606f602052600090815260409020805460018201546002830154600384015460049094015460ff808516956101008604909116946001600160a01b0362010000909104811694811693169187565b60408051971515885260ff90961660208801526001600160a01b0394851695870195909552918316606086015291909116608084015260a083015260c082015260e0016103c3565b6103b76107c03660046144fe565b60756020526000908152604090205460ff1681565b6103ea606b5481565b6103ea6107ec36600461451b565b612018565b6033546001600160a01b0316610598565b6103ea61081036600461451b565b612196565b6103ea61082336600461451b565b61222c565b6103df6108363660046147cb565b6123ea565b61089d61084936600461451b565b607160205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b0396871697958716969485169593909416939192909188565b604080516001600160a01b03998a168152978916602089015295881695870195909552959092166060850152608084015260a083015260c082019290925260e0810191909152610100016103c3565b6103df6108fa366004614534565b612749565b6103df61090d36600461481c565b612b23565b606c5460081615156103b7565b6103b761092d3660046144fe565b60746020526000908152604090205460ff1681565b6103ea61095036600461451b565b612bf6565b6109776109633660046148a5565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b031990911681526020016103c3565b6103ea61099e36600461451b565b612f69565b6103ea6109b136600461451b565b6131ca565b6103ea60665481565b6103ea60655481565b610598613287565b6072546103b79060ff1681565b6103ea60675481565b6103b76109f43660046144fe565b60736020526000908152604090205460ff1681565b610598610a1736600461451b565b6132fa565b606c5460021615156103b7565b610977610a37366004614964565b63f23a6e6160e01b9695505050505050565b6103df610a573660046144fe565b613324565b6103df610a6a366004614534565b61339d565b61050c613726565b610a7f6137d9565b828114610a9f5760405163025e650f60e01b815260040160405180910390fd5b60005b83811015610ce957828282818110610abc57610abc6149e0565b9050602002016020810190610ad191906144cc565b8015610b7c5750606a546001600160a01b03166375151b63868684818110610afb57610afb6149e0565b9050602002016020810190610b1091906144fe565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a91906149f6565b155b15610bd257848482818110610b9357610b936149e0565b9050602002016020810190610ba891906144fe565b60405163155fa42560e01b81526001600160a01b0390911660048201526024015b60405180910390fd5b828282818110610be457610be46149e0565b9050602002016020810190610bf991906144cc565b60736000878785818110610c0f57610c0f6149e0565b9050602002016020810190610c2491906144fe565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055848482818110610c5e57610c5e6149e0565b9050602002016020810190610c7391906144fe565b6001600160a01b03167f0a4552f1105808db6a44587c9ef0a7c4064bf620b9d843b514ad7365bd52239a848484818110610caf57610caf6149e0565b9050602002016020810190610cc491906144cc565b604051901515815260200160405180910390a280610ce181614a29565b915050610aa2565b5050505050565b610cf86137d9565b6072805460ff1916911515919091179055565b6000818152607160209081526040808320600201546001600160a01b03168352606f909152812060040154610d3f83612196565b101592915050565b60001960675403610d6b57604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b03163314610d9857604051632ee6aa4960e01b8152336004820152602401610bc9565b600160665414610dbb5760405163a1422f6960e01b815260040160405180910390fd5b600260665581610dca816117bf565b6001600160a01b038316600090815260736020526040902054839060ff16610e105760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b606c54600216610e33576040516334b99c7760e11b815260040160405180910390fd5b600080610e436067548787613833565b915091507f9181b2981704b7cf4448130f29cb5da1f41e0418d000e7f8880000b09bcbea4560675433888585604051610e80959493929190614a42565b60405180910390a15050600160665550505050565b6000818152607160205260408120600301546001600160a01b0316610eb9816117bf565b610ec283612f69565b9392505050565b60001960675403610eed57604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b03163314610f1a57604051632ee6aa4960e01b8152336004820152602401610bc9565b600160665414610f3d5760405163a1422f6960e01b815260040160405180910390fd5b60026066556001600160a01b038316600090815260746020526040902054839060ff16610f885760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b606754600090815260716020526040902060018101546001600160a01b038681169116141580610fbc575083816005015414155b156110b757606a54604051635afcdda160e11b81526001600160a01b039091169063b5f9bb4290610ff39088908890600401614a71565b6020604051808303816000875af1158015611012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103691906149f6565b61105e57604051630f7ff61760e11b81526001600160a01b0386166004820152602401610bc9565b60068101541561109257600181015460405163a19d532160e01b81526001600160a01b039091166004820152602401610bc9565b6001810180546001600160a01b0319166001600160a01b038716179055600581018490555b60006110c4868686613978565b9050808260060160008282546110da9190614a8a565b90915550506067548254604080519283526001600160a01b0391821660208401523390830152871660608201526080810186905260a081018290527fc5aca5cc1c259196b655af70661a6f72c1826c85b0c5c607d27da0a92a9408399060c001610e80565b60005b815181101561117f5761116d828281518110611160576111606149e0565b60200260200101516117bf565b8061117781614a29565b915050611142565b5050565b600054610100900460ff16158080156111a35750600054600160ff909116105b806111bd5750303b1580156111bd575060005460ff166001145b6112205760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610bc9565b6000805460ff191660011790558015611243576000805461ff0019166101001790555b61124b613ad6565b6001600160a01b038316158061126857506001600160a01b038216155b156112865760405163538ba4f960e01b815260040160405180910390fd5b600160658190556066819055600019606755606880546001600160a01b031990811683179091556069805482166001600160a01b0386811691909117909155606a8054909216908616908117909155606b91909155600f606c556040519081527fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e080319060200160405180910390a18015611359576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60006000196067540361138457604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b031633146113b157604051632ee6aa4960e01b8152336004820152602401610bc9565b6001606654146113d45760405163a1422f6960e01b815260040160405180910390fd5b6002606655826113e3816117bf565b6001600160a01b038416600090815260736020526040902054849060ff166114295760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b606c5460011661144c57604051634d2a0d3160e11b815260040160405180910390fd5b6001600160a01b038086166000908152606f602090815260408083206067548452607190925290912060038101549192909116156114c45760038101546001600160a01b038881169116146114bf5760405163b488b80160e01b81526001600160a01b0388166004820152602401610bc9565b6114e2565b6003810180546001600160a01b0319166001600160a01b0389161790555b600382015460006114f289613b05565b905060008215611515576115108261150a858c614a9d565b90613b89565b611517565b885b90508060000361153d57604051633fbab50360e01b8152600481018a9052602401610bc9565b808560030160008282546115519190614a8a565b925050819055508084600701600082825461156c9190614a8a565b9091555061157c90508a8a613bac565b97506115926001600160a01b038b16338a613d35565b7fef18174796a5d2f91d51dc5e907a4d7867bbd6e800f6225168e0453d581d0dcd606754338c8c856040516115cb959493929190614a42565b60405180910390a15050600160665550939695505050505050565b6115ee614373565b5060009081526071602090815260409182902082516101008101845281546001600160a01b039081168252600183015481169382019390935260028201548316938101939093526003810154909116606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e082015290565b6116746137d9565b8281146116945760405163025e650f60e01b815260040160405180910390fd5b60005b83811015610ce95760008585838181106116b3576116b36149e0565b90506020020160208101906116c891906144fe565b6001600160a01b0316036116ef5760405163538ba4f960e01b815260040160405180910390fd5b828282818110611701576117016149e0565b905060200201602081019061171691906144cc565b6075600087878581811061172c5761172c6149e0565b905060200201602081019061174191906144fe565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061177381614a29565b915050611697565b606754600090600181016117a2576040516316ceba0760e21b815260040160405180910390fd5b6000908152607160205260409020546001600160a01b0316919050565b6001600160a01b0381166000908152606f60205260409020805460ff166118045760405163f6e98bbd60e01b81526001600160a01b0383166004820152602401610bc9565b60028101546040516305eff7ef60e21b81523060048201526001600160a01b03909116906317bfdfbc906024016020604051808303816000875af1158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190614abc565b60006001606554146118995760405163a1422f6960e01b815260040160405180910390fd5b600260655560725460ff161580156118c157503360009081526076602052604090205460ff16155b156118e857333b156118e857604051631ebe781b60e21b8152336004820152602401610bc9565b6001600160a01b03831660009081526075602052604090205460ff1661192c576040516358ba279960e01b81526001600160a01b0384166004820152602401610bc9565b8360000361196d57606b805490600061194483614a29565b90915550600081815260716020526040902080546001600160a01b0319163317905593506119d2565b606b5484106119925760405163085cfa3b60e11b815260048101859052602401610bc9565b6000848152607160205260409020546001600160a01b031633146119d257604051635a08b9bd60e11b815260048101859052336024820152604401610bc9565b6067849055606880546001600160a01b0319166001600160a01b0385169081179091556040516000918291611a08908690614af9565b6000604051808303816000865af19150503d8060008114611a45576040519150601f19603f3d011682016040523d82523d6000602084013e611a4a565b606091505b509150915081611a9c57805115611a645780518082602001fd5b60405162461bcd60e51b815260206004820152600d60248201526c1898590818d85cdd0818d85b1b609a1b6044820152606401610bc9565b611aa586610d0b565b15611ac35760405163399510ad60e21b815260040160405180910390fd5b600019606755606880546001600160a01b0319166001179055604080518781523360208201527f060c8d1a634a03980e75eb63c749a805b9b8b4b3dfa32f1ace3889aea1e460d1910160405180910390a150506001606555509192915050565b611b2b6137d9565b611b356000613d8b565b565b600160655414611b5a5760405163a1422f6960e01b815260040160405180910390fd5b600260655581611b69816117bf565b606c54600216611b8c576040516334b99c7760e11b815260040160405180910390fd5b81600003611bad57604051630f6fa54560e41b815260040160405180910390fd5b611bb684610d0b565b611bd657604051637ac7541560e01b815260048101859052602401610bc9565b60008481526071602090815260408083206002808201546001600160a01b039081168652606f855294839020835160e081018552815460ff808216151583526101008204169682019690965262010000909504861693850193909352600183810154861660608601529083015485166080850152600383015460a085015260049092015460c084015290810154909216611c8657604051630542b02f60e01b815260048101879052602401610bc9565b613840606d54611c969190614a8a565b421015611cb657604051630ccee6ef60e21b815260040160405180910390fd5b6007820154600080611cc9898989613833565b91509150600083828760060154611ce09190614a9d565b611cea9190614b15565b9050600084838860040154611cff9190614a9d565b611d099190614b15565b905081876006016000828254611d1f9190614b37565b9250508190555080876004016000828254611d3a9190614b37565b909155505060018701546005880154604051637921219560e11b81526001600160a01b039092169163f242432a91611d7a91309133918890600401614b4a565b600060405180830381600087803b158015611d9457600080fd5b505af1158015611da8573d6000803e3d6000fd5b5050506002880154611dc391506001600160a01b0316613ddd565b15611de6576060860151611de1906001600160a01b03163383613d35565b611e56565b60408087015160028901549151637921219560e11b81526001600160a01b039182169263f242432a92611e23923092339216908790600401614b4a565b600060405180830381600087803b158015611e3d57600080fd5b505af1158015611e51573d6000803e3d6000fd5b505050505b604080518c81523360208201526001600160a01b038c1681830152606081018690526080810185905260a0810184905260c0810183905290517fe226831b9bcd388aeb7302d8e31fe0ffea78e95ff8253828c9e5ad4221ba401d9181900360e00190a150506001606555505050505050505050565b611ed36137d9565b6000611ee3606c54600216151590565b606c839055905060028216151581158015611efb5750805b156113595742606d55505050565b611f116137d9565b828114611f315760405163025e650f60e01b815260040160405180910390fd5b60005b83811015610ce9576000858583818110611f5057611f506149e0565b9050602002016020810190611f6591906144fe565b6001600160a01b031603611f8c5760405163538ba4f960e01b815260040160405180910390fd5b828282818110611f9e57611f9e6149e0565b9050602002016020810190611fb391906144cc565b60766000878785818110611fc957611fc96149e0565b9050602002016020810190611fde91906144fe565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061201081614a29565b915050611f34565b60006000196067540361203e57604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b0316331461206b57604051632ee6aa4960e01b8152336004820152602401610bc9565b60016066541461208e5760405163a1422f6960e01b815260040160405180910390fd5b60026066556067546000908152607160205260409020600183016120b457806006015492505b828160060160008282546120c89190614b37565b909155505060018101546005820154604051637921219560e11b81526001600160a01b039092169163f242432a9161210891309133918990600401614b4a565b600060405180830381600087803b15801561212257600080fd5b505af1158015612136573d6000803e3d6000fd5b5050606754600184015460058501546040517fa61ee435e629eecbcb5df77d05e802c71092439cdbeb225d95305f5a159755a39550612184945033926001600160a01b031691908990614a42565b60405180910390a15050600160665590565b6000806121a283612bf6565b905060006121af846131ca565b905060006121bc8561222c565b9050801580156121ca575082155b80156121d4575081155b806121df5750818310155b156121ed5760009350612224565b806000036121ff576127109350612224565b8061271061220d8585614b37565b6122179190614a9d565b6122219190614b15565b93505b505050919050565b600081815260716020908152604080832081516101008101835281546001600160a01b0390811682526001830154811694820194909452600282015484169281018390526003820154909316606084015260048101546080840152600581015460a0840152600681015460c08401526007015460e083015282906122af90613ddd565b1561236357608082015160608301516001600160a01b039081166000908152606f602090815260409182902060020154825163182df0f560e01b81529251670de0b6b3a76400009594919091169263182df0f59260048083019391928290030181865afa158015612324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123489190614abc565b6123529190614a9d565b61235c9190614b15565b905061236a565b5060808101515b606a546040808401519051636d34cd1760e01b81526001600160a01b0390921691636d34cd179161239f918590600401614a71565b6020604051808303816000875af11580156123be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e29190614abc565b949350505050565b6123f26137d9565b6001600160a01b038416600090815260736020526040902054849060ff166124385760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b6001600160a01b038416158061245557506001600160a01b038316155b156124735760405163538ba4f960e01b815260040160405180910390fd5b61271082111561249957604051638928b5e960e01b815260048101839052602401610bc9565b611f408210156124bf57604051635f85557960e01b815260048101839052602401610bc9565b6001600160a01b038086166000908152606f602090815260408083208151630c07ac2160e11b81529151909489169263180f584292600480820193918290030181865afa158015612514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125389190614b82565b6001600160a01b03811660009081526070602052604090205490915060ff161561257557604051632f53a8bb60e01b815260040160405180910390fd5b815460ff161561259857604051630c5c209360e11b815260040160405180910390fd5b606e54610100116125bc57604051638aaff22360e01b815260040160405180910390fd5b6001600160a01b03818116600081815260706020526040908190208054600160ff199182168117909255865490811682178755606e546002880180546001600160a01b0319908116909617905587830180549095168c87161790945561ffff191661010060ff9094169390930292909217821762010000600160b01b031916620100009389169384021785556004808601889055905163a22cb46560e01b8152908101839052602481019190915263a22cb46590604401600060405180830381600087803b15801561268d57600080fd5b505af11580156126a1573d6000803e3d6000fd5b5050606e80546001810182556000919091527f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a0180546001600160a01b0319166001600160a01b038b81169182179092556040805191825285831660208301528a83169082015290881660608201527f110059ef9db762501f341cb35fc60ec6c4667be05f312dc112683396aff872579250608001905060405180910390a150505050505050565b6000196067540361276d57604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b0316331461279a57604051632ee6aa4960e01b8152336004820152602401610bc9565b6001606654146127bd5760405163a1422f6960e01b815260040160405180910390fd5b6002606655816127cc816117bf565b6001600160a01b038316600090815260736020526040902054839060ff166128125760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b606c54600416612835576040516301d9569360e61b815260040160405180910390fd5b60675460009081526071602090815260408083206001600160a01b038089168552606f90935292206002830154909116156128aa5760028201546001600160a01b038781169116146128a55760405163a1a006a360e01b81526001600160a01b0387166004820152602401610bc9565b6128c8565b6002820180546001600160a01b0319166001600160a01b0388161790555b81546128e2906001600160a01b0388811691163088613e6b565b6128f4866128ee613287565b87613ea9565b6128fc613287565b6001600160a01b031663b300e95587876040518363ffffffff1660e01b8152600401612929929190614a71565b6020604051808303816000875af1158015612948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296c9190614abc565b945061297786613ddd565b15612a255760018101546129969087906001600160a01b031687613ea9565b600181015460405163b6b55f2560e01b8152600481018790526001600160a01b039091169063b6b55f25906024016020604051808303816000875af11580156129e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a079190614abc565b826004016000828254612a1a9190614a8a565b90915550612ad49050565b8054612a429087906201000090046001600160a01b031687613ea9565b80546040516311f9fbc960e21b8152620100009091046001600160a01b0316906347e7ef2490612a789089908990600401614a71565b6020604051808303816000875af1158015612a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abb9190614abc565b826004016000828254612ace9190614a8a565b90915550505b606754604080519182523360208301526001600160a01b03881690820152606081018690527f77c494147cc26c9ccb1f3f1926fb5bffa128633d935fdf7147dff0da6f740db490608001610e80565b612b2b6137d9565b60005b8251811015611359576000838281518110612b4b57612b4b6149e0565b6020026020010151905060006001600160a01b0316816001600160a01b031603612b885760405163538ba4f960e01b815260040160405180910390fd5b6001600160a01b038116600081815260746020908152604091829020805460ff191687151590811790915591519182527fec6817678ecd1396c1046a13a026051f8208d63a26559f6d0e51ea34f0d0d09d910160405180910390a25080612bee81614a29565b915050612b2e565b600081815260716020908152604080832081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201548416928101929092526003810154909216606082015260048201546080820152600582015460a0820152600682015460c0820181905260079092015460e0820152908203612c835750600092915050565b60208101516001600160a01b0316612cb157604051630542b02f60e01b815260048101849052602401610bc9565b606a54602082015160a083015160c08401516040516001621852b960e21b031981526001600160a01b03938416600482015260248101929092526044820152600092919091169063ff9eb51c906064016020604051808303816000875af1158015612d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d449190614abc565b9050600080600084602001516001600160a01b0316635ef819ce8660a001518760c001516040518363ffffffff1660e01b8152600401612d8e929190918252602082015260400190565b6000604051808303816000875af1158015612dad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dd59190810190614bfa565b9150915060005b8251811015612f5357606a5483516001600160a01b03909116906375151b6390859084908110612e0e57612e0e6149e0565b60200260200101516040518263ffffffff1660e01b8152600401612e4191906001600160a01b0391909116815260200190565b6020604051808303816000875af1158015612e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8491906149f6565b15612f4157606a5483516001600160a01b0390911690636d34cd1790859084908110612eb257612eb26149e0565b6020026020010151848481518110612ecc57612ecc6149e0565b60200260200101516040518363ffffffff1660e01b8152600401612ef1929190614a71565b6020604051808303816000875af1158015612f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f349190614abc565b612f3e9085614a8a565b93505b80612f4b81614a29565b915050612ddc565b50612f5e8385614a8a565b979650505050505050565b60008060716000848152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000606f600083606001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820154815260200160048201548152505090508160e0015160001480613197575060a0810151155b156131a6575060009392505050565b6123e28160a001516131bb8460600151613b05565b8460e0015161150a9190614a9d565b600081815260716020908152604080832081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201548416928101929092526003810154909216606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e08201528161324f84612f69565b606a546060840151604051636d34cd1760e01b81529293506001600160a01b0390911691636d34cd179161239f918590600401614a71565b6069546040805163d0fb020360e01b815290516000926001600160a01b03169163d0fb02039160048083019260209291908290030181865afa1580156132d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f59190614b82565b905090565b606e818154811061330a57600080fd5b6000918252602090912001546001600160a01b0316905081565b61332c6137d9565b6001600160a01b0381166133915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bc9565b61339a81613d8b565b50565b600019606754036133c157604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b031633146133ee57604051632ee6aa4960e01b8152336004820152602401610bc9565b6001606654146134115760405163a1422f6960e01b815260040160405180910390fd5b600260665581613420816117bf565b606c546008166134435760405163294b917560e11b815260040160405180910390fd5b60675460009081526071602090815260408083206001600160a01b03808816808652606f855294839020835160e081018552815460ff80821615158352610100820416968201969096526201000090950482169385019390935260018301548116606085015260028084015482166080860152600384015460a086015260049093015460c08501529181015490939116146134fc576040516356e6e56f60e11b81526001600160a01b0386166004820152602401610bc9565b600019840361350d57816004015493505b600061351886613ddd565b156135a557606082015161352d908087613ea9565b6060820151604051632e1a7d4d60e01b8152600481018790526001600160a01b0390911690632e1a7d4d906024016020604051808303816000875af115801561357a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359e9190614abc565b905061361d565b81604001516001600160a01b031663f3fef3a387876040518363ffffffff1660e01b81526004016135d7929190614a71565b6020604051808303816000875af11580156135f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361a9190614abc565b90505b848360040160008282546136319190614b37565b90915550613649905086613643613287565b83613ea9565b613651613287565b6001600160a01b0316639860450b87836040518363ffffffff1660e01b815260040161367e929190614a71565b6020604051808303816000875af115801561369d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c19190614abc565b90506136d76001600160a01b0387163383613d35565b606754604080519182523360208301526001600160a01b03881690820152606081018290527ff1e67ca791a03e6154f447c6adbce87374be012e6cd4e6cd875984ca7d033f4990608001610e80565b61372e614373565b600019606754036137585760675460405163085cfa3b60e11b8152600401610bc991815260200190565b5060675460009081526071602090815260409182902082516101008101845281546001600160a01b039081168252600183015481169382019390935260028201548316938101939093526003810154909116606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e082015290565b6033546001600160a01b03163314611b355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bc9565b6001600160a01b038083166000818152606f6020908152604080832088845260719092528220600381015492948594929391929116146138915760405163b488b80160e01b81526001600160a01b0387166004820152602401610bc9565b600382015460006138a188613b05565b600784015490915060006138b98461150a8585614a9d565b9050808911156138c7578098505b6138d18a8a613f8d565b985060006138df8b8b614091565b90508181111561390b57604051620a043960e71b81526004810182905260248101839052604401610bc9565b600082821461392e578461391f8784614a9d565b6139299190614b15565b613930565b835b9050808860030160008282546139469190614b37565b92505081905550808760070160008282546139619190614b37565b90915550919d909c509a5050505050505050505050565b600080846001600160a01b031662fdd58e30866040518363ffffffff1660e01b81526004016139a8929190614a71565b602060405180830381865afa1580156139c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e99190614abc565b604051637921219560e11b81529091506001600160a01b0386169063f242432a90613a1e903390309089908990600401614b4a565b600060405180830381600087803b158015613a3857600080fd5b505af1158015613a4c573d6000803e3d6000fd5b5050604051627eeac760e11b8152600092506001600160a01b038816915062fdd58e90613a7f9030908990600401614a71565b602060405180830381865afa158015613a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac09190614abc565b9050613acc8282614b37565b9695505050505050565b600054610100900460ff16613afd5760405162461bcd60e51b8152600401610bc990614cbf565b611b3561416d565b6001600160a01b038181166000908152606f60205260408082206002015490516395dd919360e01b8152306004820152919216906395dd919390602401602060405180830381865afa158015613b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b839190614abc565b92915050565b6000816001613b988286614a8a565b613ba29190614b37565b610ec29190614b15565b6001600160a01b038281166000818152606f60205260408082206002015490516370a0823160e01b81523060048201529193169185918491906370a0823190602401602060405180830381865afa158015613c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2f9190614abc565b60405163317afabb60e21b8152600481018790529091506001600160a01b0384169063c5ebeaec906024016020604051808303816000875af1158015613c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9d9190614abc565b15613cbe576040516333dc11b360e01b815260048101869052602401610bc9565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d299190614abc565b9050612f5e8282614b37565b6113598363a9059cbb60e01b8484604051602401613d54929190614a71565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261419d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038082166000818152606f60209081526040808320600101548151636331563760e01b81529151939516926363315637926004808401939192918290030181865afa158015613e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e5b9190614b82565b6001600160a01b03161492915050565b6040516001600160a01b0380851660248301528316604482015260648101829052613ea39085906323b872dd60e01b90608401613d54565b50505050565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390613ed8908590600090600401614a71565b6020604051808303816000875af1158015613ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f1b91906149f6565b5060405163095ea7b360e01b81526001600160a01b0384169063095ea7b390613f4a9085908590600401614a71565b6020604051808303816000875af1158015613f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea391906149f6565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa158015613fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ffa9190614abc565b90506140116001600160a01b038516333086613e6b565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015614058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407c9190614abc565b90506140888282614b37565b95945050505050565b6001600160a01b038083166000908152606f60205260408120600201549091166140bc848285613ea9565b60006140c785613b05565b60405163073a938160e11b8152600481018690529091506001600160a01b03831690630e752702906024016020604051808303816000875af1158015614111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141359190614abc565b1561415657604051631975572360e01b815260048101859052602401610bc9565b600061416186613b05565b9050613acc8183614b37565b600054610100900460ff166141945760405162461bcd60e51b8152600401610bc990614cbf565b611b3533613d8b565b60006141f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661426f9092919063ffffffff16565b805190915015611359578080602001905181019061421091906149f6565b6113595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bc9565b60606123e28484600085856001600160a01b0385163b6142d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bc9565b600080866001600160a01b031685876040516142ed9190614af9565b60006040518083038185875af1925050503d806000811461432a576040519150601f19603f3d011682016040523d82523d6000602084013e61432f565b606091505b5091509150612f5e82828660608315614349575081610ec2565b8251156143595782518084602001fd5b8160405162461bcd60e51b8152600401610bc99190614d0a565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156143ee57600080fd5b81356001600160e01b031981168114610ec257600080fd5b60008083601f84011261441857600080fd5b50813567ffffffffffffffff81111561443057600080fd5b6020830191508360208260051b850101111561444b57600080fd5b9250929050565b6000806000806040858703121561446857600080fd5b843567ffffffffffffffff8082111561448057600080fd5b61448c88838901614406565b909650945060208701359150808211156144a557600080fd5b506144b287828801614406565b95989497509550505050565b801515811461339a57600080fd5b6000602082840312156144de57600080fd5b8135610ec2816144be565b6001600160a01b038116811461339a57600080fd5b60006020828403121561451057600080fd5b8135610ec2816144e9565b60006020828403121561452d57600080fd5b5035919050565b6000806040838503121561454757600080fd5b8235614552816144e9565b946020939093013593505050565b60008060006060848603121561457557600080fd5b8335614580816144e9565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156145d4576145d4614595565b604052919050565b600067ffffffffffffffff8211156145f6576145f6614595565b5060051b60200190565b600082601f83011261461157600080fd5b81356020614626614621836145dc565b6145ab565b82815260059290921b8401810191818101908684111561464557600080fd5b8286015b8481101561466957803561465c816144e9565b8352918301918301614649565b509695505050505050565b60006020828403121561468657600080fd5b813567ffffffffffffffff81111561469d57600080fd5b6123e284828501614600565b600080604083850312156146bc57600080fd5b82356146c7816144e9565b915060208301356146d7816144e9565b809150509250929050565b6000806000606084860312156146f757600080fd5b8335925060208085013561470a816144e9565b9250604085013567ffffffffffffffff8082111561472757600080fd5b818701915087601f83011261473b57600080fd5b81358181111561474d5761474d614595565b61475f601f8201601f191685016145ab565b9150808252888482850101111561477557600080fd5b80848401858401376000848284010152508093505050509250925092565b6000806000606084860312156147a857600080fd5b8335925060208401356147ba816144e9565b929592945050506040919091013590565b600080600080608085870312156147e157600080fd5b84356147ec816144e9565b935060208501356147fc816144e9565b9250604085013561480c816144e9565b9396929550929360600135925050565b6000806040838503121561482f57600080fd5b823567ffffffffffffffff81111561484657600080fd5b61485285828601614600565b92505060208301356146d7816144be565b60008083601f84011261487557600080fd5b50813567ffffffffffffffff81111561488d57600080fd5b60208301915083602082850101111561444b57600080fd5b60008060008060008060008060a0898b0312156148c157600080fd5b88356148cc816144e9565b975060208901356148dc816144e9565b9650604089013567ffffffffffffffff808211156148f957600080fd5b6149058c838d01614406565b909850965060608b013591508082111561491e57600080fd5b61492a8c838d01614406565b909650945060808b013591508082111561494357600080fd5b506149508b828c01614863565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561497d57600080fd5b8635614988816144e9565b95506020870135614998816144e9565b94506040870135935060608701359250608087013567ffffffffffffffff8111156149c257600080fd5b6149ce89828a01614863565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614a0857600080fd5b8151610ec2816144be565b634e487b7160e01b600052601160045260246000fd5b600060018201614a3b57614a3b614a13565b5060010190565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b6001600160a01b03929092168252602082015260400190565b80820180821115613b8357613b83614a13565b6000816000190483118215151615614ab757614ab7614a13565b500290565b600060208284031215614ace57600080fd5b5051919050565b60005b83811015614af0578181015183820152602001614ad8565b50506000910152565b60008251614b0b818460208701614ad5565b9190910192915050565b600082614b3257634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115613b8357613b83614a13565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600060208284031215614b9457600080fd5b8151610ec2816144e9565b600082601f830112614bb057600080fd5b81516020614bc0614621836145dc565b82815260059290921b84018101918181019086841115614bdf57600080fd5b8286015b848110156146695780518352918301918301614be3565b60008060408385031215614c0d57600080fd5b825167ffffffffffffffff80821115614c2557600080fd5b818501915085601f830112614c3957600080fd5b81516020614c49614621836145dc565b82815260059290921b84018101918181019089841115614c6857600080fd5b948201945b83861015614c8f578551614c80816144e9565b82529482019490820190614c6d565b91880151919650909350505080821115614ca857600080fd5b50614cb585828601614b9f565b9150509250929050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020815260008251806020840152614d29816040850160208701614ad5565b601f01601f1916919091016040019291505056fea2646970667358221220229f2692774852c5e6f629d2e9d5b781d6e67f3534567a99249e89422c03b44864736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038e5760003560e01c806380c3b8c2116101de578063bc197c811161010f578063d7ac71ff116100ad578063f23a6e611161007c578063f23a6e6114610a29578063f2fde38b14610a49578063f6ff6b1214610a5c578063f70aedd914610a6f57600080fd5b8063d7ac71ff146109dd578063daf9c210146109e6578063dd6f3c7014610a09578063e73c4e2514610a1c57600080fd5b8063c9a4bb3f116100e9578063c9a4bb3f146109b6578063d05e44a4146109bf578063d0fb0203146109c8578063d2ffc9f3146109d057600080fd5b8063bc197c8114610955578063bd83eb4c14610990578063c0177bd5146109a357600080fd5b80639548f37e1161017c578063aed023dc11610156578063aed023dc146108ff578063b3c26e9c14610912578063b43aa79a1461091f578063b86a0aaa1461094257600080fd5b80639548f37e1461082857806399fbab881461083b578063a2fb342d146108ec57600080fd5b80638b00e196116101b85780638b00e196146107de5780638da5cb5b146107f15780639042dad51461080257806394d95d051461081557600080fd5b806380c3b8c21461070e57806386c0dc88146107b2578063899346c7146107d557600080fd5b806349aa2e81116102c3578063715018a6116102615780637b79413a116102305780637b79413a146106175780637cbdae6f146106d55780637dc0d1d0146106e85780637de3fa67146106fb57600080fd5b8063715018a6146105d657806376636722146105de57806379502c55146105f157806379bd1eac1461060457600080fd5b806362548d8c1161029d57806362548d8c1461057d578063630dc7cb146105905780636680ac0b146105b0578063710a9f68146105c357600080fd5b806349aa2e81146104d95780634b8a3529146104e6578063519f5099146104f957600080fd5b806322867d7811610330578063314568d91161030a578063314568d91461047d57806338bd678a14610490578063391feebb146104a3578063485cc955146104c657600080fd5b806322867d781461044a578063269a4bad1461045d57806326e533501461047057600080fd5b8063071feca31161036c578063071feca3146103f85780630e5641e61461040b5780630ebcce7f14610414578063211a44431461043757600080fd5b806301ffc9a71461039357806303de6355146103cc5780630639282e146103e1575b600080fd5b6103b76103a13660046143dc565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b6103df6103da366004614452565b610a77565b005b6103ea606d5481565b6040519081526020016103c3565b6103df6104063660046144cc565b610cf0565b6103ea606c5481565b6103b76104223660046144fe565b60706020526000908152604090205460ff1681565b6103b761044536600461451b565b610d0b565b6103df610458366004614534565b610d47565b6103ea61046b36600461451b565b610e95565b606c5460041615156103b7565b6103df61048b366004614560565b610ec9565b6103df61049e366004614674565b61113f565b6103b76104b13660046144fe565b60766020526000908152604090205460ff1681565b6103df6104d43660046146a9565b611183565b606c5460011615156103b7565b6103ea6104f4366004614534565b61135e565b61050c61050736600461451b565b6115e6565b6040516103c3919060006101008201905060018060a01b03808451168352806020850151166020840152806040850151166040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b6103df61058b366004614452565b61166c565b61059861177b565b6040516001600160a01b0390911681526020016103c3565b6103df6105be3660046144fe565b6117bf565b6103ea6105d13660046146e2565b611874565b6103df611b23565b606854610598906001600160a01b031681565b606954610598906001600160a01b031681565b6103df610612366004614793565b611b37565b6106b06106253660046144fe565b6001600160a01b038082166000908152606f6020908152604091829020825160e081018452815460ff8082161515808452610100830490911694830194909452620100009004851693810193909352600181015484166060840152600281015490931660808301819052600384015460a0840181905260049094015460c09093019290925293909250565b6040805193151584526001600160a01b039092166020840152908201526060016103c3565b6103df6106e336600461451b565b611ecb565b606a54610598906001600160a01b031681565b6103df610709366004614452565b611f09565b61076a61071c3660046144fe565b606f602052600090815260409020805460018201546002830154600384015460049094015460ff808516956101008604909116946001600160a01b0362010000909104811694811693169187565b60408051971515885260ff90961660208801526001600160a01b0394851695870195909552918316606086015291909116608084015260a083015260c082015260e0016103c3565b6103b76107c03660046144fe565b60756020526000908152604090205460ff1681565b6103ea606b5481565b6103ea6107ec36600461451b565b612018565b6033546001600160a01b0316610598565b6103ea61081036600461451b565b612196565b6103ea61082336600461451b565b61222c565b6103df6108363660046147cb565b6123ea565b61089d61084936600461451b565b607160205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b0396871697958716969485169593909416939192909188565b604080516001600160a01b03998a168152978916602089015295881695870195909552959092166060850152608084015260a083015260c082019290925260e0810191909152610100016103c3565b6103df6108fa366004614534565b612749565b6103df61090d36600461481c565b612b23565b606c5460081615156103b7565b6103b761092d3660046144fe565b60746020526000908152604090205460ff1681565b6103ea61095036600461451b565b612bf6565b6109776109633660046148a5565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b031990911681526020016103c3565b6103ea61099e36600461451b565b612f69565b6103ea6109b136600461451b565b6131ca565b6103ea60665481565b6103ea60655481565b610598613287565b6072546103b79060ff1681565b6103ea60675481565b6103b76109f43660046144fe565b60736020526000908152604090205460ff1681565b610598610a1736600461451b565b6132fa565b606c5460021615156103b7565b610977610a37366004614964565b63f23a6e6160e01b9695505050505050565b6103df610a573660046144fe565b613324565b6103df610a6a366004614534565b61339d565b61050c613726565b610a7f6137d9565b828114610a9f5760405163025e650f60e01b815260040160405180910390fd5b60005b83811015610ce957828282818110610abc57610abc6149e0565b9050602002016020810190610ad191906144cc565b8015610b7c5750606a546001600160a01b03166375151b63868684818110610afb57610afb6149e0565b9050602002016020810190610b1091906144fe565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a91906149f6565b155b15610bd257848482818110610b9357610b936149e0565b9050602002016020810190610ba891906144fe565b60405163155fa42560e01b81526001600160a01b0390911660048201526024015b60405180910390fd5b828282818110610be457610be46149e0565b9050602002016020810190610bf991906144cc565b60736000878785818110610c0f57610c0f6149e0565b9050602002016020810190610c2491906144fe565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055848482818110610c5e57610c5e6149e0565b9050602002016020810190610c7391906144fe565b6001600160a01b03167f0a4552f1105808db6a44587c9ef0a7c4064bf620b9d843b514ad7365bd52239a848484818110610caf57610caf6149e0565b9050602002016020810190610cc491906144cc565b604051901515815260200160405180910390a280610ce181614a29565b915050610aa2565b5050505050565b610cf86137d9565b6072805460ff1916911515919091179055565b6000818152607160209081526040808320600201546001600160a01b03168352606f909152812060040154610d3f83612196565b101592915050565b60001960675403610d6b57604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b03163314610d9857604051632ee6aa4960e01b8152336004820152602401610bc9565b600160665414610dbb5760405163a1422f6960e01b815260040160405180910390fd5b600260665581610dca816117bf565b6001600160a01b038316600090815260736020526040902054839060ff16610e105760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b606c54600216610e33576040516334b99c7760e11b815260040160405180910390fd5b600080610e436067548787613833565b915091507f9181b2981704b7cf4448130f29cb5da1f41e0418d000e7f8880000b09bcbea4560675433888585604051610e80959493929190614a42565b60405180910390a15050600160665550505050565b6000818152607160205260408120600301546001600160a01b0316610eb9816117bf565b610ec283612f69565b9392505050565b60001960675403610eed57604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b03163314610f1a57604051632ee6aa4960e01b8152336004820152602401610bc9565b600160665414610f3d5760405163a1422f6960e01b815260040160405180910390fd5b60026066556001600160a01b038316600090815260746020526040902054839060ff16610f885760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b606754600090815260716020526040902060018101546001600160a01b038681169116141580610fbc575083816005015414155b156110b757606a54604051635afcdda160e11b81526001600160a01b039091169063b5f9bb4290610ff39088908890600401614a71565b6020604051808303816000875af1158015611012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103691906149f6565b61105e57604051630f7ff61760e11b81526001600160a01b0386166004820152602401610bc9565b60068101541561109257600181015460405163a19d532160e01b81526001600160a01b039091166004820152602401610bc9565b6001810180546001600160a01b0319166001600160a01b038716179055600581018490555b60006110c4868686613978565b9050808260060160008282546110da9190614a8a565b90915550506067548254604080519283526001600160a01b0391821660208401523390830152871660608201526080810186905260a081018290527fc5aca5cc1c259196b655af70661a6f72c1826c85b0c5c607d27da0a92a9408399060c001610e80565b60005b815181101561117f5761116d828281518110611160576111606149e0565b60200260200101516117bf565b8061117781614a29565b915050611142565b5050565b600054610100900460ff16158080156111a35750600054600160ff909116105b806111bd5750303b1580156111bd575060005460ff166001145b6112205760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610bc9565b6000805460ff191660011790558015611243576000805461ff0019166101001790555b61124b613ad6565b6001600160a01b038316158061126857506001600160a01b038216155b156112865760405163538ba4f960e01b815260040160405180910390fd5b600160658190556066819055600019606755606880546001600160a01b031990811683179091556069805482166001600160a01b0386811691909117909155606a8054909216908616908117909155606b91909155600f606c556040519081527fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e080319060200160405180910390a18015611359576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60006000196067540361138457604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b031633146113b157604051632ee6aa4960e01b8152336004820152602401610bc9565b6001606654146113d45760405163a1422f6960e01b815260040160405180910390fd5b6002606655826113e3816117bf565b6001600160a01b038416600090815260736020526040902054849060ff166114295760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b606c5460011661144c57604051634d2a0d3160e11b815260040160405180910390fd5b6001600160a01b038086166000908152606f602090815260408083206067548452607190925290912060038101549192909116156114c45760038101546001600160a01b038881169116146114bf5760405163b488b80160e01b81526001600160a01b0388166004820152602401610bc9565b6114e2565b6003810180546001600160a01b0319166001600160a01b0389161790555b600382015460006114f289613b05565b905060008215611515576115108261150a858c614a9d565b90613b89565b611517565b885b90508060000361153d57604051633fbab50360e01b8152600481018a9052602401610bc9565b808560030160008282546115519190614a8a565b925050819055508084600701600082825461156c9190614a8a565b9091555061157c90508a8a613bac565b97506115926001600160a01b038b16338a613d35565b7fef18174796a5d2f91d51dc5e907a4d7867bbd6e800f6225168e0453d581d0dcd606754338c8c856040516115cb959493929190614a42565b60405180910390a15050600160665550939695505050505050565b6115ee614373565b5060009081526071602090815260409182902082516101008101845281546001600160a01b039081168252600183015481169382019390935260028201548316938101939093526003810154909116606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e082015290565b6116746137d9565b8281146116945760405163025e650f60e01b815260040160405180910390fd5b60005b83811015610ce95760008585838181106116b3576116b36149e0565b90506020020160208101906116c891906144fe565b6001600160a01b0316036116ef5760405163538ba4f960e01b815260040160405180910390fd5b828282818110611701576117016149e0565b905060200201602081019061171691906144cc565b6075600087878581811061172c5761172c6149e0565b905060200201602081019061174191906144fe565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061177381614a29565b915050611697565b606754600090600181016117a2576040516316ceba0760e21b815260040160405180910390fd5b6000908152607160205260409020546001600160a01b0316919050565b6001600160a01b0381166000908152606f60205260409020805460ff166118045760405163f6e98bbd60e01b81526001600160a01b0383166004820152602401610bc9565b60028101546040516305eff7ef60e21b81523060048201526001600160a01b03909116906317bfdfbc906024016020604051808303816000875af1158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190614abc565b60006001606554146118995760405163a1422f6960e01b815260040160405180910390fd5b600260655560725460ff161580156118c157503360009081526076602052604090205460ff16155b156118e857333b156118e857604051631ebe781b60e21b8152336004820152602401610bc9565b6001600160a01b03831660009081526075602052604090205460ff1661192c576040516358ba279960e01b81526001600160a01b0384166004820152602401610bc9565b8360000361196d57606b805490600061194483614a29565b90915550600081815260716020526040902080546001600160a01b0319163317905593506119d2565b606b5484106119925760405163085cfa3b60e11b815260048101859052602401610bc9565b6000848152607160205260409020546001600160a01b031633146119d257604051635a08b9bd60e11b815260048101859052336024820152604401610bc9565b6067849055606880546001600160a01b0319166001600160a01b0385169081179091556040516000918291611a08908690614af9565b6000604051808303816000865af19150503d8060008114611a45576040519150601f19603f3d011682016040523d82523d6000602084013e611a4a565b606091505b509150915081611a9c57805115611a645780518082602001fd5b60405162461bcd60e51b815260206004820152600d60248201526c1898590818d85cdd0818d85b1b609a1b6044820152606401610bc9565b611aa586610d0b565b15611ac35760405163399510ad60e21b815260040160405180910390fd5b600019606755606880546001600160a01b0319166001179055604080518781523360208201527f060c8d1a634a03980e75eb63c749a805b9b8b4b3dfa32f1ace3889aea1e460d1910160405180910390a150506001606555509192915050565b611b2b6137d9565b611b356000613d8b565b565b600160655414611b5a5760405163a1422f6960e01b815260040160405180910390fd5b600260655581611b69816117bf565b606c54600216611b8c576040516334b99c7760e11b815260040160405180910390fd5b81600003611bad57604051630f6fa54560e41b815260040160405180910390fd5b611bb684610d0b565b611bd657604051637ac7541560e01b815260048101859052602401610bc9565b60008481526071602090815260408083206002808201546001600160a01b039081168652606f855294839020835160e081018552815460ff808216151583526101008204169682019690965262010000909504861693850193909352600183810154861660608601529083015485166080850152600383015460a085015260049092015460c084015290810154909216611c8657604051630542b02f60e01b815260048101879052602401610bc9565b613840606d54611c969190614a8a565b421015611cb657604051630ccee6ef60e21b815260040160405180910390fd5b6007820154600080611cc9898989613833565b91509150600083828760060154611ce09190614a9d565b611cea9190614b15565b9050600084838860040154611cff9190614a9d565b611d099190614b15565b905081876006016000828254611d1f9190614b37565b9250508190555080876004016000828254611d3a9190614b37565b909155505060018701546005880154604051637921219560e11b81526001600160a01b039092169163f242432a91611d7a91309133918890600401614b4a565b600060405180830381600087803b158015611d9457600080fd5b505af1158015611da8573d6000803e3d6000fd5b5050506002880154611dc391506001600160a01b0316613ddd565b15611de6576060860151611de1906001600160a01b03163383613d35565b611e56565b60408087015160028901549151637921219560e11b81526001600160a01b039182169263f242432a92611e23923092339216908790600401614b4a565b600060405180830381600087803b158015611e3d57600080fd5b505af1158015611e51573d6000803e3d6000fd5b505050505b604080518c81523360208201526001600160a01b038c1681830152606081018690526080810185905260a0810184905260c0810183905290517fe226831b9bcd388aeb7302d8e31fe0ffea78e95ff8253828c9e5ad4221ba401d9181900360e00190a150506001606555505050505050505050565b611ed36137d9565b6000611ee3606c54600216151590565b606c839055905060028216151581158015611efb5750805b156113595742606d55505050565b611f116137d9565b828114611f315760405163025e650f60e01b815260040160405180910390fd5b60005b83811015610ce9576000858583818110611f5057611f506149e0565b9050602002016020810190611f6591906144fe565b6001600160a01b031603611f8c5760405163538ba4f960e01b815260040160405180910390fd5b828282818110611f9e57611f9e6149e0565b9050602002016020810190611fb391906144cc565b60766000878785818110611fc957611fc96149e0565b9050602002016020810190611fde91906144fe565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061201081614a29565b915050611f34565b60006000196067540361203e57604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b0316331461206b57604051632ee6aa4960e01b8152336004820152602401610bc9565b60016066541461208e5760405163a1422f6960e01b815260040160405180910390fd5b60026066556067546000908152607160205260409020600183016120b457806006015492505b828160060160008282546120c89190614b37565b909155505060018101546005820154604051637921219560e11b81526001600160a01b039092169163f242432a9161210891309133918990600401614b4a565b600060405180830381600087803b15801561212257600080fd5b505af1158015612136573d6000803e3d6000fd5b5050606754600184015460058501546040517fa61ee435e629eecbcb5df77d05e802c71092439cdbeb225d95305f5a159755a39550612184945033926001600160a01b031691908990614a42565b60405180910390a15050600160665590565b6000806121a283612bf6565b905060006121af846131ca565b905060006121bc8561222c565b9050801580156121ca575082155b80156121d4575081155b806121df5750818310155b156121ed5760009350612224565b806000036121ff576127109350612224565b8061271061220d8585614b37565b6122179190614a9d565b6122219190614b15565b93505b505050919050565b600081815260716020908152604080832081516101008101835281546001600160a01b0390811682526001830154811694820194909452600282015484169281018390526003820154909316606084015260048101546080840152600581015460a0840152600681015460c08401526007015460e083015282906122af90613ddd565b1561236357608082015160608301516001600160a01b039081166000908152606f602090815260409182902060020154825163182df0f560e01b81529251670de0b6b3a76400009594919091169263182df0f59260048083019391928290030181865afa158015612324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123489190614abc565b6123529190614a9d565b61235c9190614b15565b905061236a565b5060808101515b606a546040808401519051636d34cd1760e01b81526001600160a01b0390921691636d34cd179161239f918590600401614a71565b6020604051808303816000875af11580156123be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e29190614abc565b949350505050565b6123f26137d9565b6001600160a01b038416600090815260736020526040902054849060ff166124385760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b6001600160a01b038416158061245557506001600160a01b038316155b156124735760405163538ba4f960e01b815260040160405180910390fd5b61271082111561249957604051638928b5e960e01b815260048101839052602401610bc9565b611f408210156124bf57604051635f85557960e01b815260048101839052602401610bc9565b6001600160a01b038086166000908152606f602090815260408083208151630c07ac2160e11b81529151909489169263180f584292600480820193918290030181865afa158015612514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125389190614b82565b6001600160a01b03811660009081526070602052604090205490915060ff161561257557604051632f53a8bb60e01b815260040160405180910390fd5b815460ff161561259857604051630c5c209360e11b815260040160405180910390fd5b606e54610100116125bc57604051638aaff22360e01b815260040160405180910390fd5b6001600160a01b03818116600081815260706020526040908190208054600160ff199182168117909255865490811682178755606e546002880180546001600160a01b0319908116909617905587830180549095168c87161790945561ffff191661010060ff9094169390930292909217821762010000600160b01b031916620100009389169384021785556004808601889055905163a22cb46560e01b8152908101839052602481019190915263a22cb46590604401600060405180830381600087803b15801561268d57600080fd5b505af11580156126a1573d6000803e3d6000fd5b5050606e80546001810182556000919091527f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a0180546001600160a01b0319166001600160a01b038b81169182179092556040805191825285831660208301528a83169082015290881660608201527f110059ef9db762501f341cb35fc60ec6c4667be05f312dc112683396aff872579250608001905060405180910390a150505050505050565b6000196067540361276d57604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b0316331461279a57604051632ee6aa4960e01b8152336004820152602401610bc9565b6001606654146127bd5760405163a1422f6960e01b815260040160405180910390fd5b6002606655816127cc816117bf565b6001600160a01b038316600090815260736020526040902054839060ff166128125760405163d0a6758b60e01b81526001600160a01b0382166004820152602401610bc9565b606c54600416612835576040516301d9569360e61b815260040160405180910390fd5b60675460009081526071602090815260408083206001600160a01b038089168552606f90935292206002830154909116156128aa5760028201546001600160a01b038781169116146128a55760405163a1a006a360e01b81526001600160a01b0387166004820152602401610bc9565b6128c8565b6002820180546001600160a01b0319166001600160a01b0388161790555b81546128e2906001600160a01b0388811691163088613e6b565b6128f4866128ee613287565b87613ea9565b6128fc613287565b6001600160a01b031663b300e95587876040518363ffffffff1660e01b8152600401612929929190614a71565b6020604051808303816000875af1158015612948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296c9190614abc565b945061297786613ddd565b15612a255760018101546129969087906001600160a01b031687613ea9565b600181015460405163b6b55f2560e01b8152600481018790526001600160a01b039091169063b6b55f25906024016020604051808303816000875af11580156129e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a079190614abc565b826004016000828254612a1a9190614a8a565b90915550612ad49050565b8054612a429087906201000090046001600160a01b031687613ea9565b80546040516311f9fbc960e21b8152620100009091046001600160a01b0316906347e7ef2490612a789089908990600401614a71565b6020604051808303816000875af1158015612a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abb9190614abc565b826004016000828254612ace9190614a8a565b90915550505b606754604080519182523360208301526001600160a01b03881690820152606081018690527f77c494147cc26c9ccb1f3f1926fb5bffa128633d935fdf7147dff0da6f740db490608001610e80565b612b2b6137d9565b60005b8251811015611359576000838281518110612b4b57612b4b6149e0565b6020026020010151905060006001600160a01b0316816001600160a01b031603612b885760405163538ba4f960e01b815260040160405180910390fd5b6001600160a01b038116600081815260746020908152604091829020805460ff191687151590811790915591519182527fec6817678ecd1396c1046a13a026051f8208d63a26559f6d0e51ea34f0d0d09d910160405180910390a25080612bee81614a29565b915050612b2e565b600081815260716020908152604080832081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201548416928101929092526003810154909216606082015260048201546080820152600582015460a0820152600682015460c0820181905260079092015460e0820152908203612c835750600092915050565b60208101516001600160a01b0316612cb157604051630542b02f60e01b815260048101849052602401610bc9565b606a54602082015160a083015160c08401516040516001621852b960e21b031981526001600160a01b03938416600482015260248101929092526044820152600092919091169063ff9eb51c906064016020604051808303816000875af1158015612d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d449190614abc565b9050600080600084602001516001600160a01b0316635ef819ce8660a001518760c001516040518363ffffffff1660e01b8152600401612d8e929190918252602082015260400190565b6000604051808303816000875af1158015612dad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dd59190810190614bfa565b9150915060005b8251811015612f5357606a5483516001600160a01b03909116906375151b6390859084908110612e0e57612e0e6149e0565b60200260200101516040518263ffffffff1660e01b8152600401612e4191906001600160a01b0391909116815260200190565b6020604051808303816000875af1158015612e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8491906149f6565b15612f4157606a5483516001600160a01b0390911690636d34cd1790859084908110612eb257612eb26149e0565b6020026020010151848481518110612ecc57612ecc6149e0565b60200260200101516040518363ffffffff1660e01b8152600401612ef1929190614a71565b6020604051808303816000875af1158015612f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f349190614abc565b612f3e9085614a8a565b93505b80612f4b81614a29565b915050612ddc565b50612f5e8385614a8a565b979650505050505050565b60008060716000848152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000606f600083606001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820154815260200160048201548152505090508160e0015160001480613197575060a0810151155b156131a6575060009392505050565b6123e28160a001516131bb8460600151613b05565b8460e0015161150a9190614a9d565b600081815260716020908152604080832081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201548416928101929092526003810154909216606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e08201528161324f84612f69565b606a546060840151604051636d34cd1760e01b81529293506001600160a01b0390911691636d34cd179161239f918590600401614a71565b6069546040805163d0fb020360e01b815290516000926001600160a01b03169163d0fb02039160048083019260209291908290030181865afa1580156132d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f59190614b82565b905090565b606e818154811061330a57600080fd5b6000918252602090912001546001600160a01b0316905081565b61332c6137d9565b6001600160a01b0381166133915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bc9565b61339a81613d8b565b50565b600019606754036133c157604051633f795dab60e01b815260040160405180910390fd5b6068546001600160a01b031633146133ee57604051632ee6aa4960e01b8152336004820152602401610bc9565b6001606654146134115760405163a1422f6960e01b815260040160405180910390fd5b600260665581613420816117bf565b606c546008166134435760405163294b917560e11b815260040160405180910390fd5b60675460009081526071602090815260408083206001600160a01b03808816808652606f855294839020835160e081018552815460ff80821615158352610100820416968201969096526201000090950482169385019390935260018301548116606085015260028084015482166080860152600384015460a086015260049093015460c08501529181015490939116146134fc576040516356e6e56f60e11b81526001600160a01b0386166004820152602401610bc9565b600019840361350d57816004015493505b600061351886613ddd565b156135a557606082015161352d908087613ea9565b6060820151604051632e1a7d4d60e01b8152600481018790526001600160a01b0390911690632e1a7d4d906024016020604051808303816000875af115801561357a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359e9190614abc565b905061361d565b81604001516001600160a01b031663f3fef3a387876040518363ffffffff1660e01b81526004016135d7929190614a71565b6020604051808303816000875af11580156135f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361a9190614abc565b90505b848360040160008282546136319190614b37565b90915550613649905086613643613287565b83613ea9565b613651613287565b6001600160a01b0316639860450b87836040518363ffffffff1660e01b815260040161367e929190614a71565b6020604051808303816000875af115801561369d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c19190614abc565b90506136d76001600160a01b0387163383613d35565b606754604080519182523360208301526001600160a01b03881690820152606081018290527ff1e67ca791a03e6154f447c6adbce87374be012e6cd4e6cd875984ca7d033f4990608001610e80565b61372e614373565b600019606754036137585760675460405163085cfa3b60e11b8152600401610bc991815260200190565b5060675460009081526071602090815260409182902082516101008101845281546001600160a01b039081168252600183015481169382019390935260028201548316938101939093526003810154909116606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e082015290565b6033546001600160a01b03163314611b355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bc9565b6001600160a01b038083166000818152606f6020908152604080832088845260719092528220600381015492948594929391929116146138915760405163b488b80160e01b81526001600160a01b0387166004820152602401610bc9565b600382015460006138a188613b05565b600784015490915060006138b98461150a8585614a9d565b9050808911156138c7578098505b6138d18a8a613f8d565b985060006138df8b8b614091565b90508181111561390b57604051620a043960e71b81526004810182905260248101839052604401610bc9565b600082821461392e578461391f8784614a9d565b6139299190614b15565b613930565b835b9050808860030160008282546139469190614b37565b92505081905550808760070160008282546139619190614b37565b90915550919d909c509a5050505050505050505050565b600080846001600160a01b031662fdd58e30866040518363ffffffff1660e01b81526004016139a8929190614a71565b602060405180830381865afa1580156139c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e99190614abc565b604051637921219560e11b81529091506001600160a01b0386169063f242432a90613a1e903390309089908990600401614b4a565b600060405180830381600087803b158015613a3857600080fd5b505af1158015613a4c573d6000803e3d6000fd5b5050604051627eeac760e11b8152600092506001600160a01b038816915062fdd58e90613a7f9030908990600401614a71565b602060405180830381865afa158015613a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac09190614abc565b9050613acc8282614b37565b9695505050505050565b600054610100900460ff16613afd5760405162461bcd60e51b8152600401610bc990614cbf565b611b3561416d565b6001600160a01b038181166000908152606f60205260408082206002015490516395dd919360e01b8152306004820152919216906395dd919390602401602060405180830381865afa158015613b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b839190614abc565b92915050565b6000816001613b988286614a8a565b613ba29190614b37565b610ec29190614b15565b6001600160a01b038281166000818152606f60205260408082206002015490516370a0823160e01b81523060048201529193169185918491906370a0823190602401602060405180830381865afa158015613c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2f9190614abc565b60405163317afabb60e21b8152600481018790529091506001600160a01b0384169063c5ebeaec906024016020604051808303816000875af1158015613c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9d9190614abc565b15613cbe576040516333dc11b360e01b815260048101869052602401610bc9565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d299190614abc565b9050612f5e8282614b37565b6113598363a9059cbb60e01b8484604051602401613d54929190614a71565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261419d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038082166000818152606f60209081526040808320600101548151636331563760e01b81529151939516926363315637926004808401939192918290030181865afa158015613e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e5b9190614b82565b6001600160a01b03161492915050565b6040516001600160a01b0380851660248301528316604482015260648101829052613ea39085906323b872dd60e01b90608401613d54565b50505050565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390613ed8908590600090600401614a71565b6020604051808303816000875af1158015613ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f1b91906149f6565b5060405163095ea7b360e01b81526001600160a01b0384169063095ea7b390613f4a9085908590600401614a71565b6020604051808303816000875af1158015613f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea391906149f6565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa158015613fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ffa9190614abc565b90506140116001600160a01b038516333086613e6b565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015614058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407c9190614abc565b90506140888282614b37565b95945050505050565b6001600160a01b038083166000908152606f60205260408120600201549091166140bc848285613ea9565b60006140c785613b05565b60405163073a938160e11b8152600481018690529091506001600160a01b03831690630e752702906024016020604051808303816000875af1158015614111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141359190614abc565b1561415657604051631975572360e01b815260048101859052602401610bc9565b600061416186613b05565b9050613acc8183614b37565b600054610100900460ff166141945760405162461bcd60e51b8152600401610bc990614cbf565b611b3533613d8b565b60006141f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661426f9092919063ffffffff16565b805190915015611359578080602001905181019061421091906149f6565b6113595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bc9565b60606123e28484600085856001600160a01b0385163b6142d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bc9565b600080866001600160a01b031685876040516142ed9190614af9565b60006040518083038185875af1925050503d806000811461432a576040519150601f19603f3d011682016040523d82523d6000602084013e61432f565b606091505b5091509150612f5e82828660608315614349575081610ec2565b8251156143595782518084602001fd5b8160405162461bcd60e51b8152600401610bc99190614d0a565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156143ee57600080fd5b81356001600160e01b031981168114610ec257600080fd5b60008083601f84011261441857600080fd5b50813567ffffffffffffffff81111561443057600080fd5b6020830191508360208260051b850101111561444b57600080fd5b9250929050565b6000806000806040858703121561446857600080fd5b843567ffffffffffffffff8082111561448057600080fd5b61448c88838901614406565b909650945060208701359150808211156144a557600080fd5b506144b287828801614406565b95989497509550505050565b801515811461339a57600080fd5b6000602082840312156144de57600080fd5b8135610ec2816144be565b6001600160a01b038116811461339a57600080fd5b60006020828403121561451057600080fd5b8135610ec2816144e9565b60006020828403121561452d57600080fd5b5035919050565b6000806040838503121561454757600080fd5b8235614552816144e9565b946020939093013593505050565b60008060006060848603121561457557600080fd5b8335614580816144e9565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156145d4576145d4614595565b604052919050565b600067ffffffffffffffff8211156145f6576145f6614595565b5060051b60200190565b600082601f83011261461157600080fd5b81356020614626614621836145dc565b6145ab565b82815260059290921b8401810191818101908684111561464557600080fd5b8286015b8481101561466957803561465c816144e9565b8352918301918301614649565b509695505050505050565b60006020828403121561468657600080fd5b813567ffffffffffffffff81111561469d57600080fd5b6123e284828501614600565b600080604083850312156146bc57600080fd5b82356146c7816144e9565b915060208301356146d7816144e9565b809150509250929050565b6000806000606084860312156146f757600080fd5b8335925060208085013561470a816144e9565b9250604085013567ffffffffffffffff8082111561472757600080fd5b818701915087601f83011261473b57600080fd5b81358181111561474d5761474d614595565b61475f601f8201601f191685016145ab565b9150808252888482850101111561477557600080fd5b80848401858401376000848284010152508093505050509250925092565b6000806000606084860312156147a857600080fd5b8335925060208401356147ba816144e9565b929592945050506040919091013590565b600080600080608085870312156147e157600080fd5b84356147ec816144e9565b935060208501356147fc816144e9565b9250604085013561480c816144e9565b9396929550929360600135925050565b6000806040838503121561482f57600080fd5b823567ffffffffffffffff81111561484657600080fd5b61485285828601614600565b92505060208301356146d7816144be565b60008083601f84011261487557600080fd5b50813567ffffffffffffffff81111561488d57600080fd5b60208301915083602082850101111561444b57600080fd5b60008060008060008060008060a0898b0312156148c157600080fd5b88356148cc816144e9565b975060208901356148dc816144e9565b9650604089013567ffffffffffffffff808211156148f957600080fd5b6149058c838d01614406565b909850965060608b013591508082111561491e57600080fd5b61492a8c838d01614406565b909650945060808b013591508082111561494357600080fd5b506149508b828c01614863565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561497d57600080fd5b8635614988816144e9565b95506020870135614998816144e9565b94506040870135935060608701359250608087013567ffffffffffffffff8111156149c257600080fd5b6149ce89828a01614863565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614a0857600080fd5b8151610ec2816144be565b634e487b7160e01b600052601160045260246000fd5b600060018201614a3b57614a3b614a13565b5060010190565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b6001600160a01b03929092168252602082015260400190565b80820180821115613b8357613b83614a13565b6000816000190483118215151615614ab757614ab7614a13565b500290565b600060208284031215614ace57600080fd5b5051919050565b60005b83811015614af0578181015183820152602001614ad8565b50506000910152565b60008251614b0b818460208701614ad5565b9190910192915050565b600082614b3257634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115613b8357613b83614a13565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600060208284031215614b9457600080fd5b8151610ec2816144e9565b600082601f830112614bb057600080fd5b81516020614bc0614621836145dc565b82815260059290921b84018101918181019086841115614bdf57600080fd5b8286015b848110156146695780518352918301918301614be3565b60008060408385031215614c0d57600080fd5b825167ffffffffffffffff80821115614c2557600080fd5b818501915085601f830112614c3957600080fd5b81516020614c49614621836145dc565b82815260059290921b84018101918181019089841115614c6857600080fd5b948201945b83861015614c8f578551614c80816144e9565b82529482019490820190614c6d565b91880151919650909350505080821115614ca857600080fd5b50614cb585828601614b9f565b9150509250929050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020815260008251806020840152614d29816040850160208701614ad5565b601f01601f1916919091016040019291505056fea2646970667358221220229f2692774852c5e6f629d2e9d5b781d6e67f3534567a99249e89422c03b44864736f6c63430008100033",
  "devdoc": {
    "author": "BlueberryProtocol",
    "kind": "dev",
    "methods": {
      "EXECUTOR()": {
        "details": "An executor is the owner of the current position.",
        "returns": {
          "_0": "Address of the executor."
        }
      },
      "accrue(address)": {
        "details": "Trigger interest accrual for a specific bank.",
        "params": {
          "token": "The address of the underlying token to trigger the interest accrual."
        }
      },
      "accrueAll(address[])": {
        "details": "Convenient function to trigger interest accrual for multiple banks.",
        "params": {
          "tokens": "An array of token addresses to trigger interest accrual for."
        }
      },
      "addBank(address,address,address,uint256)": {
        "details": "Add a new bank entity with associated vaults.Emits a {AddBank} event.",
        "params": {
          "hardVault": "Address of the hardVault.",
          "liqThreshold": "Liquidation threshold.",
          "softVault": "Address of the softVault.",
          "token": "Address of the underlying token for the bank."
        }
      },
      "borrow(address,uint256)": {
        "details": "This function must only be called from a spell while under execution.Emit a {Borrow} event.",
        "params": {
          "amount": "The amount of tokens the user wishes to borrow.",
          "token": "The token to borrow from the bank."
        },
        "returns": {
          "borrowedAmount": "Returns the actual amount borrowed from the bank."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "currentPositionDebt(uint256)": {
        "details": "Trigger interest accrual and return the current debt balance for a specific position.",
        "params": {
          "positionId": "The ID of the position to query for the debt balance. The current debt balance for the specified position."
        }
      },
      "execute(uint256,address,bytes)": {
        "details": "Executes a specific action on a position.Emit an {Execute} event.",
        "params": {
          "data": "Data payload to pass to the spell for execution.",
          "positionId": "Unique identifier of the position, or zero for a new position.",
          "spell": "Address of the contract (\"spell\") that contains the logic for the action to be executed."
        }
      },
      "feeManager()": {
        "details": "Get the current FeeManager interface from the configuration.",
        "returns": {
          "_0": "An interface representing the current FeeManager."
        }
      },
      "getBankInfo(address)": {
        "details": "Retrieve information about a specific bank.",
        "params": {
          "token": "The token address to query for bank information."
        },
        "returns": {
          "bToken": "The address of the bToken associated with the bank.",
          "isListed": "Whether the bank is listed or not.",
          "totalShare": "The total shares in the bank."
        }
      },
      "getCurrentPositionInfo()": {
        "details": "Fetches details about the current active position.",
        "returns": {
          "_0": "Position object containing all details about the current position."
        }
      },
      "getDebtValue(uint256)": {
        "details": "Computes the total USD value of the debt of a given position.",
        "params": {
          "positionId": "ID of the position to compute the debt value for."
        },
        "returns": {
          "debtValue": "Total USD value of the position's debt."
        }
      },
      "getIsolatedCollateralValue(uint256)": {
        "details": "Computes the USD value of the isolated collateral for a given position.",
        "params": {
          "positionId": "ID of the position to compute the isolated collateral value for."
        },
        "returns": {
          "icollValue": "USD value of the isolated collateral."
        }
      },
      "getPositionDebt(uint256)": {
        "details": "Should call accrue first to obtain the current debt.",
        "params": {
          "positionId": "The ID of the position to query."
        }
      },
      "getPositionInfo(uint256)": {
        "details": "Fetches details about a specific position using its ID.",
        "params": {
          "positionId": "Unique identifier of the position."
        },
        "returns": {
          "_0": "Position object containing all details about the position."
        }
      },
      "getPositionRisk(uint256)": {
        "details": "Computes the risk ratio of a specified position.",
        "params": {
          "positionId": "ID of the position to assess risk for."
        },
        "returns": {
          "risk": "The risk ratio of the position (based on a scale of 1e4)."
        }
      },
      "getPositionValue(uint256)": {
        "details": "Computes the total USD value of the collateral of a given position.",
        "params": {
          "positionId": "ID of the position to compute the value for."
        },
        "returns": {
          "positionValue": "Total USD value of the collateral and pending rewards."
        }
      },
      "initialize(address,address)": {
        "details": "Initialize the bank smart contract, using msg.sender as the first governor.Emits a {SetOracle} event.",
        "params": {
          "config_": "The Protocol config address",
          "oracle_": "The oracle smart contract address."
        }
      },
      "isBorrowAllowed()": {
        "details": "Determine if borrowing is currently allowed based on the bank's status flags.",
        "returns": {
          "_0": "A boolean indicating whether borrowing is permitted."
        }
      },
      "isLendAllowed()": {
        "details": "Determine if lending is currently allowed based on the bank's status flags.",
        "returns": {
          "_0": "A boolean indicating whether lending is permitted."
        }
      },
      "isLiquidatable(uint256)": {
        "details": "Determines if a given position can be liquidated based on its risk ratio.",
        "params": {
          "positionId": "ID of the position to check."
        },
        "returns": {
          "_0": "True if the position can be liquidated; otherwise, false."
        }
      },
      "isRepayAllowed()": {
        "details": "Determine if repayments are currently allowed based on the bank's status flags.",
        "returns": {
          "_0": "A boolean indicating whether repayments are permitted."
        }
      },
      "isWithdrawLendAllowed()": {
        "details": "Determine if withdrawing from lending is currently allowed based on the bank's status flags.",
        "returns": {
          "_0": "A boolean indicating whether withdrawing from lending is permitted."
        }
      },
      "lend(address,uint256)": {
        "details": "Lend tokens to the bank as isolated collateral.Emit a {Lend} event.",
        "params": {
          "amount": "The number of tokens to lend.",
          "token": "The address of the token to lend."
        }
      },
      "liquidate(uint256,address,uint256)": {
        "details": "Liquidates a position by repaying its debt and taking the collateral.Emits a {Liquidate} event.",
        "params": {
          "amountCall": "The amount of debt to be repaid when calling transferFrom.",
          "debtToken": "The token in which the debt is denominated.",
          "positionId": "The unique identifier of the position to liquidate."
        }
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "This function is called at the end of a  `safeBatchTransferFrom` after the balances have been updated."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "This function is called at the end of a  `safeTransferFrom` after the balance has been updated."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "putCollateral(address,uint256,uint256)": {
        "details": "Must only be called during execution.",
        "params": {
          "amountCall": "The amount of tokens to add as collateral.",
          "collId": "The token ID for collateral (i.e., uint256 format of LP address).",
          "collToken": "The ERC1155 token wrapped for collateral (i.e., Wrapped token of LP)."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(address,uint256)": {
        "details": "This function must only be called while under execution.Emit a {Repay} event.",
        "params": {
          "amountCall": "The amount of tokens to be repaid.",
          "token": "The token to repay to the bank."
        }
      },
      "setAllowContractCalls(bool)": {
        "details": "Toggles the allowance of contract calls.",
        "params": {
          "ok": "If true, contract calls are allowed. Otherwise, only EOA calls are allowed."
        }
      },
      "setBankStatus(uint256)": {
        "details": "Update the bank's operational status flags.",
        "params": {
          "_bankStatus": "The new status flags for the bank."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if the interfaceId is 0x01ffc9a7 (IERC1155Receiver)."
      },
      "takeCollateral(uint256)": {
        "details": "Must only be called during execution.",
        "params": {
          "amount": "The amount of tokens to be withdrawn as collateral."
        },
        "returns": {
          "_0": "Returns the amount of collateral withdrawn."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelistContracts(address[],bool[])": {
        "details": "Sets whitelist statuses for various contracts.",
        "params": {
          "contracts": "List of contract addresses.",
          "statuses": "Corresponding list of whitelist statuses to set."
        }
      },
      "whitelistERC1155(address[],bool)": {
        "details": "Set the whitelist status for specific wrapped tokens (ERC1155).",
        "params": {
          "ok": "Boolean indicating the desired whitelist status for the provided tokens.",
          "tokens": "Array of wrapped token addresses to set their whitelist status."
        }
      },
      "whitelistSpells(address[],bool[])": {
        "details": "Set the whitelist status for specific spells.",
        "params": {
          "spells": "Array of spell addresses to change their whitelist status.",
          "statuses": "Array of boolean values indicating the desired whitelist status for each spell."
        }
      },
      "whitelistTokens(address[],bool[])": {
        "details": "Set the whitelist status for specific tokens.",
        "params": {
          "statuses": "Array of boolean values indicating the desired whitelist status for each token.",
          "tokens": "Array of token addresses to change their whitelist status."
        }
      },
      "withdrawLend(address,uint256)": {
        "details": "Withdraw isolated collateral tokens previously lent to the bank.Emit a {WithdrawLend} event.",
        "params": {
          "shareAmount": "The number of vault share tokens to withdraw.",
          "token": "The address of the isolated collateral token to withdraw."
        }
      }
    },
    "stateVariables": {
      "POSITION_ID": {
        "return": "Current position ID.",
        "returns": {
          "_0": "Current position ID."
        }
      },
      "SPELL": {
        "return": "Current spell address.",
        "returns": {
          "_0": "Current spell address."
        }
      },
      "oracle": {
        "details": "The protocol config address."
      }
    },
    "title": "BlueberryBank",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "BAD_COLLATERAL(uint256)": [
        {
          "notice": "Thrown when collateral for a specific position is flagged as bad or invalid."
        }
      ],
      "BAD_POSITION(uint256)": [
        {
          "notice": "Thrown when a position is flagged as bad or invalid."
        }
      ],
      "BANK_ALREADY_LISTED()": [
        {
          "notice": "Thrown when a bank is already listed for a given token."
        }
      ],
      "BANK_LIMIT()": [
        {
          "notice": "Thrown when the bank limit is reached."
        }
      ],
      "BANK_NOT_LISTED(address)": [
        {
          "notice": "Thrown when a bank isn't listed for a given token."
        }
      ],
      "BORROW_FAILED(uint256)": [
        {
          "notice": "Thrown when borrowing from the vault fails."
        }
      ],
      "BORROW_NOT_ALLOWED()": [
        {
          "notice": "Thrown when the borrowing action isn't allowed."
        }
      ],
      "BORROW_ZERO_SHARE(uint256)": [
        {
          "notice": "Thrown when a borrow operation results in zero shares."
        }
      ],
      "BTOKEN_ALREADY_ADDED()": [
        {
          "notice": "Thrown when the BTOKEN is already added."
        }
      ],
      "DIFF_COL_EXIST(address)": [
        {
          "notice": "Thrown when a different collateral type exists."
        }
      ],
      "INCORRECT_UNDERLYING(address)": [
        {
          "notice": "Thrown when an incorrect underlying token is provided."
        }
      ],
      "INPUT_ARRAY_MISMATCH()": [
        {
          "notice": "Thrown when the lengths of input arrays do not match."
        }
      ],
      "INSUFFICIENT_COLLATERAL()": [
        {
          "notice": "Thrown when there's insufficient collateral for an operation."
        }
      ],
      "INVALID_UTOKEN(address)": [
        {
          "notice": "Thrown when an invalid utility token is provided."
        }
      ],
      "LEND_NOT_ALLOWED()": [
        {
          "notice": "Thrown when the lending action isn't allowed."
        }
      ],
      "LIQ_THRESHOLD_TOO_HIGH(uint256)": [
        {
          "notice": "Thrown when the liquidation threshold is set too high."
        }
      ],
      "LIQ_THRESHOLD_TOO_LOW(uint256)": [
        {
          "notice": "Thrown when the liquidation threshold is set too low."
        }
      ],
      "LOCKED()": [
        {
          "notice": "Thrown when certain actions are locked."
        }
      ],
      "NOT_EOA(address)": [
        {
          "notice": "Thrown when a transaction isn't initiated  by an externally owned account (EOA)."
        }
      ],
      "NOT_FROM_OWNER(uint256,address)": [
        {
          "notice": "Thrown when the sender is not the owner of a given position ID."
        }
      ],
      "NOT_FROM_SPELL(address)": [
        {
          "notice": "Thrown when a transaction isn't initiated by the expected spell."
        }
      ],
      "NOT_IN_EXEC()": [
        {
          "notice": "Thrown when an action isn't executed."
        }
      ],
      "NOT_LIQUIDATABLE(uint256)": [
        {
          "notice": "Thrown when a position is not eligible for liquidation."
        }
      ],
      "NOT_UNDER_EXECUTION()": [
        {
          "notice": "Thrown when a function is called without a required execution flag."
        }
      ],
      "ORACLE_NOT_SUPPORT(address)": [
        {
          "notice": "Thrown when the oracle doesn't support a specific token."
        }
      ],
      "ORACLE_NOT_SUPPORT_WTOKEN(address)": [
        {
          "notice": "Thrown when the oracle doesn't support a specific wToken."
        }
      ],
      "REPAY_ALLOW_NOT_WARMED_UP()": [
        {
          "notice": "Thrown when the repayment allowance hasn't been warmed up."
        }
      ],
      "REPAY_EXCEEDS_DEBT(uint256,uint256)": [
        {
          "notice": "Thrown when an attempted repayment exceeds the actual debt."
        }
      ],
      "REPAY_FAILED(uint256)": [
        {
          "notice": "Thrown when repaying to the vault fails."
        }
      ],
      "REPAY_NOT_ALLOWED()": [
        {
          "notice": "Thrown when the repaying action isn't allowed."
        }
      ],
      "SPELL_NOT_WHITELISTED(address)": [
        {
          "notice": "Thrown when a spell address isn't whitelisted."
        }
      ],
      "TOKEN_NOT_WHITELISTED(address)": [
        {
          "notice": "Thrown when a token isn't whitelisted."
        }
      ],
      "WITHDRAW_LEND_NOT_ALLOWED()": [
        {
          "notice": "Thrown when the redeeming action isn't allowed."
        }
      ],
      "ZERO_ADDRESS()": [
        {
          "notice": "Thrown when the address provided is the zero address."
        }
      ],
      "ZERO_AMOUNT()": [
        {
          "notice": "Thrown when an action involves zero amount of tokens."
        }
      ]
    },
    "events": {
      "AddBank(address,address,address,address)": {
        "notice": "Emitted when a new bank is added by the owner."
      },
      "Borrow(uint256,address,address,uint256,uint256)": {
        "notice": "Emitted when a user borrows tokens from a bank."
      },
      "Execute(uint256,address)": {
        "notice": "Emitted when a position is executed."
      },
      "Lend(uint256,address,address,uint256)": {
        "notice": "Emitted when tokens are lent to the bank."
      },
      "Liquidate(uint256,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when a position is liquidated."
      },
      "PutCollateral(uint256,address,address,address,uint256,uint256)": {
        "notice": "Emitted when a user adds tokens as collateral."
      },
      "Repay(uint256,address,address,uint256,uint256)": {
        "notice": "Emitted when a user repays borrowed tokens to a bank."
      },
      "SetOracle(address)": {
        "notice": "Emitted when the oracle's address is updated by the owner."
      },
      "SetWhitelistERC1155(address,bool)": {
        "notice": "Emitted when a Wrapped ERC1155 token is whitelisted or removed by the owner."
      },
      "SetWhitelistToken(address,bool)": {
        "notice": "Emitted when a token is whitelisted or removed by the owner."
      },
      "TakeCollateral(uint256,address,address,uint256,uint256)": {
        "notice": "Emitted when a user retrieves tokens from their collateral."
      },
      "WithdrawLend(uint256,address,address,uint256)": {
        "notice": "Emitted when lent tokens are withdrawn from the bank."
      }
    },
    "kind": "user",
    "methods": {
      "EXECUTOR()": {
        "notice": "Fetches the executor of the current position."
      },
      "POSITION_ID()": {
        "notice": "Returns the ID of the currently executed position."
      },
      "SPELL()": {
        "notice": "Returns the address of the currently executed spell."
      },
      "_GENERAL_LOCK()": {
        "notice": "Temporary variables used across functions."
      },
      "allBanks(uint256)": {
        "notice": "Collections of banks and positions."
      },
      "allowContractCalls()": {
        "notice": "Flags and whitelists"
      },
      "bTokenInBank(address)": {
        "notice": "Mapping from token to bank data."
      },
      "bankStatus()": {
        "notice": "Next available position ID, starting from 1 (see initialize)."
      },
      "banks(address)": {
        "notice": "The list of all listed banks."
      },
      "borrow(address,uint256)": {
        "notice": "Allows users to borrow tokens from the specified bank."
      },
      "config()": {
        "notice": "Configurations and oracle addresses."
      },
      "execute(uint256,address,bytes)": {
        "notice": "This can be used for various operations like adjusting collateral, repaying debt, etc."
      },
      "getCurrentPositionInfo()": {
        "notice": "This function assumes the presence of an active position and will revert if there's none."
      },
      "getDebtValue(uint256)": {
        "notice": "Ensure to call `accrue` beforehand to account for any interest changes."
      },
      "getIsolatedCollateralValue(uint256)": {
        "notice": "Ensure to call `accrue` beforehand to get the most recent value."
      },
      "getPositionDebt(uint256)": {
        "notice": "Retrieve the debt of a given position, considering the stored debt interest."
      },
      "getPositionRisk(uint256)": {
        "notice": "A higher risk ratio implies greater risk associated with the position.         when:  riskRatio = (ov - pv) / cv         where: riskRatio = (debt - positionValue) / isolatedCollateralValue"
      },
      "getPositionValue(uint256)": {
        "notice": "The returned value includes both the collateral and any pending rewards."
      },
      "isBorrowAllowed()": {
        "notice": "Check the last bit of bankStatus."
      },
      "isLendAllowed()": {
        "notice": "Check the third-to-last bit of bankStatus."
      },
      "isRepayAllowed()": {
        "notice": "Check the second-to-last bit of bankStatus."
      },
      "isWithdrawLendAllowed()": {
        "notice": "Check the fourth-to-last bit of bankStatus."
      },
      "lend(address,uint256)": {
        "notice": "The tokens lent will be used as collateral in the bank and might earn interest or other rewards."
      },
      "liquidate(uint256,address,uint256)": {
        "notice": "Liquidation can only be triggered if the position is deemed liquidatable          and other conditions are met."
      },
      "nextPositionId()": {
        "notice": "State variables for position and bank."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "notice": "Handle the receipt of multiple ERC1155 token types."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "Handle the receipt of a single ERC1155 token type."
      },
      "positions(uint256)": {
        "notice": "Mapping from bToken to its existence in bank."
      },
      "putCollateral(address,uint256,uint256)": {
        "notice": "Allows users to provide additional collateral."
      },
      "repay(address,uint256)": {
        "notice": "Allows users to repay their borrowed tokens to the bank."
      },
      "repayResumedTimestamp()": {
        "notice": "Each bit stores certain bank status, e.g. borrow allowed, repay allowed"
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks if the contract supports a given interface."
      },
      "takeCollateral(uint256)": {
        "notice": "Allows users to withdraw a portion of their collateral."
      },
      "whitelistedContracts(address)": {
        "notice": "Mapping from spell to whitelist status"
      },
      "whitelistedSpells(address)": {
        "notice": "Mapping from token to whitelist status"
      },
      "whitelistedWrappedTokens(address)": {
        "notice": "Mapping from token to whitelist status"
      },
      "withdrawLend(address,uint256)": {
        "notice": "This will reduce the isolated collateral and might also reduce the position's overall health."
      }
    },
    "notice": "Blueberry Bank is the main contract that stores user's positions and track the borrowing of tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 241,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 244,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3309,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 233,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9606,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "_GENERAL_LOCK",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 9608,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "_IN_EXEC_LOCK",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 9610,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "POSITION_ID",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 9612,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "SPELL",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 9616,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "config",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IProtocolConfig)13609"
      },
      {
        "astId": 9620,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "oracle",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(ICoreOracle)13419"
      },
      {
        "astId": 9623,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "nextPositionId",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 9626,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "bankStatus",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 9629,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "repayResumedTimestamp",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 9633,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "allBanks",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9639,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "banks",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_struct(Bank)12988_storage)"
      },
      {
        "astId": 9644,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "bTokenInBank",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9650,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "positions",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint256,t_struct(Position)13012_storage)"
      },
      {
        "astId": 9653,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "allowContractCalls",
        "offset": 0,
        "slot": "114",
        "type": "t_bool"
      },
      {
        "astId": 9657,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "whitelistedTokens",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9662,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "whitelistedWrappedTokens",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9667,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "whitelistedSpells",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9672,
        "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
        "label": "whitelistedContracts",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICoreOracle)13419": {
        "encoding": "inplace",
        "label": "contract ICoreOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IProtocolConfig)13609": {
        "encoding": "inplace",
        "label": "contract IProtocolConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Bank)12988_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBank.Bank)",
        "numberOfBytes": "32",
        "value": "t_struct(Bank)12988_storage"
      },
      "t_mapping(t_uint256,t_struct(Position)13012_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBank.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)13012_storage"
      },
      "t_struct(Bank)12988_storage": {
        "encoding": "inplace",
        "label": "struct IBank.Bank",
        "members": [
          {
            "astId": 12969,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12972,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "index",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 12975,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "hardVault",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12978,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "softVault",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12981,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "bToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12984,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "totalShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12987,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "liqThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Position)13012_storage": {
        "encoding": "inplace",
        "label": "struct IBank.Position",
        "members": [
          {
            "astId": 12990,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12993,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "collToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12996,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "underlyingToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12999,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "debtToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 13002,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "underlyingVaultShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13005,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "collId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13008,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "collateralSize",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13011,
            "contract": "contracts/BlueBerryBank.sol:BlueBerryBank",
            "label": "debtShare",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}